<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>BoostTestTargetsDynamic.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/</path>
    <filename>BoostTestTargetsDynamic_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_TEST_DYN_LINK</name>
      <anchorfile>BoostTestTargetsDynamic_8h.html</anchorfile>
      <anchor>a139f00d2466d591f60b8d6a73c8273f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoostTestTargetsIncluded.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/</path>
    <filename>BoostTestTargetsIncluded_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>BoostTestTargetsStatic.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/</path>
    <filename>BoostTestTargetsStatic_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>CheckMacHIDAPI.cpp</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/</path>
    <filename>CheckMacHIDAPI_8cpp.html</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>CheckMacHIDAPI_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Findcppcheck.cpp</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/</path>
    <filename>Findcppcheck_8cpp.html</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Findcppcheck_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>alloc.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/ghost-fake-stl/</path>
    <filename>alloc_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>hash_map.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/ghost-fake-stl/</path>
    <filename>hash__map_8h.html</filename>
    <class kind="class">hash</class>
    <class kind="class">equal_to</class>
    <class kind="class">hash_map</class>
    <class kind="class">hash_map&lt; Key, Val, hash&lt; Key &gt;, equal_to&lt; Val &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>iostream.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/ghost-fake-stl/</path>
    <filename>iostream_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>list.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/ghost-fake-stl/</path>
    <filename>list_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>pair.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/ghost-fake-stl/</path>
    <filename>pair_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>set.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/ghost-fake-stl/</path>
    <filename>set_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>vector.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/ghost-fake-stl/</path>
    <filename>vector_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>LICENSE_1_0.txt</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/</path>
    <filename>LICENSE__1__0_8txt.html</filename>
    <member kind="function">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this</type>
      <name>license</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>a32327c22ecdfc749961a4589eda96730</anchor>
      <arglist>(the &quot;Software&quot;) to use</arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version</type>
      <name>August</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>ae71537e16143fd1fb0983ebba966a63f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby</type>
      <name>granted</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>a1e036d527c88948b88a0f71e07419bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of</type>
      <name>charge</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>af1920e13868fba578c73665c38f7d357</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this</type>
      <name>reproduce</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>aa76fd25bb5d9a82f351c0188325ddf19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this</type>
      <name>display</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>a65ce1a5567a8cf46577b08f5ac9c09da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this</type>
      <name>distribute</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>a3c89cb107ac71ac6c59af1b48094e90f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this</type>
      <name>execute</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>a89433f6bae83e12328d00dd5a2922de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the</type>
      <name>Software</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>ace9c60d08acfe96bcb75cdf43fa5e678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the and to prepare derivative works of the and to permit third parties to whom the Software is furnished to do</type>
      <name>so</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>a45dcdfe4df5baa1d8c3683eb8705c61a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the and to prepare derivative works of the and to permit third parties to whom the Software is furnished to do all subject to the</type>
      <name>following</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>a6456ded5c048da496cc831b5b41221fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the and to prepare derivative works of the and to permit third parties to whom the Software is furnished to do all subject to the including the above license</type>
      <name>grant</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>ad246752787b1288cbd02361cfc35bbfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the and to prepare derivative works of the and to permit third parties to whom the Software is furnished to do all subject to the including the above license this restriction and the following</type>
      <name>disclaimer</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>ad95efb310f68b3c958498573a9a9ddda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the and to prepare derivative works of the and to permit third parties to whom the Software is furnished to do all subject to the including the above license this restriction and the following must be included in all copies of the in whole or in</type>
      <name>part</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>aaa59da54a97b56480c5d5c61e3fbfbe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the and to prepare derivative works of the and to permit third parties to whom the Software is furnished to do all subject to the including the above license this restriction and the following must be included in all copies of the in whole or in and all derivative works of the unless such copies or derivative works are solely in the form of machine executable object code generated by a source language processor THE SOFTWARE IS PROVIDED AS</type>
      <name>IS</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>a035debe469763088177b6e34e5623617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the and to prepare derivative works of the and to permit third parties to whom the Software is furnished to do all subject to the including the above license this restriction and the following must be included in all copies of the in whole or in and all derivative works of the unless such copies or derivative works are solely in the form of machine executable object code generated by a source language processor THE SOFTWARE IS PROVIDED AS WITHOUT WARRANTY OF ANY</type>
      <name>KIND</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>ad23bd01d3cef86aed98079d826a6eb3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the and to prepare derivative works of the and to permit third parties to whom the Software is furnished to do all subject to the including the above license this restriction and the following must be included in all copies of the in whole or in and all derivative works of the unless such copies or derivative works are solely in the form of machine executable object code generated by a source language processor THE SOFTWARE IS PROVIDED AS WITHOUT WARRANTY OF ANY EXPRESS OR</type>
      <name>IMPLIED</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>acd8df50187a722da3f67c9f4b01a1572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the and to prepare derivative works of the and to permit third parties to whom the Software is furnished to do all subject to the including the above license this restriction and the following must be included in all copies of the in whole or in and all derivative works of the unless such copies or derivative works are solely in the form of machine executable object code generated by a source language processor THE SOFTWARE IS PROVIDED AS WITHOUT WARRANTY OF ANY EXPRESS OR INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</type>
      <name>MERCHANTABILITY</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>a67f1603cd53689927b24e5d3cc8d757b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the and to prepare derivative works of the and to permit third parties to whom the Software is furnished to do all subject to the including the above license this restriction and the following must be included in all copies of the in whole or in and all derivative works of the unless such copies or derivative works are solely in the form of machine executable object code generated by a source language processor THE SOFTWARE IS PROVIDED AS WITHOUT WARRANTY OF ANY EXPRESS OR INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF FITNESS FOR A PARTICULAR</type>
      <name>PURPOSE</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>aa708dac3959aad55f7e2a2dc06ab5483</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the and to prepare derivative works of the and to permit third parties to whom the Software is furnished to do all subject to the including the above license this restriction and the following must be included in all copies of the in whole or in and all derivative works of the unless such copies or derivative works are solely in the form of machine executable object code generated by a source language processor THE SOFTWARE IS PROVIDED AS WITHOUT WARRANTY OF ANY EXPRESS OR INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF FITNESS FOR A PARTICULAR TITLE AND NON INFRINGEMENT IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER</type>
      <name>LIABILITY</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>a155dc6a50ea691e50dfeb8129f3c12b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the and to prepare derivative works of the and to permit third parties to whom the Software is furnished to do all subject to the including the above license this restriction and the following must be included in all copies of the in whole or in and all derivative works of the unless such copies or derivative works are solely in the form of machine executable object code generated by a source language processor THE SOFTWARE IS PROVIDED AS WITHOUT WARRANTY OF ANY EXPRESS OR INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF FITNESS FOR A PARTICULAR TITLE AND NON INFRINGEMENT IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER WHETHER IN</type>
      <name>CONTRACT</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>a8381101c32c24245df320934259c9a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the and to prepare derivative works of the and to permit third parties to whom the Software is furnished to do all subject to the including the above license this restriction and the following must be included in all copies of the in whole or in and all derivative works of the unless such copies or derivative works are solely in the form of machine executable object code generated by a source language processor THE SOFTWARE IS PROVIDED AS WITHOUT WARRANTY OF ANY EXPRESS OR INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF FITNESS FOR A PARTICULAR TITLE AND NON INFRINGEMENT IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER WHETHER IN TORT OR</type>
      <name>OTHERWISE</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>ae54af06b740f9d21cc1b1937117baf62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boost Software License Version Permission is hereby free of to any person or organization obtaining a copy of the software and accompanying documentation covered by this and transmit the and to prepare derivative works of the and to permit third parties to whom the Software is furnished to do all subject to the including the above license this restriction and the following must be included in all copies of the in whole or in and all derivative works of the unless such copies or derivative works are solely in the form of machine executable object code generated by a source language processor THE SOFTWARE IS PROVIDED AS WITHOUT WARRANTY OF ANY EXPRESS OR INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF FITNESS FOR A PARTICULAR TITLE AND NON INFRINGEMENT IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER WHETHER IN TORT OR ARISING</type>
      <name>FROM</name>
      <anchorfile>LICENSE__1__0_8txt.html</anchorfile>
      <anchor>a7d7ff23aea27855bd7f0f9d6d4efc78f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>module-help.txt</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/</path>
    <filename>module-help_8txt.html</filename>
    <member kind="typedef">
      <type>${MACOSX_HID_UINT32T}) in your listfile and the following prototype for the function you &apos;d like to register using setInterruptReportHandlerCallback:void ReaderReportCallback(void *target, IOReturn result, void *refcon, void *sender, MACOSX_HID_UINT32T size) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:CheckVersion Utility function for Find modules considering multiple possible versions Requires these CMake modules:no additional modules required Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:CleanDirectoryList Removes duplicate entries and non-directories from a provided list clean_directory_list(&lt; listvar &gt;[&lt; additional list items &gt;...]) Requires CMake 2.6 or newer(uses the &apos;function&apos; command) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:CleanLibraryList A smarter replacement for list(REMOVE_DUPLICATES) for library lists Note that, in the case of cyclic link dependencies, you _do_ actually need a library in a list multiple times. So, only use this function when you know that the dependency graph is acyclic. clean_library_list(&lt; listvar &gt;[&lt; additional list items &gt;...]) - where listvar is the name of a destination variable, and also possibly a source, and it is followed by any number(including 0) of additional libraries to append to the list before processing. Removes duplicates from the list, leaving only the last instance, while preserving the meaning of the &quot;optimized&quot;, &quot;debug&quot;, and &quot;general&quot; labeling.(Libraries listed as general are listed in the result instead as optimized and debug) Requires CMake 2.6 or newer(uses the &apos;function&apos; command) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:CopyResourcesToBuildTree Copy the resources your app needs to the build tree. copy_resources_to_build_tree(&lt; target_name &gt;) Requires CMake 2.6 or newer(uses the &apos;function&apos; command) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:CppcheckTargets Run cppcheck on c++source files as a custom target and a test include(CppcheckTargets) add_cppcheck(&lt; target-name &gt;[UNUSED_FUNCTIONS][STYLE][POSSIBLE_ERROR][FAIL_ON_WARNINGS]) - Create a target to check a target &apos;s sources with cppcheck and the indicated options add_cppcheck_sources(&lt; target-name &gt;[UNUSED_FUNCTIONS][STYLE][POSSIBLE_ERROR][FAIL_ON_WARNINGS]) - Create a target to check standalone sources with cppcheck and the indicated options Requires these CMake modules:Findcppcheck Requires CMake 2.6 or newer(uses the &apos;function&apos; command) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:CreateDashboardScripts Create ctest -S scripts to use to run dashboard builds include(CreateDashboardScripts) create_dashboard_scripts([&lt; initialcachetemplatefilename &gt;]) If you need additional settings to persist from the &quot;parent&quot; CMake instance to the initial cache created by the dashboard script, you may pass a filename which will be configured into the initial cache. In the resulting DASHBOARDSCRIPT_BASE_DIRECTORY, an end-user may optionally create a file named CustomInitialCache.${DASHBOARDSCRIPT_SCRIPT_NAME}(by default, CustomInitialCache.go.cmake) containing set commands that use the CACHE option, to set up additional site-local cache variable values. Requires these CMake modules:GetCompilerInfoString Requires CMake 2.6 or newer(uses the &apos;function&apos; command) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:CreateImportedTarget A smarter replacement for list(REMOVE_DUPLICATES) for library lists create_imported_target(&lt; libname &gt;[SHARED|STATIC|MODULE][&lt; library dependency &gt;...]) - where ${libname}_LIBRARIES is set to this library &apos;s paths. Removes duplicates from the list then sorts while preserving &quot;optimized&quot;, &quot;debug&quot;, and &quot;general&quot; labeling Requires CMake 2.6 or newer(uses the &apos;function&apos; command) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:CreateLaunchers Create launchers to set working directory, env. vars, etc. include(CreateLaunchers) - to make these available guess_runtime_library_dirs(&lt; outputvarname &gt;[&lt; extralibrary &gt; ...]) create_default_target_launcher(&lt; targetname &gt;[ARGS&lt; args... &gt;][FORWARD_ARGS][RUNTIME_LIBRARY_DIRS&lt; dir... &gt;][WORKING_DIRECTORY&lt; dir &gt;][ENVIRONMENT&lt; VAR=value &gt;[&lt; VAR=value &gt;...]]) create_target_launcher(&lt; targetname &gt;[ARGS&lt; args... &gt;][FORWARD_ARGS][RUNTIME_LIBRARY_DIRS&lt; dir... &gt;][WORKING_DIRECTORY&lt; dir &gt;][ENVIRONMENT&lt; VAR=value &gt;[&lt; VAR=value &gt;...]]) create_generic_launcher(&lt; launchername &gt;[RUNTIME_LIBRARY_DIRS&lt; dir... &gt;][WORKING_DIRECTORY&lt; dir &gt;][ENVIRONMENT&lt; VAR=value &gt;[&lt; VAR=value &gt;...]]) - sets GENERIC_LAUNCHER_COMMAND and GENERIC_LAUNCHER_FAIL_REGULAR_EXPRESSION Requires these CMake modules:ListFilter ProgramFilesGlob CleanDirectoryList Requires CMake 2.6 or newer(uses the &apos;function&apos; command) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:DoxygenTargets Run doxygen on source files as a custom target include(DoxygenTargets) add_doxygen(&lt; doxyfile &gt;[OUTPUT_DIRECTORY&lt; outputdir &gt;][INSTALL_DESTINATION&lt; installdir &gt;[INSTALL_COMPONENT&lt; installcomponent &gt;][INSTALL_PDF_NAME&lt; installpdfname &gt;]][DOC_TARGET&lt; targetname &gt;][PROJECT_NUMBER&lt; versionnumber &gt;][NO_WARNINGS][NO_PDF]) Requires these CMake modules:FindDoxygen Requires CMake 2.6 or newer(uses the &apos;function&apos; command) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:EnableExtraCompilerWarnings Add flags to compile with extra warnings enable_extra_compiler_warnings(&lt; targetname &gt;) globally_enable_extra_compiler_warnings() - to modify CMAKE_CXX_FLAGS, etc to change for all targets declared after the command, instead of per-command Original Author:2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:EnableProfiling Add flags to compile with profiling support - currently only for GCC enable_profiling(&lt; targetname &gt;) globally_enable_profiling() - to modify CMAKE_CXX_FLAGS, etc to change for all targets declared after the command, instead of per-command Original Author:2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FileCopyTargets Add a target for files that just need to be copied include(FileCopyTargets) add_file_copy_target(&lt; target_name &gt;&lt; directory to copy to &gt;&lt; filename &gt;[&lt; filename &gt;...]) Creates a custom target that copies the files to a directory, if needed. Relative paths for the destination directory are considered with with respect to CMAKE_CURRENT_BINARY_DIR You can use this target in all the usual ways, including add_dependencies(some_other_target this_target) to specify that another target depends on this. install_file_copy_target(&lt; target_name &gt;[arguments to INSTALL(PROGRAMS ...)]) Works just the same as INSTALL(PROGRAMS ...) because it wraps it to install the files you specified in add_file_copy_target Requires CMake 2.6 or newer(uses the &apos;function&apos; command) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindALUT try to find the OpenAL ALUT library Users may optionally supply:ALUT_ROOT_DIR - a prefix to start searching. Cache Variables:(probably not for direct use in your scripts) ALUT_INCLUDE_DIR ALUT_LIBRARY Non-cache variables you might use in your CMakeLists.txt:ALUT_FOUND ALUT_INCLUDE_DIRS ALUT_LIBRARIES ALUT_WORKAROUND_INCLUDE_DIRS - add these to your include path with include_directories(${ALUT_WORKAROUND_INCLUDE_DIRS} ${ALUT_INCLUDE_DIRS}) so you can always #include&lt; AL/al.h &gt; and #include&lt; AL/alut.h &gt; even on Mac where the paths might differ. Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindAdrienne try to find Adrienne Electronics Corporation timecode card library SDK available from the manufacturer:http:Cache Variables:(probably not for direct use in your scripts) ADRIENNE_INCLUDE_DIR ADRIENNE_LIBRARY ADRIENNE_RUNTIME_LIBRARY ADRIENNE_INCLUDE_FILE Variables you might use in your CMakeLists.txt:ADRIENNE_FOUND ADRIENNE_INCLUDE_DIRS ADRIENNE_LIBRARIES ADRIENNE_RUNTIME_LIBRARIES - the AEC_NTTC.dll file ADRIENNE_RUNTIME_LIBRARY_DIRS ADRIENNE_INCLUDE_FILENAME - this is probably AEC_NTTC.h, but it might also be AECINTTC.H. ADRIENNE_INCLUDE_HAS_EXTERN_C - Some(most) versions of the header already wrap their definitions in extern &quot;C&quot; { }, but some do not. ADRIENNE_DEFINITIONS - defines a quoted ADRIENNE_INCLUDE_FILENAME as above, so you can write a line like #include ADRIENNE_INCLUDE_FILENAME Also defines ADRIENNE_BEFORE_INCLUDE and ADRIENNE_AFTER_INCLUDE to handle adding extern &quot;C&quot; { and } if the header file doesn &apos;t do so itself. Variables that might be set by the user in the gui/command line to help find the library:ADRIENNE_ROOT_DIR - root of an Adrienne CD, disk, or extracted/copied contents thereof. Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2012 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2012. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindBluez try to find Bluez Cache Variables:(probably not for direct use in your scripts) BLUEZ_INCLUDE_DIR BLUEZ_LIBRARY Non-cache variables you might use in your CMakeLists.txt:BLUEZ_FOUND BLUEZ_INCLUDE_DIRS BLUEZ_LIBRARIES Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindCPPDOM try to find CPPDOM library Optionally uses Flagpoll and FindFlagpoll.cmake CPPDOM_LIBRARY_DIR, library search path CPPDOM_INCLUDE_DIR, include search path CPPDOM_LIBRARY, the library to link against CPPDOM_CXX_FLAGS CPPDOM_FOUND, If false, do not try to use this library. Useful configuration variables you might want to add to your cache:CPPDOM_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) CPPDOM_ADDITIONAL_VERSIONS - Additional versions(outside of 0.7.8 to 1.2.0) to use when constructing search names and paths This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. VR Juggler requires this package, so this Find script takes that into account when determining where to search for the desired files. The VJ_BASE_DIR environment variable is searched(preferentially) when searching for this package, so most sane VR Juggler build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2012 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2012. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindDCubed try to find DCUBED library DCUBED_LIBRARY_DIR, library search path DCUBED_INCLUDE_DIR, include search path DCUBED_{component}_LIBRARY, the library to link against DCUBED_ENVIRONMENT DCUBED_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:DCUBED_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) 2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt; http:Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindDirectInput try to find DirectInput library(part of DirectX SDK) Cache Variables:(probably not for direct use in your scripts) DIRECTINPUT_DXGUID_LIBRARY DIRECTINPUT_DXERR_LIBRARY DIRECTINPUT_DINPUT_LIBRARY DIRECTINPUT_INCLUDE_DIR Non-cache variables you should use in your CMakeLists.txt:DIRECTINPUT_LIBRARIES DIRECTINPUT_INCLUDE_DIRS DIRECTINPUT_FOUND - if this is not true, do not attempt to use this library Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2011 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2011. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindDirectShow Find Microsoft DirectShow sample files, library, and headers. DIRECTSHOW_INCLUDE_DIRS - where to find needed include file DIRECTSHOW_BASECLASS_DIR- Directory containing the DirectShow baseclass sample code. DIRECTSHOW_FOUND - True if DirectShow found. Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Initially in VRPN - Distributed under the Boost Software License, Version 1.0. Almost entirely re-written by:2012 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2012. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindDirectX try to find part of DirectX SDK Cache Variables:(probably not for direct use in your scripts) DIRECTX_INCLUDE_DIR Variables you should use in your CMakeLists.txt:DIRECTX_DXGUID_LIBRARY DIRECTX_DXERR_LIBRARY DIRECTX_DINPUT_LIBRARY DIRECTX_DINPUT_INCLUDE_DIR DIRECTX_D3D9_LIBRARY DIRECTX_D3DXOF_LIBRARY DIRECTX_D3DX9_LIBRARIES DIRECTX_INCLUDE_DIRS DIRECTX_FOUND - if this is not true, do not attempt to use this library Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) SelectLibraryConfigurations Original Author:2012 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2012. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindFlagpoll try to find Flagpoll application, and offer package-finding services FLAGPOLL, the executable:if not defined, do not try to use Flagpoll. Useful configuration variables you might want to add to your cache:FLAGPOLL_ROOT_DIR - A directory prefix to search for the app(a path that contains bin/as a subdirectory) VR Juggler requires this package, so this Find script takes that into account when determining where to search for the desired files. The VJ_BASE_DIR environment variable is searched(preferentially) when searching for this package, so most sane VR Juggler build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. You can use Flagpoll to provide directories to use as HINTS for find_ *These are the provided macros:flagpoll_get_include_dirs flagpoll_get_library_dirs flagpoll_get_library_names flagpoll_get_extra_libs All take the name of the desired package, optionally NO_DEPS to pass --no-deps to Flagpoll, and return yourpkgname_FLAGPOLL_INCLUDE_DIRS(etc. for the other macros). Example usage:flagpoll_get_include_dirs(vpr NO_DEPS) find_path(VPR20_INCLUDE_DIRS vpr/vpr.h HINTS ${vpr_FLAGPOLL_INCLUDE_DIRS}) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindGDB Try to find GDB Once done, this will define:GDB_FOUND - system has GDB GDB_COMMAND - the command to run GDB_VERSION - version GDB_HAS_RETURN_CHILD_RESULT - if the --return-child-result flag is supported Useful configuration variables you might want to add to your cache:GDB_ROOT_DIR - A directory prefix to search Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindGHOST try to find Sensable GHOST library and include files GHOST_INCLUDE_DIRS, where to find GL/glut.h, etc. GHOST_LIBRARIES, the libraries to link against GHOST_FOUND, If false, do not try to use GLUT. GHOST_RUNTIME_LIBRARY_DIRS, path to DLL on Windows for runtime use. Requires these CMake modules:no additional modules required Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindGLUI Try to find GLUI(GL User Interface) Requires OpenGL and GLUT - searches for them using find_package Once done, this will define GLUI_INCLUDE_DIR, where to find GL/glui.h(or GLUI/glui.h on mac) GLUI_LIBRARY, the libraries to link against GLUI_FOUND, If false, do not try to use GLUI. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:GLUI_ROOT_DIR - A directory prefix to search(usually a path that contains include/as a subdirectory) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindGLUT try to find glut library and include files GLUT_INCLUDE_DIRS, where to find GL/glut.h, etc. GLUT_LIBRARIES, the libraries to link against GLUT_FOUND, If false, do not try to use GLUT. GLUT_RUNTIME_LIBRARY_DIRS, path to DLL on Windows for runtime use. GLUT_RUNTIME_LIBRARY, dll on Windows, for installation purposes Also defined, but not for general use are:GLUT_INCLUDE_DIR, where to find GL/glut.h, etc. GLUT_glut_LIBRARY=the full path to the glut library. FindGMTL Try to find GMTL Optionally uses Flagpoll and FindFlagpoll.cmake Once done, this will define GMTL_FOUND - system has GMTL GMTL_INCLUDE_DIR - the GMTL include directory Useful configuration variables you might want to add to your cache:GMTL_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) GMTL_ADDITIONAL_VERSIONS - Additional versions(outside of 0.5.1 to 0.7.0) to use when constructing search names and paths This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. VR Juggler requires this package, so this Find script takes that into account when determining where to search for the desired files. The VJ_BASE_DIR environment variable is searched(preferentially) when searching for this package, so most sane VR Juggler build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2012 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2012. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindGPM try to find GPM library Cache Variables:(probably not for direct use in your scripts) GPM_INCLUDE_DIR GPM_LIBRARY Non-cache variables you might use in your CMakeLists.txt:GPM_FOUND GPM_INCLUDE_DIRS GPM_LIBRARIES Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindGadgeteer12 try to find Gadgeteer 1.2 library Requires JCCL 1.2 and VPR 2.0(thus FindJCCL12.cmake and FindVPR20.cmake) Requires X11 if not on Mac or Windows. Optionally uses Flagpoll and FindFlagpoll.cmake This library is a part of VR Juggler 2.2 - you probably want to use find_package(VRJuggler22) instead, for an easy interface to this and related scripts. See FindVRJuggler22.cmake for more information. GADGETEER12_LIBRARY_DIR, library search path GADGETEER12_INCLUDE_DIR, include search path GADGETEER12_LIBRARY, the library to link against GADGETEER12_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:GADGETEER12_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. The VJ_BASE_DIR environment variable is also searched(preferentially) when searching for this component, so most sane build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindGadgeteer20 try to find Gadgeteer 2.0 library Requires JCCL 1.4 and VPR 2.2(thus FindJCCL14.cmake and FindVPR22.cmake) Requires X11 if not on Mac or Windows. Optionally uses Flagpoll and FindFlagpoll.cmake This library is a part of VR Juggler 3.0 - you probably want to use find_package(VRJuggler30) instead, for an easy interface to this and related scripts. See FindVRJuggler30.cmake for more information. GADGETEER20_LIBRARY_DIR, library search path GADGETEER20_INCLUDE_DIR, include search path GADGETEER20_LIBRARY, the library to link against GADGETEER20_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:GADGETEER20_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. The VJ_BASE_DIR environment variable is also searched(preferentially) when searching for this component, so most sane build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Updated for VR Juggler 3.0 by:Brandon Newendorp&lt; brandon @newendorp.com &gt; FindGlove5DT try to find Glove5DT libraries Cache Variables:(probably not for direct use in your scripts) GLOVE5DT_INCLUDE_DIR GLOVE5DT_LIBRARY GLOVE5DT_LIBRARY_RELEASE GLOVE5DT_LIBRARY_DEBUG GLOVE5DT_RUNTIME_LIBRARY_RELEASE GLOVE5DT_RUNTIME_LIBRARY_DEBUG Non-cache variables you might use in your CMakeLists.txt:GLOVE5DT_FOUND GLOVE5DT_INCLUDE_DIRS GLOVE5DT_LIBRARIES GLOVE5DT_RUNTIME_LIBRARY_DIRS Requires these CMake modules:CleanDirectoryList CleanLibraryList ListCombinations ProgramFilesGlob SelectLibraryConfigurations(included with CMake &gt;=2.8.0) FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindHIDAPI try to find HIDAPI library from http:Cache Variables:(probably not for direct use in your scripts) HIDAPI_INCLUDE_DIR HIDAPI_LIBRARY Non-cache variables you might use in your CMakeLists.txt:HIDAPI_FOUND HIDAPI_INCLUDE_DIRS HIDAPI_LIBRARIES Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindIDLJ try to find Java &apos;s IDLJ Interface Definition Language compiler. Ideally used with CMake 2.8.5 or newer for Java support using FindJava.cmake and UseJava.cmake Variables:Java_IDLJ_COMMAND, executable for idlj IDLJ_FOUND, If false, do not try to use this Function:java_idlj(varname idlfile[extra idlj args]) - Generates the Java source files from the IDL file you indicate, and appends filenames suitable to add to a add_jar() call to the variable you specified. Because the files generated from an IDL file are not entirely predictable, java_idlj runs idlj in the cmake step, rather than the build step, and triggers a CMake re-run when an idl file is modified. Already up-to-date generated source is not re-generated, however. Files are generated in a directory created specifically for the particular IDL file and the particular call, in the build directory - there should be no worries about overwriting files or picking up too much with the wildcard. You may wish to add the IDL file to your list of sources if you want it to appear in your IDE, but it is not necessary. Original Author:2012 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2012. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindInterSense try to find InterSense library Cache Variables:(probably not for direct use in your scripts) INTERSENSE_INCLUDE_DIR INTERSENSE_ISENSEC_DIR - location of the isense.c &quot;import library&quot; substitute. INTERSENSE_LIBRARY Non-cache variables you might use in your CMakeLists.txt:INTERSENSE_FOUND INTERSENSE_INCLUDE_DIRS INTERSENSE_LIBRARIES Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Author:2013 Eric Marsh&lt; bits @wemarsh.com &gt; http:Kognitiv Neuroinformatik, Universität Bremen(building on Ryan Pavlik &apos;s templates) 2013 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:Program/VRAC Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindJCCL12 try to find JCCL 1.2 library Requires VPR 2.0(thus FindVPR20.cmake) Optionally uses Flagpoll and FindFlagpoll.cmake This library is a part of VR Juggler 2.2 - you probably want to use find_package(VRJuggler22) instead, for an easy interface to this and related scripts. See FindVRJuggler22.cmake for more information. JCCL12_LIBRARY_DIR, library search path JCCL12_INCLUDE_DIR, include search path JCCL12_LIBRARY, the library to link against JCCL12_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:JCCL12_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. The VJ_BASE_DIR environment variable is also searched(preferentially) when searching for this component, so most sane build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindJCCL14 try to find JCCL 1.4 library Requires VPR 2.2(thus FindVPR22.cmake) Optionally uses Flagpoll and FindFlagpoll.cmake This library is a part of VR Juggler 3.0 - you probably want to use find_package(VRJuggler30) instead, for an easy interface to this and related scripts. See FindVRJuggler30.cmake for more information. JCCL14_LIBRARY_DIR, library search path JCCL14_INCLUDE_DIR, include search path JCCL14_LIBRARY, the library to link against JCCL14_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:JCCL14_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. The VJ_BASE_DIR environment variable is also searched(preferentially) when searching for this component, so most sane build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Updated for VR Juggler 3.0 by:Brandon Newendorp&lt; brandon @newendorp.com &gt; FindJtTk try to find JTTK library JTTK_LIBRARY_DIRS, library search path JTTK_INCLUDE_DIRS, include search path JTTK_{component}_LIBRARY, the library to link against JTTK_ENVIRONMENT, environment variables to set JTTK_RUNTIME_LIBRARY_DIRS JTTK_FOUND, If false, do not try to use this library. If you have license issues, you might run this command on each JtTk-using target:jttk_stamp_binary(&lt; targetname &gt;) Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:JTTK_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindLAPACKLibs Try to find LAPACK and BLAS libraries Once done, this will define LAPACKLIBS_LIBRARIES, all libraries to link against LAPACKLIBS_FOUND, If false, do not try to use LAPACK library features. Users may wish to set:LAPACKLIBS_ROOT_DIR, location to start searching for LAPACK libraries Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindLibusb1 try to find libusb-1 library Cache Variables:(probably not for direct use in your scripts) LIBUSB1_LIBRARY LIBUSB1_INCLUDE_DIR Non-cache variables you should use in your CMakeLists.txt:LIBUSB1_LIBRARIES LIBUSB1_INCLUDE_DIRS LIBUSB1_FOUND - if this is not true, do not attempt to use this library Requires these CMake modules:ProgramFilesGlob FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindLuabind try to find Luabind Users may optionally supply:LUABIND_ROOT_DIR - a prefix to start searching Non-cache variables you might use in your CMakeLists.txt:LUABIND_FOUND LUABIND_DEFINITIONS LUABIND_INCLUDE_DIRS LUABIND_LIBRARIES Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindLyX Try to find LyX, and define some custom commands to export from LyX Once done, this will define:LYX_FOUND - system has LyX LYX_COMMAND - the command to run and the following new functions:lyx_export(&lt; format &gt;&lt; extension-without-leading-dot &gt;&lt; output-variable &gt; INPUT&lt; lyx-file &gt;[...][OUTPUT_TO_SOURCE_DIR][EXTRA_DEPS&lt; bibtex-or-other-file &gt;[...]]) - the base function These shortcut functions all have the same syntax:lyx_export_to_XXX(&lt; output-variable &gt; INPUT&lt; lyx-file &gt;[...][OUTPUT_TO_SOURCE_DIR][EXTRA_DEPS&lt; bibtex-or-other-file &gt;[...]]) Available shortcuts:lyx_export_to_docbook_xml lyx_export_to_docbook lyx_export_to_pdf lyx_export_to_pdf_via_pdflatex lyx_export_to_pdf_via_dvi Useful configuration variables you might want to add to your cache:LYX_ROOT_DIR - A directory prefix to search Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindMacHID try to find Mac HID frameworks Cache Variables:(probably not for direct use in your scripts) MACHID_CoreFoundation_LIBRARY MACHID_CoreFoundation_INCLUDE_DIR MACHID_IOKit_LIBRARY MACHID_IOKit_INCLUDE_DIR Non-cache variables you should use in your CMakeLists.txt:MACHID_DEFINITIONS MACHID_LIBRARIES MACHID_INCLUDE_DIRS MACHID_FOUND - if this is not true, do not attempt to use this library Requires these CMake modules:CheckMacHIDAPI FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindMarkdown try to find Markdown tool Cache Variables:MARKDOWN_EXECUTABLE Non-cache variables you might use in your CMakeLists.txt:MARKDOWN_FOUND Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2011 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2011. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindOpenCV ------------------------------ See http:The following variable is optionally searched for defaults OPENCV_ROOT_DIR:Base directory of OpenCv tree to use. OPENCV_NEW_LIBRARY_NAMES Set to YES before searching if you want to The following are set after configuration is done:OPENCV_FOUND OPENCV_INCLUDE_DIRS OPENCV_LIBRARIES 2004/05 Jan Woetzel, Friso, Daniel Grest 2006/01 complete rewrite by Jan Woetzel 2006/09 2nd rewrite introducing ROOT_DIR and PATH_SUFFIXES to handle multiple installed versions gracefully by Jan Woetzel 2010/02 Ryan Pavlik(Iowa State University) - partial rewrite to standardize tested with:www.mip.informatik.uni-kiel.de/~jw academic.cleardefinition.com FindOpenHaptics try to find OpenHaptics libraries Cache Variables:(probably not for direct use in your scripts) HDAPI_INCLUDE_DIR HDAPI_LIBRARY HDAPI_LIBRARY_RELEASE HDAPI_LIBRARY_DEBUG HDAPI_HDU_INCLUDE_DIR HDAPI_HDU_LIBRARY HDAPI_HDU_LIBRARY_RELEASE HDAPI_HDU_LIBRARY_DEBUG HLAPI_INCLUDE_DIR HLAPI_LIBRARY HLAPI_LIBRARY_RELEASE HLAPI_LIBRARY_DEBUG HLAPI_HLU_INCLUDE_DIR HLAPI_HLU_LIBRARY HLAPI_HLU_LIBRARY_RELEASE HLAPI_HLU_LIBRARY_DEBUG Non-cache variables you might use in your CMakeLists.txt:OPENHAPTICS_FOUND HDAPI_INCLUDE_DIRS HDAPI_LIBRARIES HDAPI_HDU_INCLUDE_DIRS HDAPI_HDU_LIBRARIES HLAPI_INCLUDE_DIRS HLAPI_LIBRARIES HLAPI_HLU_INCLUDE_DIRS HLAPI_HLU_LIBRARIES OPENHAPTICS_LIBRARIES - includes HD, HDU, HL, HLU OPENHAPTICS_RUNTIME_LIBRARY_DIRS OPENHAPTICS_ENVIRONMENT OPENHAPTICS_LIBRARY_DIRS OPENHAPTICS_INCLUDE_DIRS Requires these CMake modules:CleanDirectoryList CleanLibraryList ListCombinations ProgramFilesGlob SelectLibraryConfigurations(included with CMake &gt;=2.8.0) FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) CMake 2.6.3(uses &quot;unset&quot;) Original Author:2009-2012 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindParasolid try to find PARASOLID library Important note:If you are also using JtTk, do your find_package(JtTk) first, to avoid runtime PK_ *errors! PARASOLID_LIBRARY_DIR, library search path PARASOLID_INCLUDE_DIR, include search path PARASOLID_{component}_LIBRARY, the library to link against PARASOLID_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Requires these CMake modules:CheckVersion ListCombinations ProgramFilesGlob FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindPerformer try to find the OpenGL Performer library Users may optionally supply:PERFORMER_ROOT_DIR - a prefix to start searching. Cache Variables:(probably not for direct use in your scripts) PERFORMER_INCLUDE_DIR PERFORMER_LIBRARY PERFORMER_PFUI_LIBRARY - doesn &apos;t get included in PERFORMER_LIBRARIES PERFORMER_PFDU_UTIL_LIBRARY - doesn &apos;t get included in PERFORMER_LIBRARIES PERFORMER_PFV_LIBRARY - doesn &apos;t get included in PERFORMER_LIBRARIES Non-cache variables you might use in your CMakeLists.txt:PERFORMER_FOUND PERFORMER_INCLUDE_DIRS PERFORMER_LIBRARIES PERFORMER_RUNTIME_LIBRARY_DIRS Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2012 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2012. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindPerlModules try to find perl modules, passed as COMPONENTS Non-cache variable you might use in your CMakeLists.txt:PERLMODULES_FOUND Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2012 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2012. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindQVRPN try to find QVRPN library Of course, you may also just choose to make QVRPN a submodule of your project itself. Cache Variables:QVRPN_LIBRARY QVRPN_INCLUDE_DIR Non-cache variables you might use in your CMakeLists.txt:QVRPN_FOUND QVRPN_LIBRARIES QVRPN_INCLUDE_DIRS QVRPN_ROOT_DIR is searched preferentially for these files Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Refactored from FindVRPN.cmake by:Juan Sebastian Casallas&lt; casallas @iastate.edu &gt; FindVRPN.cmake Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:Program/VRAC Copyright Iowa State University 2009-2012. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindSonix12 try to find Sonix 1.2 library Requires VPR 2.0 and GMTL(thus FindVPR20.cmake and FindGMTL.cmake) Optionally uses Flagpoll and FindFlagpoll.cmake This library is a part of VR Juggler 2.2 - you probably want to use find_package(VRJuggler22) instead, for an easy interface to this and related scripts. See FindVRJuggler22.cmake for more information. SONIX12_LIBRARY_DIR, library search path SONIX12_INCLUDE_DIR, include search path SONIX12_LIBRARY, the library to link against SONIX12_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:SONIX12_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. The VJ_BASE_DIR environment variable is also searched(preferentially) when searching for this component, so most sane build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindSonix14 try to find Sonix 1.4 library Requires VPR 2.2 and GMTL(thus FindVPR22.cmake and FindGMTL.cmake) Optionally uses Flagpoll and FindFlagpoll.cmake This library is a part of VR Juggler 3.0 - you probably want to use find_package(VRJuggler30) instead, for an easy interface to this and related scripts. See FindVRJuggler30.cmake for more information. SONIX14_LIBRARY_DIR, library search path SONIX14_INCLUDE_DIR, include search path SONIX14_LIBRARY, the library to link against SONIX14_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:SONIX14_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. The VJ_BASE_DIR environment variable is also searched(preferentially) when searching for this component, so most sane build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Updated for VR Juggler 3.0 by:Brandon Newendorp&lt; brandon @newendorp.com &gt; FindTR1 Try to find C++TR1 headers and libraries Once done, this will define TR1_USE_FILE, which you may &quot;include&quot; in your CMake file to be able to use TR1 features transparently TR1_INCLUDE_DIRS, any directories needed to access TR1 headers TR1_LIBRARY_DIRS, any directories needed to access(auto-link) TR1 libraries TR1_FOUND, If false, do not try to use TR1 features. If TR1 features are not built-in, we will try to use Boost to substitute for them. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindTooN try to find TooN headers Users may optionally supply:TOON_ROOT_DIR - a prefix to start searching for the toon headers. Cache Variables:(probably not for direct use in your scripts) TOON_INCLUDE_DIR Non-cache variables you might use in your CMakeLists.txt:TOON_FOUND TOON_INCLUDE_DIRS TOON_LIBRARIES Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindTooNtag try to find tag algorithm library(built on TooN) Users may optionally supply:TAG_ROOT_DIR - a prefix to start searching for the toon headers. Cache Variables:(probably not for direct use in your scripts) TAG_INCLUDE_DIR TAG_LIBRARY Non-cache variables you might use in your CMakeLists.txt:TOONTAG_FOUND TOONTAG_INCLUDE_DIRS TOONTAG_LIBRARIES Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindTweek12 try to find Tweek 1.2 library Requires VPR 2.0(thus FindVPR20.cmake) Optionally uses Flagpoll and FindFlagpoll.cmake This library is a part of VR Juggler 2.2 - you probably want to use find_package(VRJuggler22) instead, for an easy interface to this and related scripts. See FindVRJuggler22.cmake for more information. TWEEK12_LIBRARY_DIR, library search path TWEEK12_INCLUDE_DIR, include search path TWEEK12_LIBRARY, the library to link against TWEEK12_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:TWEEK12_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. The VJ_BASE_DIR environment variable is also searched(preferentially) when searching for this component, so most sane build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindTweek14 try to find Tweek 1.4 library Requires VPR 2.2(thus FindVPR22.cmake) Optionally uses Flagpoll and FindFlagpoll.cmake This library is a part of VR Juggler 3.0 - you probably want to use find_package(VRJuggler30) instead, for an easy interface to this and related scripts. See FindVRJuggler30.cmake for more information. TWEEK14_LIBRARY_DIR, library search path TWEEK14_INCLUDE_DIR, include search path TWEEK14_LIBRARY, the library to link against TWEEK14_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:TWEEK14_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. The VJ_BASE_DIR environment variable is also searched(preferentially) when searching for this component, so most sane build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Updated for VR Juggler 3.0 by:Brandon Newendorp&lt; brandon @newendorp.com &gt; FindVPR20 try to find VPR 2.0 library Requires Boost 1.33.1 or greater(including filesystem and signals libraries)(and thus FindBoost.cmake from 2.8rc3 or newer, preferably) Requires NSPR4(and PLC4) on Windows Requires pthreads on Unix(Mac or Linux) Requires libuuid on Linux Optionally uses Flagpoll and FindFlagpoll.cmake This library is a part of VR Juggler 2.2 - you probably want to use find_package(VRJuggler22) instead, for an easy interface to this and related scripts. See FindVRJuggler22.cmake for more information. VPR20_LIBRARY_DIR, library search path VPR20_INCLUDE_DIR, include search path VPR20_LIBRARY, the library to link against VPR20_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:VPR20_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. The VJ_BASE_DIR environment variable is also searched(preferentially) when searching for this component, so most sane build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindVPR22 try to find VPR 2.2 library Requires Boost 1.33.1 or greater(including filesystem and signals libraries)(and thus FindBoost.cmake from 2.8rc3 or newer, preferably) Requires NSPR4(and PLC4) on Windows Requires pthreads on Unix(Mac or Linux) Requires libuuid on Linux Optionally uses Flagpoll and FindFlagpoll.cmake This library is a part of VR Juggler 3.0 - you probably want to use find_package(VRJuggler30) instead, for an easy interface to this and related scripts. See FindVRJuggler30.cmake for more information. VPR22_LIBRARY_DIR, library search path VPR22_INCLUDE_DIR, include search path VPR22_LIBRARY, the library to link against VPR22_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:VPR22_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. The VJ_BASE_DIR environment variable is also searched(preferentially) when searching for this component, so most sane build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Updated for VR Juggler 3.0 by:Brandon Newendorp&lt; brandon @newendorp.com &gt; FindVPS try to find VPS library VPS_LIBRARY_DIR, library search path VPS_INCLUDE_DIR, include search path VPS_{component}_LIBRARY, the library to link against VPS_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:VPS_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindVRJ22 try to find VR Juggler 2.2 core library Requires JCCL 1.2, Gadgeteer 1.2, VPR 2.0, and Sonix 1.2(thus FindJCCL12.cmake, FindGadgeteer12.cmake, FindVPR20.cmake, and FindSonix12.cmake) Requires X11 if not on Mac or Windows. Optionally uses Flagpoll and FindFlagpoll.cmake This library is a part of VR Juggler 2.2 - you probably want to use find_package(VRJuggler22) instead, for an easy interface to this and related scripts. See FindVRJuggler22.cmake for more information. VRJ22_LIBRARY_DIR, library search path VRJ22_INCLUDE_DIR, include search path VRJ22_LIBRARY, the library to link against VRJ22_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:VRJ22_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. The VJ_BASE_DIR environment variable is also searched(preferentially) when searching for this component, so most sane build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindVRJ30 try to find VR Juggler 3.0 core library Requires JCCL 1.4, Gadgeteer 1.4, VPR 2.2, and Sonix 1.4(thus FindJCCL14.cmake, FindGadgeteer20.cmake, FindVPR22.cmake, and FindSonix14.cmake) Requires X11 if not on Mac or Windows. Optionally uses Flagpoll and FindFlagpoll.cmake This library is a part of VR Juggler 3.0 - you probably want to use find_package(VRJuggler30) instead, for an easy interface to this and related scripts. See FindVRJuggler30.cmake for more information. VRJ30_LIBRARY_DIR, library search path VRJ30_INCLUDE_DIR, include search path VRJ30_LIBRARY, the library to link against VRJ30_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:VRJ30_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. The VJ_BASE_DIR environment variable is also searched(preferentially) when searching for this component, so most sane build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Updated for VR Juggler 3.0 by:Brandon Newendorp&lt; brandon @newendorp.com &gt; Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindVRJOGL22 try to find VRJuggler 2.2 OpenGL library Requires VRJ core 2.2(thus FindVRJ22.cmake) Requires OpenGL. Optionally uses Flagpoll and FindFlagpoll.cmake This library is a part of VR Juggler 2.2 - you probably want to use find_package(VRJuggler22) instead, for an easy interface to this and related scripts. See FindVRJuggler22.cmake for more information. VRJOGL22_LIBRARY_DIR, library search path VRJOGL22_INCLUDE_DIRS, include search path for dependencies VRJOGL22_LIBRARY, the library to link against VRJOGL22_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:VRJOGL22_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. The VJ_BASE_DIR environment variable is also searched(preferentially) when searching for this component, so most sane build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindVRJOGL30 try to find VRJuggler 3.0 OpenGL library Requires VRJ core 3.0(thus FindVRJ30.cmake) Requires OpenGL. Optionally uses Flagpoll and FindFlagpoll.cmake This library is a part of VR Juggler 3.0 - you probably want to use find_package(VRJuggler30) instead, for an easy interface to this and related scripts. See FindVRJuggler30.cmake for more information. VRJOGL30_LIBRARY_DIR, library search path VRJOGL30_INCLUDE_DIRS, include search path for dependencies VRJOGL30_LIBRARY, the library to link against VRJOGL30_FOUND, If false, do not try to use this library. Plural versions refer to this library and its dependencies, and are recommended to be used instead, unless you have a good reason. Useful configuration variables you might want to add to your cache:VRJOGL30_ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) This script will use Flagpoll, if found, to provide hints to the location of this library, but does not use the compiler flags returned by Flagpoll directly. The VJ_BASE_DIR environment variable is also searched(preferentially) when searching for this component, so most sane build environments should &quot;just work.&quot; Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Updated for VR Juggler 3.0 by:Brandon Newendorp&lt; brandon @newendorp.com &gt; FindVRJuggler try to find VR Juggler-related packages(combined finder) VRJUGGLER_INCLUDE_DIRS, include search paths VRJUGGLER_LIBRARIES, the libraries to link against VRJUGGLER_ENVIRONMENT VRJUGGLER_RUNTIME_LIBRARY_DIRS VRJUGGLER_CXX_FLAGS VRJUGGLER_DEFINITIONS VRJUGGLER_FOUND, If false, do not try to use VR Juggler. Components available to search for(uses &quot;VRJOGL&quot; by default):VRJOGL VRJ Gadgeteer JCCL VPR Sonix Tweek Additionally, a full setup requires these packages and their Find_.cmake scripts CPPDOM GMTL Optionally uses Flagpoll(and FindFlagpoll.cmake) Notes on components:- All components automatically include their dependencies. - If you do not specify a component, VRJOGL(the OpenGL view manager) will be used by default. - Capitalization of component names does not matter, but it &apos;s best to pretend it does and use the above capitalization. - Since this script calls find_package for your requested components and their dependencies, you can use any of the variables specified in those files in addition to the &quot;summary&quot; ones listed here, for more finely controlled building and linking. This CMake script requires all of the Find *.cmake scripts for the components listed above, as it is only a &quot;meta-script&quot; designed to make using those scripts more developer-friendly. Useful configuration variables you might want to add to your cache:(CAPS COMPONENT NAME) _ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) The VJ_BASE_DIR environment variable is also searched(preferentially) when seeking any of the above components, as well as Flagpoll, CPPDOM, and Boost(from within VPR), so most sane build environments should &quot;just work.&quot; IMPORTANT:Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Updated for VR Juggler 3.0 by:Brandon Newendorp&lt; brandon @newendorp.com &gt; Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindVRJuggler22 try to find VRJuggler 2.2-related packages(main finder) VRJUGGLER22_LIBRARY_DIRS, library search paths VRJUGGLER22_INCLUDE_DIRS, include search paths VRJUGGLER22_LIBRARIES, the libraries to link against VRJUGGLER22_ENVIRONMENT VRJUGGLER22_RUNTIME_LIBRARY_DIRS VRJUGGLER22_CXX_FLAGS VRJUGGLER22_DEFINITIONS VRJUGGLER22_FOUND, If false, do not try to use VR Juggler 2.2. Components available to search for(uses &quot;VRJOGL22&quot; by default):VRJOGL22 VRJ22 Gadgeteer12 JCCL12 VPR20 Sonix12 Tweek12 Additionally, a full setup requires these packages and their Find_.cmake scripts CPPDOM GMTL Optionally uses Flagpoll(and FindFlagpoll.cmake) Notes on components:- All components automatically include their dependencies. - You can search for the name above with or without the version suffix. - If you do not specify a component, VRJOGL22(the OpenGL view manager) will be used by default. - Capitalization of component names does not matter, but it &apos;s best to pretend it does and use the above capitalization. - Since this script calls find_package for your requested components and their dependencies, you can use any of the variables specified in those files in addition to the &quot;summary&quot; ones listed here, for more finely controlled building and linking. This CMake script requires all of the Find *.cmake scripts for the components listed above, as it is only a &quot;meta-script&quot; designed to make using those scripts more developer-friendly. Useful configuration variables you might want to add to your cache:(CAPS COMPONENT NAME) _ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) The VJ_BASE_DIR environment variable is also searched(preferentially) when seeking any of the above components, as well as Flagpoll, CPPDOM, and Boost(from within VPR20), so most sane build environments should &quot;just work.&quot; IMPORTANT:Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindVRJuggler30 try to find VRJuggler 3.0-related packages(main finder) VRJUGGLER30_LIBRARY_DIRS, library search paths VRJUGGLER30_INCLUDE_DIRS, include search paths VRJUGGLER30_LIBRARIES, the libraries to link against VRJUGGLER30_ENVIRONMENT VRJUGGLER30_RUNTIME_LIBRARY_DIRS VRJUGGLER30_CXX_FLAGS VRJUGGLER30_DEFINITIONS VRJUGGLER30_FOUND, If false, do not try to use VR Juggler 3.0. Components available to search for(uses &quot;VRJOGL30&quot; by default):VRJOGL30 VRJ30 Gadgeteer20 JCCL14 VPR22 Sonix14 Tweek14 Additionally, a full setup requires these packages and their Find_.cmake scripts CPPDOM GMTL Optionally uses Flagpoll(and FindFlagpoll.cmake) Notes on components:- All components automatically include their dependencies. - You can search for the name above with or without the version suffix. - If you do not specify a component, VRJOGL30(the OpenGL view manager) will be used by default. - Capitalization of component names does not matter, but it &apos;s best to pretend it does and use the above capitalization. - Since this script calls find_package for your requested components and their dependencies, you can use any of the variables specified in those files in addition to the &quot;summary&quot; ones listed here, for more finely controlled building and linking. This CMake script requires all of the Find *.cmake scripts for the components listed above, as it is only a &quot;meta-script&quot; designed to make using those scripts more developer-friendly. Useful configuration variables you might want to add to your cache:(CAPS COMPONENT NAME) _ROOT_DIR - A directory prefix to search(a path that contains include/as a subdirectory) The VJ_BASE_DIR environment variable is also searched(preferentially) when seeking any of the above components, as well as Flagpoll, CPPDOM, and Boost(from within VPR22), so most sane build environments should &quot;just work.&quot; IMPORTANT:Note that you need to manually re-run CMake if you change this environment variable, because it cannot auto-detect this change and trigger an automatic re-run. Original Author:2009-2011 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Updated for VR Juggler 3.0 by:Brandon Newendorp&lt; brandon @newendorp.com &gt; and Ryan Pavlik Copyright Iowa State University 2009-2011. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindVRPN try to find VRPN library Cache Variables:VRPN_LIBRARY VRPN_SERVER_LIBRARY VRPN_INCLUDE_DIR Non-cache variables you might use in your CMakeLists.txt:VRPN_FOUND VRPN_SERVER_LIBRARIES - server libraries VRPN_LIBRARIES - client libraries VRPN_CLIENT_DEFINITIONS - definitions if you only use the client library VRPN_DEFINITIONS - Client-only definition if all we found was the client library. VRPN_INCLUDE_DIRS VRPN_ROOT_DIR is searched preferentially for these files Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2012 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2012. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindViewPoint try to find Arrington Research ViewPoint EyeTracker SDK Cache Variables:(probably not for direct use in your scripts) VIEWPOINT_INCLUDE_DIR VIEWPOINT_LIBRARY VIEWPOINT_RUNTIME_LIBRARY Non-cache variables you might use in your CMakeLists.txt:VIEWPOINT_FOUND VIEWPOINT_INCLUDE_DIRS VIEWPOINT_LIBRARIES VIEWPOINT_RUNTIME_LIBRARIES - aka the dll for installing VIEWPOINT_RUNTIME_LIBRARY_DIRS Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2012 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2012. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindVirtuoseAPI try to find Haption VirtuoseAPI library and include files VIRTUOSEAPI_INCLUDE_DIRS, where to find headers VIRTUOSEAPI_LIBRARIES, the libraries to link against VIRTUOSEAPI_FOUND, If false, do not try to use this library VIRTUOSEAPI_RUNTIME_LIBRARY_DIRS, path to DLL/SO for runtime use. VIRTUOSEAPI_RUNTIME_LIBRARIES, runtime libraries you might want to install FindVirtuoseVPP try to find Haption VirtuoseAPI C++wrapper include files Use of this header depends on the VirtuoseAPI, so we search for that too. VIRTUOSEVPP_INCLUDE_DIRS, where to find headers VIRTUOSEVPP_LIBRARIES, the libraries to link against VIRTUOSEVPP_FOUND, If false, do not try to use this library VIRTUOSEVPP_RUNTIME_LIBRARY_DIRS, path to DLL/SO for runtime use. VIRTUOSEAPI_RUNTIME_LIBRARIES, runtime libraries you might want to install FindWiiSCAAT try to find the Wii SCAAT library Users may optionally supply:WIISCAAT_ROOT_DIR - a prefix to start searching for the headers. Cache Variables:(probably not for direct use in your scripts) WIISCAAT_INCLUDE_DIR WIISCAAT_LIBRARY Non-cache variables you might use in your CMakeLists.txt:WIISCAAT_FOUND WIISCAAT_INCLUDE_DIRS WIISCAAT_LIBRARIES Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindWiiUse try to find WiiUse library Cache Variables:(probably not for direct use in your scripts) WIIUSE_INCLUDE_DIR WIIUSE_LIBRARY Non-cache variables you might use in your CMakeLists.txt:WIIUSE_FOUND WIIUSE_INCLUDE_DIRS WIIUSE_LIBRARIES WIIUSE_RUNTIME_LIBRARIES - aka the dll for installing WIIUSE_RUNTIME_LIBRARY_DIRS Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindWinHID try to find Windows HID support, part of the WDK/DDK Cache Variables:(probably not for direct use in your scripts) WINHID_INCLUDE_DIR WINHID_CRT_INCLUDE_DIR WINHID_LIBRARY Non-cache variables you might use in your CMakeLists.txt:WINHID_FOUND WINHID_INCLUDE_DIRS WINHID_LIBRARIES Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) PrefixListGlob CleanDirectoryList Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindWindowsSDK Find the Windows SDK aka Platform SDK Variables:WINDOWSSDK_FOUND - if any version of the windows or platform SDK was found that is usable with the current version of visual studio WINDOWSSDK_LATEST_DIR WINDOWSSDK_LATEST_NAME WINDOWSSDK_FOUND_PREFERENCE - if we found an entry indicating a &quot;preferred&quot; SDK listed for this visual studio version WINDOWSSDK_PREFERRED_DIR WINDOWSSDK_PREFERRED_NAME WINDOWSSDK_DIRS - contains no duplicates, ordered most recent first. WINDOWSSDK_PREFERRED_FIRST_DIRS - contains no duplicates, ordered with preferred first, followed by the rest in descending recency Functions:windowssdk_name_lookup(&lt; directory &gt;&lt; output variable &gt;) - Find the name corresponding with the SDK directory you pass in, or NOTFOUND if not recognized. Your directory must be one of WINDOWSSDK_DIRS for this to work. Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2012 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2012. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:Findargp try to find the argp library/component of glibc Users may optionally supply:ARGP_ROOT_DIR - a prefix to start searching. Cache Variables:(probably not for direct use in your scripts) ARGP_INCLUDE_DIR ARGP_LIBRARY, only defined if linking to an extra library is required Non-cache variables you might use in your CMakeLists.txt:ARGP_FOUND ARGP_INCLUDE_DIRS ARGP_LIBRARIES Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:Findcppcheck try to find cppcheck tool Cache Variables:CPPCHECK_EXECUTABLE Non-cache variables you might use in your CMakeLists.txt:CPPCHECK_FOUND CPPCHECK_POSSIBLEERROR_ARG CPPCHECK_UNUSEDFUNC_ARG CPPCHECK_STYLE_ARG CPPCHECK_QUIET_ARG CPPCHECK_INCLUDEPATH_ARG CPPCHECK_FAIL_REGULAR_EXPRESSION CPPCHECK_WARN_REGULAR_EXPRESSION CPPCHECK_MARK_AS_ADVANCED - whether to mark our vars as advanced even if we don &apos;t find this program. Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:Findcppunit try to find cppunit library Cache Variables:(probably not for direct use in your scripts) CPPUNIT_INCLUDE_DIR CPPUNIT_LIBRARY Non-cache variables you might use in your CMakeLists.txt:CPPUNIT_FOUND CPPUNIT_INCLUDE_DIRS CPPUNIT_LIBRARIES Requires these CMake modules:SelectLibraryConfigurations(included with CMake &gt;=2.8.0) FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2011 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2011. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:Findcutil find NVIDIA CUDA and source for the cutil library, building cutil if needed. CUTIL_LIBRARIES - Libraries to link against to use CUTIL CUTIL_INCLUDE_DIRS - Include directories to add before building a CUTIL app. Functions:install_cutil({RUNTIME_LIBRARY_DESTINATION}) - Install the CUTIL shared lib if created. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:Finddb2pdf Try to find db2pdf, and define a custom command to turn docbook into pdf Once done, this will define:DB2PDF_FOUND - system has LyX DB2PDF_COMMAND - the command to run and the following function:docbook_to_pdf(&lt; output-variable &gt;&lt; docbook files &gt;) Useful configuration variables you might want to add to your cache:DB2PDF_ROOT_DIR - A directory prefix to search Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:FindosgLua try to find osgLua Users may optionally supply:OSGLUA_ROOT_DIR - a prefix to start searching Non-cache variables you might use in your CMakeLists.txt:OSGLUA_FOUND OSGLUA_INCLUDE_DIRS OSGLUA_LIBRARIES Requires these CMake modules:FindPackageHandleStandardArgs(known included with CMake &gt;=2.6.2) Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:Findquatlib Find quatlib Find the quatlib headers and libraries. QUATLIB_INCLUDE_DIRS - where to find quat.h QUATLIB_LIBRARIES - List of libraries when using quatlib. QUATLIB_FOUND - True if quatlib found. Original Author:2009-2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:GetCPUDetails Set a number of variables to indicate things about the current CPU and OS CPU_COUNT CPU_INTEL CPU_EXE_64BIT CPU_EXE_32BIT CPU_HAS_SSE CPU_HAS_SSE2 CPU_HAS_SSE3 CPU_HAS_SSSE3 CPU_HAS_SSE4_1 CPU_HAS_SSE4_2 Requires these CMake modules:no additional modules required Original Author:2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:GetCompilerInfoString Utility function to return a human-useful-only string ID &apos;ing the compiler get_compiler_info_string(&lt; resultvar &gt;) and some helper functions:get_gcc_version(&lt; resultvar &gt;) get_vs_short_version_string(&lt; generator &gt;&lt; resultvar &gt;) You might consider using it when setting up CTest options, for example:include(GetCompilerInfoString) get_compiler_info_string(COMPILERID) set(CTEST_BUILD_NAME &quot;${CMAKE_SYSTEM}-${CMAKE_SYSTEM_PROCESSOR}-${COMPILERID}&quot;) Requires these CMake modules:no additional modules required Original Author:2010 Ryan Pavlik&lt; rpavlik @iastate.edu &gt;&lt; abiryan @ryand.net &gt; http:University HCI Graduate Program/VRAC Copyright Iowa State University 2009-2010. Distributed under the Boost Software License, Version 1.0.(See accompanying file LICENSE_1_0.txt or copy at http:Some functions based on cmake-2.8.0 modules FindBoost.cmake and CTest.cmake=============================================================================Copyright 2006-2009 Kitware, Inc. Copyright 2006-2008 Andreas Schneider&lt; mail @cynapses.org &gt; Copyright 2007 Wengo Copyright 2007 Mike Jackson Copyright 2008 Andreas Pakulat&lt; apaku @gmx.de &gt; Copyright 2008-2009 Philip Lowman&lt; philip @yhbt.com &gt; Copyright 2010 Iowa State University(Ryan Pavlik&lt; abiryan @ryand.net &gt;) Distributed under the OSI-approved BSD License(the &quot;License&quot;)</type>
      <name>DMACOSX_HID_UINT32T</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>aa559445340816655cfa5e6e10131c0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of the Insight Software nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY OR CONSEQUENTIAL</type>
      <name>DAMAGES</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>aab19b74e8414d0f7c6f28066bc6ecb35</anchor>
      <arglist>(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA, OR PROFITS;OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY</arglist>
    </member>
    <member kind="function">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of the Insight Software nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY OR CONSEQUENTIAL WHETHER IN STRICT OR</type>
      <name>TORT</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a5775a6663a8881889433971924be9273</anchor>
      <arglist>(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE</arglist>
    </member>
    <member kind="variable">
      <type>see accompanying file Copyright txt for details This software is distributed WITHOUT ANY</type>
      <name>WARRANTY</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a974bf456569e2b963c32b623b74ef357</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more</type>
      <name>information</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>abc45984ef8e96c2fe74115abc1efe57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more</type>
      <name>Inc</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a98fa62af185d5f70e651871dcd5ef937</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary</type>
      <name>forms</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a990e6ba93e35012b359098679d6283de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without</type>
      <name>modification</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>ab58b7687960475d96c9694ebe9d7b698</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are</type>
      <name>met</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a88b6cfbbce71341b7f1700d6e4e52172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright</type>
      <name>notice</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a230d78f866a1c126936cd3994285e273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of</type>
      <name>Kitware</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a42822b27adad6bfdf650ca0b1eb90eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of the Insight Software</type>
      <name>Consortium</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a451ad0d6b422106f4ae33b02d6224ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of the Insight Software nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED</type>
      <name>WARRANTIES</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a6117fb26c502c0ebe1226a94bc5aa0ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of the Insight Software nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED</type>
      <name>INCLUDING</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a177334d08464ab6f8ecaa6a706be6cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of the Insight Software nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED BUT NOT LIMITED</type>
      <name>TO</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>ac33452180f7b202f1ee07f835074d743</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of the Insight Software nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY</type>
      <name>DIRECT</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a154e937d281e5208f3d9123a276acae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of the Insight Software nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY</type>
      <name>INDIRECT</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>adb8b818f596fa97c2373b4e212c351b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of the Insight Software nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY</type>
      <name>INCIDENTAL</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a61ffa641739b850184ae12d5f8c1c823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of the Insight Software nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY</type>
      <name>SPECIAL</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>aa1bf3e64ee742bd9ca8e59fcceeb6dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of the Insight Software nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY</type>
      <name>EXEMPLARY</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a23ade4d2c8cf71ab500ff8c21521a6f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of the Insight Software nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY OR CONSEQUENTIAL WHETHER IN</type>
      <name>CONTRACT</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a37086093a88b825b10988c6f7a15c332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of the Insight Software nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY OR CONSEQUENTIAL WHETHER IN STRICT</type>
      <name>LIABILITY</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a0a7e9de9e6543bf2d1b3f932b9563834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the License for more Insight Software Consortium All rights reserved Redistribution and use in source and binary with or without are permitted provided that the following conditions are this list of conditions and the following disclaimer *Redistributions in binary form must reproduce the above copyright this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution *Neither the names of the Insight Software nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY OR CONSEQUENTIAL WHETHER IN STRICT OR EVEN IF ADVISED OF THE POSSIBILITY OF SUCH</type>
      <name>DAMAGE</name>
      <anchorfile>module-help_8txt.html</anchorfile>
      <anchor>a4849084bbd135a33b1636917b2635ec8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>README.markdown</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/</path>
    <filename>README_8markdown.html</filename>
  </compound>
  <compound kind="file">
    <name>alut.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/workarounds/mac-alut-framework/AL/</path>
    <filename>alut_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>gl.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/workarounds/mac-gl/GL/</path>
    <filename>gl_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>glui.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/workarounds/mac-gl/GL/</path>
    <filename>glui_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>glut.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/workarounds/mac-gl/GL/</path>
    <filename>glut_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>al.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/workarounds/mac-openal/AL/</path>
    <filename>al_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>alc.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/workarounds/mac-openal/AL/</path>
    <filename>alc_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>tchar.h</name>
    <path>/home/runner/work/scroom/scroom/cmake-modules/workarounds/tchar/</path>
    <filename>tchar_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>_tmain</name>
      <anchorfile>tchar_8h.html</anchorfile>
      <anchor>ab9e9e7992d1bc34d1cd340ff7161898a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>conf.py</name>
    <path>/home/runner/work/scroom/scroom/doc/</path>
    <filename>conf_8py.html</filename>
    <namespace>conf</namespace>
    <member kind="variable">
      <type>string</type>
      <name>project</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>a45653c983098153b78e33600e39230eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>copyright</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>a33fa97cf51dcb25970fbf53f10159589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>author</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>a637c239d256432248aa8d9f3ab0b8c52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>extensions</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>ae475e080536acb271a0a0efe56c3ba42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>templates_path</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>ae850ae634911b713e036b43894fdd525</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>exclude_patterns</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>a7ad48fb6f3e9b129c02346ea0d3527c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>html_theme</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>a6c3bfcc1a44546c1c75ce20f55bd0fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>html_static_path</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>af4fb5d8851ccaade135c2668dd3ced41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dictionary</type>
      <name>html_theme_options</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>aeaafa42217d24810edc9b116b88a4585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dictionary</type>
      <name>doxylink</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>ac4ba62f5ac3d629ef12907f914aa2aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>html_favicon</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>ac2a0566788a90720ba8d852f67eeda76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ruler.hh</name>
    <path>/home/runner/work/scroom/scroom/gui/ruler/inc/</path>
    <filename>ruler_8hh.html</filename>
    <includes id="rulerstrategies_8hh" name="rulerstrategies.hh" local="yes" imported="no">rulerstrategies.hh</includes>
    <class kind="class">Ruler</class>
    <class kind="class">RulerCalculations</class>
  </compound>
  <compound kind="file">
    <name>rulerstrategies.hh</name>
    <path>/home/runner/work/scroom/scroom/gui/ruler/inc/</path>
    <filename>rulerstrategies_8hh.html</filename>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <class kind="class">RulerDrawStrategy</class>
    <class kind="class">HorizontalDrawStrategy</class>
    <class kind="class">VerticalDrawStrategy</class>
  </compound>
  <compound kind="file">
    <name>ruler.cc</name>
    <path>/home/runner/work/scroom/scroom/gui/ruler/src/</path>
    <filename>ruler_8cc.html</filename>
    <includes id="ruler_8hh" name="ruler.hh" local="yes" imported="no">ruler.hh</includes>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
  </compound>
  <compound kind="file">
    <name>rulerstrategies.cc</name>
    <path>/home/runner/work/scroom/scroom/gui/ruler/src/</path>
    <filename>rulerstrategies_8cc.html</filename>
    <includes id="rulerstrategies_8hh" name="rulerstrategies.hh" local="yes" imported="no">rulerstrategies.hh</includes>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/gui/ruler/test/</path>
    <filename>gui_2ruler_2test_2main_8cc.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_TEST_MODULE</name>
      <anchorfile>gui_2ruler_2test_2main_8cc.html</anchorfile>
      <anchor>a6b2a3852db8bb19ab6909bac01859985</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_TEST_DYN_LINK</name>
      <anchorfile>gui_2ruler_2test_2main_8cc.html</anchorfile>
      <anchor>a139f00d2466d591f60b8d6a73c8273f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/gui/src/</path>
    <filename>gui_2src_2main_8cc.html</filename>
    <includes id="callbacks_8hh" name="callbacks.hh" local="yes" imported="no">callbacks.hh</includes>
    <member kind="function">
      <type>void</type>
      <name>usage</name>
      <anchorfile>gui_2src_2main_8cc.html</anchorfile>
      <anchor>a5d5deb0dceee1db056c8400fa052e13a</anchor>
      <arglist>(const std::string &amp;me, const po::options_description &amp;desc, const std::string &amp;message=std::string())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>gui_2src_2main_8cc.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/boost-test-helper/test/</path>
    <filename>libs_2boost-test-helper_2test_2main_8cc.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_TEST_MODULE</name>
      <anchorfile>libs_2boost-test-helper_2test_2main_8cc.html</anchorfile>
      <anchor>a6b2a3852db8bb19ab6909bac01859985</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/memory-manager/test/</path>
    <filename>libs_2memory-manager_2test_2main_8cc.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_TEST_MODULE</name>
      <anchorfile>libs_2memory-manager_2test_2main_8cc.html</anchorfile>
      <anchor>a6b2a3852db8bb19ab6909bac01859985</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/scroom/test/</path>
    <filename>libs_2scroom_2test_2main_8cc.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_TEST_MODULE</name>
      <anchorfile>libs_2scroom_2test_2main_8cc.html</anchorfile>
      <anchor>a6b2a3852db8bb19ab6909bac01859985</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/test/</path>
    <filename>libs_2threadpool_2test_2main_8cc.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_TEST_MODULE</name>
      <anchorfile>libs_2threadpool_2test_2main_8cc.html</anchorfile>
      <anchor>a6b2a3852db8bb19ab6909bac01859985</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/test/</path>
    <filename>libs_2tiled-bitmap_2test_2main_8cc.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_TEST_MODULE</name>
      <anchorfile>libs_2tiled-bitmap_2test_2main_8cc.html</anchorfile>
      <anchor>a6b2a3852db8bb19ab6909bac01859985</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/test/</path>
    <filename>libs_2util_2test_2main_8cc.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_TEST_MODULE</name>
      <anchorfile>libs_2util_2test_2main_8cc.html</anchorfile>
      <anchor>a6b2a3852db8bb19ab6909bac01859985</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/colormap/</path>
    <filename>plugins_2colormap_2main_8cc.html</filename>
    <includes id="scroomplugin_8hh" name="scroomplugin.hh" local="no" imported="no">scroom/scroomplugin.hh</includes>
    <includes id="colormapplugin_8hh" name="colormapplugin.hh" local="yes" imported="no">colormapplugin.hh</includes>
    <member kind="function">
      <type>PluginInformationInterface::Ptr</type>
      <name>getPluginInformation</name>
      <anchorfile>plugins_2colormap_2main_8cc.html</anchorfile>
      <anchor>ac8a61b9775cfad9cf6ac99cb2806accf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/example/</path>
    <filename>plugins_2example_2main_8cc.html</filename>
    <includes id="scroomplugin_8hh" name="scroomplugin.hh" local="no" imported="no">scroom/scroomplugin.hh</includes>
    <includes id="example_8hh" name="example.hh" local="yes" imported="no">example.hh</includes>
    <member kind="function">
      <type>PluginInformationInterface::Ptr</type>
      <name>getPluginInformation</name>
      <anchorfile>plugins_2example_2main_8cc.html</anchorfile>
      <anchor>ac8a61b9775cfad9cf6ac99cb2806accf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/measure/src/</path>
    <filename>plugins_2measure_2src_2main_8cc.html</filename>
    <includes id="scroomplugin_8hh" name="scroomplugin.hh" local="no" imported="no">scroom/scroomplugin.hh</includes>
    <includes id="measure_8hh" name="measure.hh" local="yes" imported="no">measure.hh</includes>
    <member kind="function">
      <type>PluginInformationInterface::Ptr</type>
      <name>getPluginInformation</name>
      <anchorfile>plugins_2measure_2src_2main_8cc.html</anchorfile>
      <anchor>ac8a61b9775cfad9cf6ac99cb2806accf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/metadata/</path>
    <filename>plugins_2metadata_2main_8cc.html</filename>
    <includes id="scroomplugin_8hh" name="scroomplugin.hh" local="no" imported="no">scroom/scroomplugin.hh</includes>
    <includes id="metadata_8hh" name="metadata.hh" local="yes" imported="no">metadata.hh</includes>
    <member kind="function">
      <type>PluginInformationInterface::Ptr</type>
      <name>getPluginInformation</name>
      <anchorfile>plugins_2metadata_2main_8cc.html</anchorfile>
      <anchor>ac8a61b9775cfad9cf6ac99cb2806accf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/pipette/src/</path>
    <filename>plugins_2pipette_2src_2main_8cc.html</filename>
    <includes id="scroomplugin_8hh" name="scroomplugin.hh" local="no" imported="no">scroom/scroomplugin.hh</includes>
    <includes id="pipette_8hh" name="pipette.hh" local="yes" imported="no">pipette.hh</includes>
    <member kind="function">
      <type>PluginInformationInterface::Ptr</type>
      <name>getPluginInformation</name>
      <anchorfile>plugins_2pipette_2src_2main_8cc.html</anchorfile>
      <anchor>ac8a61b9775cfad9cf6ac99cb2806accf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/pipette/test/</path>
    <filename>plugins_2pipette_2test_2main_8cc.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_TEST_MODULE</name>
      <anchorfile>plugins_2pipette_2test_2main_8cc.html</anchorfile>
      <anchor>a6b2a3852db8bb19ab6909bac01859985</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_TEST_DYN_LINK</name>
      <anchorfile>plugins_2pipette_2test_2main_8cc.html</anchorfile>
      <anchor>a139f00d2466d591f60b8d6a73c8273f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/tiff/src/</path>
    <filename>plugins_2tiff_2src_2main_8cc.html</filename>
    <includes id="scroomplugin_8hh" name="scroomplugin.hh" local="no" imported="no">scroom/scroomplugin.hh</includes>
    <includes id="tiff_8hh" name="tiff.hh" local="yes" imported="no">tiff.hh</includes>
    <member kind="function">
      <type>PluginInformationInterface::Ptr</type>
      <name>getPluginInformation</name>
      <anchorfile>plugins_2tiff_2src_2main_8cc.html</anchorfile>
      <anchor>ac8a61b9775cfad9cf6ac99cb2806accf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/transparent-overlay/src/</path>
    <filename>plugins_2transparent-overlay_2src_2main_8cc.html</filename>
    <includes id="scroomplugin_8hh" name="scroomplugin.hh" local="no" imported="no">scroom/scroomplugin.hh</includes>
    <includes id="transparentoverlay_8hh" name="transparentoverlay.hh" local="yes" imported="no">transparentoverlay.hh</includes>
    <member kind="function">
      <type>PluginInformationInterface::Ptr</type>
      <name>getPluginInformation</name>
      <anchorfile>plugins_2transparent-overlay_2src_2main_8cc.html</anchorfile>
      <anchor>ac8a61b9775cfad9cf6ac99cb2806accf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/transparent-overlay/test/</path>
    <filename>plugins_2transparent-overlay_2test_2main_8cc.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_TEST_MODULE</name>
      <anchorfile>plugins_2transparent-overlay_2test_2main_8cc.html</anchorfile>
      <anchor>a6b2a3852db8bb19ab6909bac01859985</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ruler-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/gui/ruler/test/</path>
    <filename>ruler-tests_8cc.html</filename>
    <includes id="ruler_8hh" name="ruler.hh" local="yes" imported="no">ruler.hh</includes>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_TEST_DYN_LINK</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a139f00d2466d591f60b8d6a73c8273f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a2f22e580ea7fcd43837690339b3a55bb</anchor>
      <arglist>(Ruler_creation_horizontal_signal_handlers)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a7647ea36113e341a9c9ffd2b4c37a132</anchor>
      <arglist>(Ruler_creation_vertical_signal_handlers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testCorrectIntervalForMinWidth</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>aeb8a967e707e4f39646629225625fff6</anchor>
      <arglist>(double lowerLimit, double upperLimit, int expectedInterval)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>aa51a65a16be78cdc7845569deae24c71</anchor>
      <arglist>(Ruler_correct_interval_for_minimum_width_interval_1_range_0_to_10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>ab10320c1a85c30d8cf3f0d04440fbf6e</anchor>
      <arglist>(Ruler_correct_interval_for_minimum_width_interval_1_range_236_to_877)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a75c1cf838774d0d952bcd2938868f0de</anchor>
      <arglist>(Ruler_correct_interval_for_minimum_width_interval_1_range_158p2_to_687p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>ab53b74563d1d6497acd6ed75e3fc97dc</anchor>
      <arglist>(Ruler_correct_interval_for_minimum_width_interval_1_range_neg791_to_neg312)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a83ee1779305ad0977f909963f48afe9c</anchor>
      <arglist>(Ruler_correct_interval_for_minimum_width_interval_1_range_neg12p56_to27p82)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a472a51dea42280f908d29e7e994c6c93</anchor>
      <arglist>(Ruler_correct_interval_for_minimum_width_interval_1_range_negLARGE_to_LARGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a68499a47f2d3832cf30da1fcd05178fb</anchor>
      <arglist>(Ruler_correct_interval_for_minimum_width_interval_1_range_0_to_1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a9fdea553e5715ab6481e22aaaa0f6042</anchor>
      <arglist>(Ruler_correct_interval_for_minimum_width_interval_5_range_0_to_10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a28453ae12af3348f4af4fda3a1faebc2</anchor>
      <arglist>(Ruler_correct_interval_for_minimum_width_interval_5_range_236_to_877)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a345040722f0db903a6772a0c06cf1cb5</anchor>
      <arglist>(Ruler_correct_interval_for_minimum_width_interval_5_range_158p2_to_687p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a7c9b88227c852a99aae5e13265f630e6</anchor>
      <arglist>(Ruler_correct_interval_for_minimum_width_interval_5_range_neg791_to_neg312)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>aab185c4fdb457a41f60ad730519b19ea</anchor>
      <arglist>(Ruler_correct_interval_for_minimum_width_interval_5_range_neg12p56_to27p82)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a141de1ea1f1109411624d6331f16a3de</anchor>
      <arglist>(Ruler_correct_interval_for_minimum_width_interval_5_range_negLARGE_to_LARGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a33bae65f7b74d3ced3a592ad689d622d</anchor>
      <arglist>(Ruler_correct_interval_for_minimum_width_interval_5_range_0_to_1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a4d17374125363b488d91ce4fd9e2d95d</anchor>
      <arglist>(Ruler_scaleToRange_src_0_to_10_dest_0_100_x_5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a664a6dc1c8e1264252aaeaee5f1270b3</anchor>
      <arglist>(Ruler_scaleToRange_src_neg28_neg40_dest_0_100_x_neg28)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>aa0018ef36b0d22c1ca45e37b0f628b2d</anchor>
      <arglist>(Ruler_scaleToRange_src_LARGE_dest_LARGE_x_LARGE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>aa0ab2382cd916feb5d061cd6309098a2</anchor>
      <arglist>(Ruler_scaleToRange_src_SMALL_dest_SMALL_x_SMALL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>af2fa78948d44d60c23baf1d2eb942983</anchor>
      <arglist>(Ruler_intervalPixelSpacing_range_0_to_1000_interval_1_size_540px)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a71339df65110cd95d10059122d6f6648</anchor>
      <arglist>(Ruler_intervalPixelSpacing_range_0_to_1000_interval_1_size_1920px)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>aeb26cf898cdb1861a263a6645b036423</anchor>
      <arglist>(Ruler_intervalPixelSpacing_range_0_to_1000_interval_5_size_540px)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a384f0251714f7e6a3db9eed87d169ff7</anchor>
      <arglist>(Ruler_intervalPixelSpacing_range_0_to_1000_interval_5_size_1920px)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>ab4edb2314c52f0857fa5fcac586f65e4</anchor>
      <arglist>(Ruler_intervalPixelSpacing_range_0_to_1000_interval_25_size_540px)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a7ce0ffa6fcff4a018b123fc675592c51</anchor>
      <arglist>(Ruler_intervalPixelSpacing_range_0_to_1000_interval_25_size_1920px)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a248d663e44077f43197fd7f04904c701</anchor>
      <arglist>(Ruler_intervalPixelSpacing_range_0_to_1000_interval_50000000_size_540px)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>abdb4ba3705ca73bfc8b8cb07c0b4f64b</anchor>
      <arglist>(Ruler_intervalPixelSpacing_range_0_to_1000_interval_50000000_size_1920px)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a543881dd6319a15ee035029f69487b6f</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_0_interval_1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>ac24f73515c63fcc65be75a4482c16606</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_0_interval_25)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a4dae1faa183b9031b2f38cdc54291384</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_0_interval_50000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>aaa0c495bca00fb49a5babb2df609b52a</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_neg123_interval_1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a8c2a89ea7bf0e1e41d0ecf72f31e3d7e</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_neg123_interval_25)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a35a7eff7b84c1919c80ac8c2b007d69a</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_neg123_interval_50000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a9e85320a8dd05013a9e41e3d3400903c</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_360_interval_1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a1d134c3fb7947a86773091333beeeab9</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_360_interval_25)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a5b73030370003144d341900ef399a83d</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_360_interval_50000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a87b5ed3cb0f3e49795424a9515cb958f</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_0p1_interval_1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a1bc631ab3b0ccbfc3fee4f7dc33514f7</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_0p1_interval_25)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a71aca270a42cb3a6f1373ca5ff6ac903</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_0p1_interval_50000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a5dbb4c19c6db91543ccc0682db9ade77</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_neg0p1_interval_1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a43e6901a4638b1f7b98412238f481a2a</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_neg0p1_interval_25)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>ruler-tests_8cc.html</anchorfile>
      <anchor>a93077fc453002fd0c34bd9653eeb9656</anchor>
      <arglist>(Ruler_firstTick_lowerLimit_neg0p1_interval_50000)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>callbacks.cc</name>
    <path>/home/runner/work/scroom/scroom/gui/src/</path>
    <filename>callbacks_8cc.html</filename>
    <includes id="callbacks_8hh" name="callbacks.hh" local="yes" imported="no">callbacks.hh</includes>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
    <includes id="bookkeeping_8hh" name="bookkeeping.hh" local="no" imported="no">scroom/bookkeeping.hh</includes>
    <includes id="loader_8hh" name="loader.hh" local="yes" imported="no">loader.hh</includes>
    <includes id="pluginmanager_8hh" name="pluginmanager.hh" local="yes" imported="no">pluginmanager.hh</includes>
    <includes id="view_8hh" name="view.hh" local="yes" imported="no">view.hh</includes>
    <includes id="workinterface_8hh" name="workinterface.hh" local="yes" imported="no">workinterface.hh</includes>
    <member kind="typedef">
      <type>std::map&lt; View::Ptr, Scroom::Bookkeeping::Token &gt;</type>
      <name>Views</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>ad491f41b303bd5466c401bf06988119a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShowModalDialog</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a3aab2a4d00901924d72b5a72a3711069</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_scroom_hide</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a65f18cf64a4bafed7b32ded3cc902668</anchor>
      <arglist>(GtkWidget *, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_new_activate</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a497df55ad3cb60e1c286017cfe325a4e</anchor>
      <arglist>(GtkMenuItem *, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>gboolean</type>
      <name>combinedFileFilter</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a99df60712480e944e75989deb600d63e</anchor>
      <arglist>(const GtkFileFilterInfo *filter_info, gpointer data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_open_activate</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a6cd157f2cb298e0a89ab2916c618f9fe</anchor>
      <arglist>(GtkMenuItem *, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_save_activate</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>aab82a7ba96c83b19efa990d7a58f5a31</anchor>
      <arglist>(GtkMenuItem *, gpointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_save_as_activate</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a6c01055f5d69da5262008f6e64e91c98</anchor>
      <arglist>(GtkMenuItem *, gpointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_quit_activate</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a7980d0f43d68809786209209bde2fe19</anchor>
      <arglist>(GtkMenuItem *, gpointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_cut_activate</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a830e369cfa9541ad9b0ca797bbd25147</anchor>
      <arglist>(GtkMenuItem *, gpointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_copy_activate</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a366835f6fd24aa8f605461512cedb39d</anchor>
      <arglist>(GtkMenuItem *, gpointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_paste_activate</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>ac5d62d699806cfc588f216190f1fc2bb</anchor>
      <arglist>(GtkMenuItem *, gpointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_delete_activate</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a41f74b3bec2be1f10ee83f6f27e8ce1b</anchor>
      <arglist>(GtkMenuItem *, gpointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_fullscreen_activate</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a42fddb88db6e7c73e37aa07d1cf0de57</anchor>
      <arglist>(GtkMenuItem *item, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_close_activate</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>ab6e722c4fcdd409e30c2d81343ed771e</anchor>
      <arglist>(GtkMenuItem *, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_about_activate</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>aa368b65b001e2f9e44a1e69b3098881a</anchor>
      <arglist>(GtkMenuItem *, gpointer)</arglist>
    </member>
    <member kind="function">
      <type>gboolean</type>
      <name>on_drawingarea_expose_event</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>ae774492ed1bbe65c2041bf593ef6bb8f</anchor>
      <arglist>(GtkWidget *widget, GdkEventExpose *, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>gboolean</type>
      <name>on_drawingarea_configure_event</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a9c37395ebdd4c59a37b6dc38d574a4d7</anchor>
      <arglist>(GtkWidget *, GdkEventConfigure *, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>gboolean</type>
      <name>on_idle</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a165cb06d629eff2b6c6e025342d229a5</anchor>
      <arglist>(gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_done_loading_plugins</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>afd41e159402c4fc0b8c3341a372d7ce9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_zoombox_changed</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>adfed951a3aff6a5b114ac21d07119be1</anchor>
      <arglist>(GtkComboBox *, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_textbox_value_changed</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>aef7e97ad6ad51b450eb4c3424bb94ce8</anchor>
      <arglist>(GtkEditable *editable, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_scrollbar_value_changed</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a2490f653137e0dcddb138fae16974e07</anchor>
      <arglist>(GtkAdjustment *adjustment, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>gboolean</type>
      <name>on_button_press_event</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a30b2ed4bb389a1225baaa7ab3c8d9d88</anchor>
      <arglist>(GtkWidget *, GdkEventButton *event, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>gboolean</type>
      <name>on_button_release_event</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a8052e42ad29aca43964bb04ea379f794</anchor>
      <arglist>(GtkWidget *, GdkEventButton *event, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>gboolean</type>
      <name>on_motion_notify_event</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a0f6e53b3f2476af215a5c9c87e71e0b8</anchor>
      <arglist>(GtkWidget *, GdkEventMotion *event, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>gboolean</type>
      <name>on_scroll_event</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a23f3558fd7063da6c4f453eecfd85c70</anchor>
      <arglist>(GtkWidget *, GdkEventScroll *event, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>in_devmode</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a301e3ea806e687d48f817b7ed7bf8aa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_scroom_bootstrap</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>ad1e18a647c5ecc3a2235b4e14f08bd74</anchor>
      <arglist>(const FileNameMap &amp;newFilenames)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_scroom_terminating</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a8aaa627c06109f99958936ba0e3888ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find_or_create_scroom</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a6a123442252e099c84849ff0ad12d41a</anchor>
      <arglist>(const PresentationInterface::Ptr &amp;presentation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onDragDataReceived</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a70acaa5f0cfece779fc5241e113e95d3</anchor>
      <arglist>(GtkWidget *, GdkDragContext *, int, int, GtkSelectionData *seldata, guint, guint, gpointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_scroom</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a19dc44b0b71d02dc59a3c16fdf3fe48b</anchor>
      <arglist>(const PresentationInterface::Ptr &amp;presentation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_newPresentationInterfaces_update</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a10bc3a3a311654abdb4d54e93b62049b</anchor>
      <arglist>(const std::map&lt; NewPresentationInterface::Ptr, std::string &gt; &amp;newPresentationInterfaces)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_presentation_created</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a1477024fd79f6507c4fa01a5b8e85d31</anchor>
      <arglist>(const PresentationInterface::Ptr &amp;presentation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_view_created</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>ab216dda22af978bbc755a31acf60f302</anchor>
      <arglist>(const View::Ptr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_presentation_added_to_view</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>aeba2cf448752ce6617c03f7dd34ffc7b</anchor>
      <arglist>(const View::Ptr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_presentation_possibly_destroyed</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a30a5e3f46a0ebcab2405634486aee4fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_view_destroyed</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a43402c91fa59e2da7639ad8b3e51973c</anchor>
      <arglist>(View *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_new_presentationobserver</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a8b8bdd3ed5344eb5a8a43387fa56f509</anchor>
      <arglist>(const PresentationObserver::Ptr &amp;po)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_new_viewobserver</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a141c8f40e927346d042b46c7ecc7a6fd</anchor>
      <arglist>(const ViewObserver::Ptr &amp;viewObserver)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>SCROOM_DEV_MODE</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>ab203333c81b880914c63291cc0c26bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>REGULAR_FILES</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a88a43ec881bd1f752d469b9747767544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>xmlFileName</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>ac29c7cff7372a795638c0c6f1d0314d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static GtkBuilder *</type>
      <name>aboutDialogXml</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>af1ea25f0666c6494af4b0411dec29ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static GtkWidget *</type>
      <name>aboutDialog</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a9180546c6d9070b28e52a0b62b6f15cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Views</type>
      <name>views</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>ad49710e0e7bbdfa292b7ac886a56a9fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::list&lt; PresentationInterface::WeakPtr &gt;</type>
      <name>presentations</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a01fb0801652fec5df6a66f9173127bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static FileNameMap</type>
      <name>filenames</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>ab35928a72da8049cfafad38e61c458e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>currentFolder</name>
      <anchorfile>callbacks_8cc.html</anchorfile>
      <anchor>a88fd8bb6d81270fb4692717f792a401c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>callbacks.hh</name>
    <path>/home/runner/work/scroom/scroom/gui/src/</path>
    <filename>callbacks_8hh.html</filename>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="scroominterface_8hh" name="scroominterface.hh" local="no" imported="no">scroom/scroominterface.hh</includes>
    <includes id="view_8hh" name="view.hh" local="yes" imported="no">view.hh</includes>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::list&lt; std::string &gt; &gt;</type>
      <name>FileNameMap</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>ae888da5a09e1e63d73a703afd3b0801d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_scroom_hide</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>aa77f6e72526e07b4459a78ef88b4780a</anchor>
      <arglist>(GtkWidget *widget, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_new_activate</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a1f53cfcfd10d0aac2f77962b7758706d</anchor>
      <arglist>(GtkMenuItem *menuitem, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_open_activate</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a2aaaa722ee335012f357c881b7f18c35</anchor>
      <arglist>(GtkMenuItem *menuitem, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_save_activate</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a8350d0efd0ef2cd0288e89afc5530830</anchor>
      <arglist>(GtkMenuItem *menuitem, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_save_as_activate</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a2c0cdd58c0e9450674c562458c89adf2</anchor>
      <arglist>(GtkMenuItem *menuitem, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_quit_activate</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>af1732d71fe25b3393ff4972a2dac3fcd</anchor>
      <arglist>(GtkMenuItem *menuitem, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_cut_activate</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a15e935398d8c7d09bb1f01970fd1bd6c</anchor>
      <arglist>(GtkMenuItem *menuitem, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_copy_activate</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a98813e7e9c6c25917065ac0da89f991b</anchor>
      <arglist>(GtkMenuItem *menuitem, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_paste_activate</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>ae43ffddbd1ac680d229145f70e83ae30</anchor>
      <arglist>(GtkMenuItem *menuitem, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_delete_activate</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a6d427922c3226def9418830bab81942d</anchor>
      <arglist>(GtkMenuItem *menuitem, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_fullscreen_activate</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a925bf0ea0d88af738ae9e4f231aea307</anchor>
      <arglist>(GtkMenuItem *menuitem, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_close_activate</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>ae1159d295a7d01af80bd0febd308c74e</anchor>
      <arglist>(GtkMenuItem *menuitem, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_about_activate</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a345d70d19f377b327d03d3b26121ab8c</anchor>
      <arglist>(GtkMenuItem *menuitem, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>gboolean</type>
      <name>on_drawingarea_expose_event</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a5d47004add906eff5a82c199ae8c8223</anchor>
      <arglist>(GtkWidget *widget, GdkEventExpose *event, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>gboolean</type>
      <name>on_drawingarea_configure_event</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a48449c7e345933466da867db27fb9df3</anchor>
      <arglist>(GtkWidget *widget, GdkEventConfigure *event, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>gboolean</type>
      <name>on_idle</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a165cb06d629eff2b6c6e025342d229a5</anchor>
      <arglist>(gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_done_loading_plugins</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>afd41e159402c4fc0b8c3341a372d7ce9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_zoombox_changed</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a5f8f863fcf5d9a80c489bbe4466e329f</anchor>
      <arglist>(GtkComboBox *widget, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_scrollbar_value_changed</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a2490f653137e0dcddb138fae16974e07</anchor>
      <arglist>(GtkAdjustment *adjustment, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_textbox_value_changed</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>aef7e97ad6ad51b450eb4c3424bb94ce8</anchor>
      <arglist>(GtkEditable *editable, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_scroom_bootstrap</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>ad1e18a647c5ecc3a2235b4e14f08bd74</anchor>
      <arglist>(const FileNameMap &amp;newFilenames)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_scroom_terminating</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a8aaa627c06109f99958936ba0e3888ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find_or_create_scroom</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a6a123442252e099c84849ff0ad12d41a</anchor>
      <arglist>(const PresentationInterface::Ptr &amp;presentation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_scroom</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a19dc44b0b71d02dc59a3c16fdf3fe48b</anchor>
      <arglist>(const PresentationInterface::Ptr &amp;presentation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_newPresentationInterfaces_update</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a10bc3a3a311654abdb4d54e93b62049b</anchor>
      <arglist>(const std::map&lt; NewPresentationInterface::Ptr, std::string &gt; &amp;newPresentationInterfaces)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_presentation_created</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>ad4cc65b5c695771dbc8d79e396fa87a5</anchor>
      <arglist>(const PresentationInterface::Ptr &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_view_created</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>ab216dda22af978bbc755a31acf60f302</anchor>
      <arglist>(const View::Ptr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_presentation_added_to_view</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>aeba2cf448752ce6617c03f7dd34ffc7b</anchor>
      <arglist>(const View::Ptr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_view_destroyed</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a43402c91fa59e2da7639ad8b3e51973c</anchor>
      <arglist>(View *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_new_presentationobserver</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a8b8bdd3ed5344eb5a8a43387fa56f509</anchor>
      <arglist>(const PresentationObserver::Ptr &amp;po)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_new_viewobserver</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a141c8f40e927346d042b46c7ecc7a6fd</anchor>
      <arglist>(const ViewObserver::Ptr &amp;viewObserver)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_presentation_possibly_destroyed</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a30a5e3f46a0ebcab2405634486aee4fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>in_devmode</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a301e3ea806e687d48f817b7ed7bf8aa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>REGULAR_FILES</name>
      <anchorfile>callbacks_8hh.html</anchorfile>
      <anchor>a88a43ec881bd1f752d469b9747767544</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>loader.cc</name>
    <path>/home/runner/work/scroom/scroom/gui/src/</path>
    <filename>loader_8cc.html</filename>
    <includes id="loader_8hh" name="loader.hh" local="yes" imported="no">loader.hh</includes>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="callbacks_8hh" name="callbacks.hh" local="yes" imported="no">callbacks.hh</includes>
    <includes id="pluginmanager_8hh" name="pluginmanager.hh" local="yes" imported="no">pluginmanager.hh</includes>
    <class kind="class">GObjectUnref</class>
    <class kind="class">GtkFileFilterInfoDeleter</class>
    <class kind="class">GtkFileFilterListDestroyer</class>
    <class kind="class">ScroomInterfaceImpl</class>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GtkFileFilterInfo, GtkFileFilterInfoDeleter &gt;</type>
      <name>GtkFileFilterInfoPtr</name>
      <anchorfile>loader_8cc.html</anchorfile>
      <anchor>aaa2bcc997dd40c9cba73d9beb88ecbc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroyGtkFileFilterList</name>
      <anchorfile>loader_8cc.html</anchorfile>
      <anchor>a47dec8cb3f03de25ed596fb0defa91f6</anchor>
      <arglist>(std::list&lt; GtkFileFilter * &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>charpFromString</name>
      <anchorfile>loader_8cc.html</anchorfile>
      <anchor>a4cc7a7a01f1096799f87a6b32dc4a379</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>GtkFileFilterInfoPtr</type>
      <name>filterInfoFromPath</name>
      <anchorfile>loader_8cc.html</anchorfile>
      <anchor>a60ebf2e9b89d9dc012bae8cd75eb45c7</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>filterMatchesInfo</name>
      <anchorfile>loader_8cc.html</anchorfile>
      <anchor>a19de4cc7f4540f821a9018ee9b51cbd7</anchor>
      <arglist>(GtkFileFilterInfo const &amp;info, std::list&lt; GtkFileFilter * &gt; const &amp;filters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>loader_8cc.html</anchorfile>
      <anchor>aa16c64386dde90b66ae796ec3183dcef</anchor>
      <arglist>(NewPresentationInterface *interface)</arglist>
    </member>
    <member kind="function">
      <type>PresentationInterface::Ptr</type>
      <name>loadPresentation</name>
      <anchorfile>loader_8cc.html</anchorfile>
      <anchor>aa14f4a1f2017c66c53c38768a622c0bf</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>PresentationInterface::Ptr</type>
      <name>loadPresentation</name>
      <anchorfile>loader_8cc.html</anchorfile>
      <anchor>a6390053187960b1853f827ed6126a7d6</anchor>
      <arglist>(GtkFileFilterInfo const &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>PresentationInterface::Ptr</type>
      <name>loadPresentation</name>
      <anchorfile>loader_8cc.html</anchorfile>
      <anchor>a1167febfe27a6552add65e343d1a13f3</anchor>
      <arglist>(GtkFileFilterInfoPtr const &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>loader_8cc.html</anchorfile>
      <anchor>a6caa967df34751dfd7c06745d1df4a1e</anchor>
      <arglist>(GtkFileFilterInfo const &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>loader_8cc.html</anchorfile>
      <anchor>a2e71046ecf769af62aff87af7b051df6</anchor>
      <arglist>(GtkFileFilterInfoPtr const &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>loader_8cc.html</anchorfile>
      <anchor>a6c21edd9d285c925527e3209fca54b01</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>loader.hh</name>
    <path>/home/runner/work/scroom/scroom/gui/src/</path>
    <filename>loader_8hh.html</filename>
    <includes id="scroominterface_8hh" name="scroominterface.hh" local="no" imported="no">scroom/scroominterface.hh</includes>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>loader_8hh.html</anchorfile>
      <anchor>aa16c64386dde90b66ae796ec3183dcef</anchor>
      <arglist>(NewPresentationInterface *interface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>loader_8hh.html</anchorfile>
      <anchor>a6b10f1e940c5aed1e9cdfa35396c46c2</anchor>
      <arglist>(const GtkFileFilterInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>loader_8hh.html</anchorfile>
      <anchor>a6c21edd9d285c925527e3209fca54b01</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>PresentationInterface::Ptr</type>
      <name>loadPresentation</name>
      <anchorfile>loader_8hh.html</anchorfile>
      <anchor>add9aeb3c2b4aeac90abc1a11a7c2a1d5</anchor>
      <arglist>(const GtkFileFilterInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>PresentationInterface::Ptr</type>
      <name>loadPresentation</name>
      <anchorfile>loader_8hh.html</anchorfile>
      <anchor>aa14f4a1f2017c66c53c38768a622c0bf</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroyGtkFileFilterList</name>
      <anchorfile>loader_8hh.html</anchorfile>
      <anchor>a47dec8cb3f03de25ed596fb0defa91f6</anchor>
      <arglist>(std::list&lt; GtkFileFilter * &gt; &amp;l)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pluginmanager.cc</name>
    <path>/home/runner/work/scroom/scroom/gui/src/</path>
    <filename>pluginmanager_8cc.html</filename>
    <includes id="pluginmanager_8hh" name="pluginmanager.hh" local="yes" imported="no">pluginmanager.hh</includes>
    <includes id="plugininformationinterface_8hh" name="plugininformationinterface.hh" local="no" imported="no">scroom/plugininformationinterface.hh</includes>
    <includes id="callbacks_8hh" name="callbacks.hh" local="yes" imported="no">callbacks.hh</includes>
    <member kind="function">
      <type>void</type>
      <name>startPluginManager</name>
      <anchorfile>pluginmanager_8cc.html</anchorfile>
      <anchor>a1eaba27ac5042cfaf3fc25381677d3d9</anchor>
      <arglist>(bool devMode)</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>SCROOM_PLUGIN_DIRS</name>
      <anchorfile>pluginmanager_8cc.html</anchorfile>
      <anchor>a0d5f9293a10a17f15445e2c66a02b193</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PluginManager::Ptr</type>
      <name>pluginManager</name>
      <anchorfile>pluginmanager_8cc.html</anchorfile>
      <anchor>ac86aff0855ed87e1b3b09b8c5f50528e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pluginmanager.hh</name>
    <path>/home/runner/work/scroom/scroom/gui/src/</path>
    <filename>pluginmanager_8hh.html</filename>
    <includes id="opentiledbitmapinterface_8hh" name="opentiledbitmapinterface.hh" local="no" imported="no">scroom/opentiledbitmapinterface.hh</includes>
    <includes id="plugininformationinterface_8hh" name="plugininformationinterface.hh" local="no" imported="no">scroom/plugininformationinterface.hh</includes>
    <includes id="scroominterface_8hh" name="scroominterface.hh" local="no" imported="no">scroom/scroominterface.hh</includes>
    <includes id="scroomplugin_8hh" name="scroomplugin.hh" local="no" imported="no">scroom/scroomplugin.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <includes id="view_8hh" name="view.hh" local="yes" imported="no">view.hh</includes>
    <includes id="workinterface_8hh" name="workinterface.hh" local="yes" imported="no">workinterface.hh</includes>
    <class kind="struct">PluginInformation</class>
    <class kind="class">PluginManager</class>
    <member kind="function">
      <type>void</type>
      <name>startPluginManager</name>
      <anchorfile>pluginmanager_8hh.html</anchorfile>
      <anchor>a1eaba27ac5042cfaf3fc25381677d3d9</anchor>
      <arglist>(bool devMode)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>progressbarmanager.cc</name>
    <path>/home/runner/work/scroom/scroom/gui/src/</path>
    <filename>progressbarmanager_8cc.html</filename>
    <includes id="progressbarmanager_8hh" name="progressbarmanager.hh" local="yes" imported="no">progressbarmanager.hh</includes>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
    <includes id="gtk-helpers_8hh" name="gtk-helpers.hh" local="no" imported="no">scroom/gtk-helpers.hh</includes>
    <includes id="callbacks_8hh" name="callbacks.hh" local="yes" imported="no">callbacks.hh</includes>
    <includes id="workinterface_8hh" name="workinterface.hh" local="yes" imported="no">workinterface.hh</includes>
    <class kind="class">anonymous_namespace{progressbarmanager.cc}::ProgressBarPulser</class>
    <namespace>anonymous_namespace{progressbarmanager.cc}</namespace>
    <member kind="function">
      <type>ProgressBarPulser::Ptr</type>
      <name>instance</name>
      <anchorfile>namespaceanonymous__namespace_02progressbarmanager_8cc_03.html</anchorfile>
      <anchor>a1cd7ce2821db8912b252ffaa3ec97af9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>progressbarmanager.hh</name>
    <path>/home/runner/work/scroom/scroom/gui/src/</path>
    <filename>progressbarmanager_8hh.html</filename>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <class kind="class">ProgressBarManager</class>
  </compound>
  <compound kind="file">
    <name>sidebarmanager.cc</name>
    <path>/home/runner/work/scroom/scroom/gui/src/</path>
    <filename>sidebarmanager_8cc.html</filename>
    <includes id="sidebarmanager_8hh" name="sidebarmanager.hh" local="yes" imported="no">sidebarmanager.hh</includes>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
  </compound>
  <compound kind="file">
    <name>sidebarmanager.hh</name>
    <path>/home/runner/work/scroom/scroom/gui/src/</path>
    <filename>sidebarmanager_8hh.html</filename>
    <class kind="class">SidebarManager</class>
  </compound>
  <compound kind="file">
    <name>view.cc</name>
    <path>/home/runner/work/scroom/scroom/gui/src/</path>
    <filename>view_8cc.html</filename>
    <includes id="view_8hh" name="view.hh" local="yes" imported="no">view.hh</includes>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
    <includes id="cairo-helpers_8hh" name="cairo-helpers.hh" local="no" imported="no">scroom/cairo-helpers.hh</includes>
    <includes id="format__stuff_8hh" name="format_stuff.hh" local="no" imported="no">scroom/format_stuff.hh</includes>
    <includes id="rounding_8hh" name="rounding.hh" local="no" imported="no">scroom/rounding.hh</includes>
    <includes id="callbacks_8hh" name="callbacks.hh" local="yes" imported="no">callbacks.hh</includes>
    <includes id="pluginmanager_8hh" name="pluginmanager.hh" local="yes" imported="no">pluginmanager.hh</includes>
    <class kind="class">TweakPresentationPosition</class>
    <class kind="class">TweakRulers</class>
    <class kind="class">ITweakSelection</class>
    <class kind="class">TweakSelection</class>
    <class kind="class">TweakGridSelection</class>
    <class kind="class">TweakPixelSelection</class>
    <class kind="class">TweakPositionTextBox</class>
    <member kind="define">
      <type>#define</type>
      <name>G_VALUE_INIT</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>a112ee92545ea3e4692d7224646d0db97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLUMN_TEXT</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bad5db438c58c4839d1e9bb25dc55a4130</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLUMN_ZOOM</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bac8558f41e7d91c7bb57659a23f80542c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>N_COLUMNS</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bac70d28409ca79aa291cc0e58244f1fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Corner</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>aa292af1848104b3be6cc0c966b5317b6</anchor>
      <arglist></arglist>
      <enumvalue file="view_8cc.html" anchor="aa292af1848104b3be6cc0c966b5317b6a747385047b85ae751f83adb36435a3c1">TOP_LEFT</enumvalue>
      <enumvalue file="view_8cc.html" anchor="aa292af1848104b3be6cc0c966b5317b6a901d87dedda8db733f5e6d34c4eb5fe0">TOP_RIGHT</enumvalue>
      <enumvalue file="view_8cc.html" anchor="aa292af1848104b3be6cc0c966b5317b6a8d81ac82421d1b03da58fccb9174892e">BOTTOM_LEFT</enumvalue>
      <enumvalue file="view_8cc.html" anchor="aa292af1848104b3be6cc0c966b5317b6a341b72aaab1308a3e6667af1e52f5def">BOTTOM_RIGHT</enumvalue>
    </member>
    <member kind="function">
      <type>std::function&lt; Scroom::Utils::Point&lt; double &gt;Scroom::Utils::Rectangle&lt; double &gt;)&gt;</type>
      <name>corner_getter</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>ab353fea0fbad8760c041cbbfce64eb3c</anchor>
      <arglist>(Corner c)</arglist>
    </member>
    <member kind="function">
      <type>Corner</type>
      <name>find_closest_corner</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>a0a0c0368f16f55cccde4028cdacd8e81</anchor>
      <arglist>(Scroom::Utils::Point&lt; double &gt; p, Scroom::Utils::Rectangle&lt; double &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>Corner</type>
      <name>find_opposed_corner</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>ad4e132ee6695c5790e6ecf9607cf18d1</anchor>
      <arglist>(Corner c)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>toRectangle</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>a4180268163d4a0eed52e0f42a1850271</anchor>
      <arglist>(Selection s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scroom::Utils::Point&lt; double &gt;</type>
      <name>eventToPoint</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>aa0365e14a1ae376e77bc105fad8be98f</anchor>
      <arglist>(GdkEventButton *event)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scroom::Utils::Point&lt; double &gt;</type>
      <name>eventToPoint</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>a3ec5fcdfe1eb5d0cec0451d66cadb99e</anchor>
      <arglist>(GdkEventMotion *event)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>on_newWindow_activate</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>a3c28481536cbc8ae93fb2827dc0308e6</anchor>
      <arglist>(GtkMenuItem *, gpointer user_data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>tool_button_toggled</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>a1e470cda12457e1dc1465b4e4c35d7c8</anchor>
      <arglist>(GtkToggleButton *button, gpointer data)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::array&lt; const char *, 36 &gt;</type>
      <name>zoomfactor</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>a35a9c60f1caa54935917370de4a9721b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MaxZoom</name>
      <anchorfile>view_8cc.html</anchorfile>
      <anchor>a6b22ca8774cf0041d46f42f1e59bbbd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>view.hh</name>
    <path>/home/runner/work/scroom/scroom/gui/src/</path>
    <filename>view_8hh.html</filename>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="scroominterface_8hh" name="scroominterface.hh" local="no" imported="no">scroom/scroominterface.hh</includes>
    <includes id="stuff_8hh" name="stuff.hh" local="no" imported="no">scroom/stuff.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <includes id="progressbarmanager_8hh" name="progressbarmanager.hh" local="yes" imported="no">progressbarmanager.hh</includes>
    <includes id="ruler_8hh" name="ruler.hh" local="yes" imported="no">ruler.hh</includes>
    <includes id="sidebarmanager_8hh" name="sidebarmanager.hh" local="yes" imported="no">sidebarmanager.hh</includes>
    <class kind="class">Freezable</class>
    <class kind="class">View</class>
  </compound>
  <compound kind="file">
    <name>workinterface.hh</name>
    <path>/home/runner/work/scroom/scroom/gui/src/</path>
    <filename>workinterface_8hh.html</filename>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <class kind="class">WorkInterface</class>
  </compound>
  <compound kind="file">
    <name>unittest-main.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/boost-test-helper/src/</path>
    <filename>unittest-main_8cc.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_TEST_ALTERNATIVE_INIT_API</name>
      <anchorfile>unittest-main_8cc.html</anchorfile>
      <anchor>a21ea3cc84cf29315cebb034aa105cb6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init_unit_test</name>
      <anchorfile>unittest-main_8cc.html</anchorfile>
      <anchor>a19823c5af9fff4070c144dacf022bf94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>extract_path</name>
      <anchorfile>unittest-main_8cc.html</anchorfile>
      <anchor>a5d90f5cbe9671336a14a4c82012ee0f0</anchor>
      <arglist>(const std::string &amp;cmd)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>unittest-main_8cc.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>testlib-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/boost-test-helper/test/</path>
    <filename>testlib-tests_8cc.html</filename>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>testlib-tests_8cc.html</anchorfile>
      <anchor>a646e3d81ddefd813c460583cda80816c</anchor>
      <arglist>(tests_can_be_executed)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>blockallocator.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/memory-manager/inc/scroom/</path>
    <filename>blockallocator_8hh.html</filename>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <class kind="class">Scroom::MemoryBlocks::Page</class>
    <class kind="class">Scroom::MemoryBlocks::BlockInterface</class>
    <class kind="class">Scroom::MemoryBlocks::BlockFactoryInterface</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::MemoryBlocks</namespace>
    <namespace>Scroom::MemoryBlocks::RawPageData</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; uint8_t &gt;</type>
      <name>Ptr</name>
      <anchorfile>namespaceScroom_1_1MemoryBlocks_1_1RawPageData.html</anchorfile>
      <anchor>adea1c47b8e23abbfd3a1ac8f9648ae70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; uint8_t &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>namespaceScroom_1_1MemoryBlocks_1_1RawPageData.html</anchorfile>
      <anchor>a72f7bee76a0a83c657d03b961774733a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; Page &gt;</type>
      <name>PageList</name>
      <anchorfile>namespaceScroom_1_1MemoryBlocks.html</anchorfile>
      <anchor>a1e99f7c5b462e84d8d2e4abdb4c0a2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>BlockFactoryInterface::Ptr</type>
      <name>getBlockFactoryInterface</name>
      <anchorfile>namespaceScroom_1_1MemoryBlocks.html</anchorfile>
      <anchor>a69b514b38d03a4a952d9d7fec8da1ec1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>memoryblobs.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/memory-manager/inc/scroom/</path>
    <filename>memoryblobs_8hh.html</filename>
    <includes id="blockallocator_8hh" name="blockallocator.hh" local="no" imported="no">scroom/blockallocator.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <class kind="class">Scroom::MemoryBlobs::PageProvider</class>
    <class kind="class">Scroom::MemoryBlobs::PageProvider::MarkPageFree</class>
    <class kind="class">Scroom::MemoryBlobs::Blob</class>
    <class kind="class">Scroom::MemoryBlobs::Blob::UnloadData</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::MemoryBlobs</namespace>
    <namespace>Scroom::MemoryBlobs::RawPageData</namespace>
    <namespace>Scroom::MemoryBlobs::Page</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; uint8_t &gt;</type>
      <name>Ptr</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs_1_1RawPageData.html</anchorfile>
      <anchor>a3e66bb65e19725417b4ab427ad4338b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const uint8_t &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs_1_1RawPageData.html</anchorfile>
      <anchor>a2afb846f24b06f62c8564e4dde32dc02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; uint8_t &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs_1_1RawPageData.html</anchorfile>
      <anchor>a56d77351049430cd88629153e0c8cb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Scroom::MemoryBlocks::Page &gt;</type>
      <name>Ptr</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs_1_1Page.html</anchorfile>
      <anchor>aef1d8c508f1e7142bf747836e906a738</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; Page::Ptr &gt;</type>
      <name>PageList</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs.html</anchorfile>
      <anchor>aa30db602fa289e14a9db8bfd0f36d5ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>blob-compression.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/memory-manager/src/</path>
    <filename>blob-compression_8cc.html</filename>
    <includes id="blob-compression_8hh" name="blob-compression.hh" local="yes" imported="no">blob-compression.hh</includes>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
    <includes id="memoryblobs_8hh" name="memoryblobs.hh" local="no" imported="no">scroom/memoryblobs.hh</includes>
    <namespace>Scroom</namespace>
    <namespace>Scroom::MemoryBlobs</namespace>
    <namespace>Scroom::MemoryBlobs::Detail</namespace>
    <member kind="define">
      <type>#define</type>
      <name>zlib_verify</name>
      <anchorfile>blob-compression_8cc.html</anchorfile>
      <anchor>a67bff46d3c0317ef11f97f0ccdc442a0</anchor>
      <arglist>(condition, function_name, r, stream)</arglist>
    </member>
    <member kind="function">
      <type>PageList</type>
      <name>compressBlob</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs_1_1Detail.html</anchorfile>
      <anchor>a9eecc99bc3c2f979da79519265dce5d3</anchor>
      <arglist>(const uint8_t *in, size_t size, const PageProvider::Ptr &amp;provider)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompressBlob</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs_1_1Detail.html</anchorfile>
      <anchor>ad9ecb35eccaa1e782bf2a383f66d5998</anchor>
      <arglist>(uint8_t *out, size_t size, PageList list, const PageProvider::Ptr &amp;provider)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>blob-compression.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/memory-manager/src/</path>
    <filename>blob-compression_8hh.html</filename>
    <includes id="memoryblobs_8hh" name="memoryblobs.hh" local="no" imported="no">scroom/memoryblobs.hh</includes>
    <namespace>Scroom</namespace>
    <namespace>Scroom::MemoryBlobs</namespace>
    <namespace>Scroom::MemoryBlobs::Detail</namespace>
    <member kind="function">
      <type>PageList</type>
      <name>compressBlob</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs_1_1Detail.html</anchorfile>
      <anchor>a9eecc99bc3c2f979da79519265dce5d3</anchor>
      <arglist>(const uint8_t *in, size_t size, const PageProvider::Ptr &amp;provider)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompressBlob</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs_1_1Detail.html</anchorfile>
      <anchor>ad9ecb35eccaa1e782bf2a383f66d5998</anchor>
      <arglist>(uint8_t *out, size_t size, PageList list, const PageProvider::Ptr &amp;provider)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>memoryblobs.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/memory-manager/src/</path>
    <filename>memoryblobs_8cc.html</filename>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
    <includes id="blockallocator_8hh" name="blockallocator.hh" local="no" imported="no">scroom/blockallocator.hh</includes>
    <includes id="memoryblobs_8hh" name="memoryblobs.hh" local="no" imported="no">scroom/memoryblobs.hh</includes>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="blob-compression_8hh" name="blob-compression.hh" local="yes" imported="no">blob-compression.hh</includes>
    <namespace>Scroom</namespace>
    <namespace>Scroom::MemoryBlobs</namespace>
    <member kind="define">
      <type>#define</type>
      <name>COMPRESS_PRIO</name>
      <anchorfile>memoryblobs_8cc.html</anchorfile>
      <anchor>a9f1b6c9f67956f08621bb659a79f6535</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>swapbasedblockallocator.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/memory-manager/src/</path>
    <filename>swapbasedblockallocator_8cc.html</filename>
    <includes id="blockallocator_8hh" name="blockallocator.hh" local="no" imported="no">scroom/blockallocator.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <class kind="class">Scroom::MemoryBlocks::Detail::anonymous_namespace{swapbasedblockallocator.cc}::DontDelete</class>
    <class kind="class">Scroom::MemoryBlocks::Detail::SwapBasedBlockAllocator</class>
    <class kind="class">Scroom::MemoryBlocks::Detail::SwapBasedBlockAllocatorFactory</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::MemoryBlocks</namespace>
    <namespace>Scroom::MemoryBlocks::Detail</namespace>
    <namespace>Scroom::MemoryBlocks::Detail::anonymous_namespace{swapbasedblockallocator.cc}</namespace>
    <member kind="function">
      <type>BlockFactoryInterface::Ptr</type>
      <name>getBlockFactoryInterface</name>
      <anchorfile>namespaceScroom_1_1MemoryBlocks.html</anchorfile>
      <anchor>a69b514b38d03a4a952d9d7fec8da1ec1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>blob-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/memory-manager/test/</path>
    <filename>blob-tests_8cc.html</filename>
    <includes id="memoryblobs_8hh" name="memoryblobs.hh" local="no" imported="no">scroom/memoryblobs.hh</includes>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>blob-tests_8cc.html</anchorfile>
      <anchor>aae71f0cea296d32624262d27bad8ad60</anchor>
      <arglist>(blobs_retain_their_data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>blob-tests_8cc.html</anchorfile>
      <anchor>ae2022a6f79e93daead7ed523e40ed5f4</anchor>
      <arglist>(blobs_can_be_updated)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>blob-tests_8cc.html</anchorfile>
      <anchor>a48f83a77f757a2d7fb905094ddd04867</anchor>
      <arglist>(blobs_can_be_initialized)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>compression-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/memory-manager/test/</path>
    <filename>compression-tests_8cc.html</filename>
    <includes id="blob-compression_8hh" name="blob-compression.hh" local="yes" imported="no">blob-compression.hh</includes>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>compression-tests_8cc.html</anchorfile>
      <anchor>a6f9ad93861505ddf123442cd8ca906c7</anchor>
      <arglist>(compression_decompression_retains_data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>compression-tests_8cc.html</anchorfile>
      <anchor>a3f28f19d69ea1b8c2efd8226aa776b68</anchor>
      <arglist>(compression_decompression_retains_data_with_large_blocks)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pageprovider-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/memory-manager/test/</path>
    <filename>pageprovider-tests_8cc.html</filename>
    <includes id="memoryblobs_8hh" name="memoryblobs.hh" local="no" imported="no">scroom/memoryblobs.hh</includes>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>pageprovider-tests_8cc.html</anchorfile>
      <anchor>a30c26e7eceb750bf9e332cebdbc90524</anchor>
      <arglist>(Provider_provides_any_number_of_independent_blocks_of_a_given_size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>swap-block-allocator-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/memory-manager/test/</path>
    <filename>swap-block-allocator-tests_8cc.html</filename>
    <includes id="blockallocator_8hh" name="blockallocator.hh" local="no" imported="no">scroom/blockallocator.hh</includes>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>swap-block-allocator-tests_8cc.html</anchorfile>
      <anchor>a0b4dfb6ed2e620259f1cdd612b661869</anchor>
      <arglist>(allocator_provides_a_number_of_independent_blocks_of_a_given_size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>color.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/plugin-interfaces/inc/scroom/</path>
    <filename>color_8hh.html</filename>
    <class kind="class">Color</class>
    <namespace>Detail</namespace>
    <member kind="function">
      <type>uint8_t</type>
      <name>byteFromDouble</name>
      <anchorfile>color_8hh.html</anchorfile>
      <anchor>a5f58fb375bbeafcd94a58efff767de34</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleFromByte</name>
      <anchorfile>color_8hh.html</anchorfile>
      <anchor>aa1f249efeab2150f54f9455dd2fef207</anchor>
      <arglist>(uint8_t b)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>shortFromDouble</name>
      <anchorfile>color_8hh.html</anchorfile>
      <anchor>a4602012b20f6c31c205a715fef9f1be4</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeC</name>
      <anchorfile>namespaceDetail.html</anchorfile>
      <anchor>a788802f9f5732db966a27e302696fa53</anchor>
      <arglist>(double c)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>mix</name>
      <anchorfile>color_8hh.html</anchorfile>
      <anchor>af151609bdfe02bb2507314a1b59c000d</anchor>
      <arglist>(const Color &amp;a, const Color &amp;b, double alpha)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>colormappable.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/plugin-interfaces/inc/scroom/</path>
    <filename>colormappable_8hh.html</filename>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
    <includes id="color_8hh" name="color.hh" local="no" imported="no">scroom/color.hh</includes>
    <includes id="observable_8hh" name="observable.hh" local="no" imported="no">scroom/observable.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <class kind="class">Colormap</class>
    <class kind="class">Colormappable</class>
    <class kind="class">ColormapProvider</class>
    <class kind="class">ColormapHelperBase</class>
    <class kind="class">ColormapHelper</class>
    <class kind="class">MonochromeColormapHelper</class>
    <member kind="variable">
      <type>const std::string</type>
      <name>COLORMAPPABLE_PROPERTY_NAME</name>
      <anchorfile>colormappable_8hh.html</anchorfile>
      <anchor>ad2aa67b50b31575e0ad907e2e045eaa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>MONOCHROME_COLORMAPPABLE_PROPERTY_NAME</name>
      <anchorfile>colormappable_8hh.html</anchorfile>
      <anchor>ad2d2917d25ae2de5baa91f92dafb3cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>TRANSPARENT_BACKGROUND_PROPERTY_NAME</name>
      <anchorfile>colormappable_8hh.html</anchorfile>
      <anchor>aa9ccccaacd6a2d008759fcaac53b9bf2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>colormappable.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/plugin-interfaces/inc/scroom/gmock/</path>
    <filename>gmock_2colormappable_8hh.html</filename>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <class kind="class">ColormappableMock</class>
  </compound>
  <compound kind="file">
    <name>presentationinterface.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/plugin-interfaces/inc/scroom/gmock/</path>
    <filename>gmock_2presentationinterface_8hh.html</filename>
    <includes id="gmock_2colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/gmock/colormappable.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <class kind="class">PresentationMock</class>
    <class kind="class">ColormappablePresentationMock</class>
  </compound>
  <compound kind="file">
    <name>presentationinterface.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/plugin-interfaces/inc/scroom/</path>
    <filename>presentationinterface_8hh.html</filename>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <includes id="observable_8hh" name="observable.hh" local="no" imported="no">scroom/observable.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <class kind="class">Viewable</class>
    <class kind="class">PresentationInterface</class>
    <class kind="class">PresentationBase</class>
    <class kind="class">PresentationBaseSimple</class>
    <class kind="class">Aggregate</class>
    <member kind="typedef">
      <type>Scroom::Utils::Observable&lt; Viewable &gt;</type>
      <name>ViewObservable</name>
      <anchorfile>presentationinterface_8hh.html</anchorfile>
      <anchor>ae36d25542bd5d3ebd49c3cefe9e7fc5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>opentiledbitmapinterface.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/plugin-interfaces/inc/scroom/</path>
    <filename>opentiledbitmapinterface_8hh.html</filename>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <includes id="point_8hh" name="point.hh" local="no" imported="no">scroom/point.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <includes id="showmetadata_8hh" name="showmetadata.hh" local="no" imported="no">scroom/showmetadata.hh</includes>
    <includes id="tiledbitmaplayer_8hh" name="tiledbitmaplayer.hh" local="no" imported="no">scroom/tiledbitmaplayer.hh</includes>
    <class kind="struct">Scroom::TiledBitmap::BitmapMetaData</class>
    <class kind="class">Scroom::TiledBitmap::OpenTiledBitmapInterface</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::TiledBitmap</namespace>
    <member kind="typedef">
      <type>std::function&lt; Scroom::Utils::Stuff(const ProgressInterface::Ptr &amp;)&gt;</type>
      <name>ReloadFunction</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>abcdc6501ad25d0c72901a0ef53452506</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple&lt; LayerSpec, ColormapHelperBase::Ptr &gt;</type>
      <name>LayerSpecResult</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a75aad5c865440565d24e1c54846ed146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; LayerSpecResult(const BitmapMetaData &amp;bitmapMetaData)&gt;</type>
      <name>LayerSpecForBitmapFunc</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a44750b261450728023901225e657a237</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_stream</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>ad48ffa08ebee955f5039811162e0df4a</anchor>
      <arglist>(std::ostream &amp;os, const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a90b98df77076cf30312ea6e57d3e75d2</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>Metadata::Metadata</type>
      <name>to_metadata</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a57ca2a55cf5fd640d3e3e3e2d59c4a62</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>OpenPresentationInterface::Ptr</type>
      <name>ToOpenPresentationInterface</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>abd171862b26335d75a34704553701421</anchor>
      <arglist>(OpenTiledBitmapInterface::Ptr openTiledBitmapInterface)</arglist>
    </member>
    <member kind="function">
      <type>LayerSpecResult</type>
      <name>LayerSpecForBitmap</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a22a1bb4f862ef52ed08042515ffca9da</anchor>
      <arglist>(const BitmapMetaData &amp;bitmapMetaData)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Stuff</type>
      <name>scheduleLoadingBitmap</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a55c09152eec48a7f0b8b0819cd243e4d</anchor>
      <arglist>(const SourcePresentation::Ptr &amp;sp, const Layer::Ptr &amp;layer, const ProgressInterface::Ptr &amp;progress)</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>RGB</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a68ed4ea621e837ae62809626d1f7bba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>CMYK</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a26f688fe4903818d5c7d117139a6bbed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>Greyscale</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a0451c92ea02ad814ffc4a83ebf51d475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>Colormapped</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a50226c5783a13b33eee2fa92e99280f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pipettelayeroperations.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/plugin-interfaces/inc/scroom/</path>
    <filename>pipettelayeroperations_8hh.html</filename>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <class kind="class">PipetteLayerOperations</class>
  </compound>
  <compound kind="file">
    <name>pipetteviewinterface.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/plugin-interfaces/inc/scroom/</path>
    <filename>pipetteviewinterface_8hh.html</filename>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <includes id="pipettelayeroperations_8hh" name="pipettelayeroperations.hh" local="no" imported="no">scroom/pipettelayeroperations.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <class kind="class">PipetteViewInterface</class>
    <member kind="variable">
      <type>const std::string</type>
      <name>PIPETTE_PROPERTY_NAME</name>
      <anchorfile>pipetteviewinterface_8hh.html</anchorfile>
      <anchor>a8024b3c17cdcd8b401d96bf7ef32bf2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>plugininformationinterface.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/plugin-interfaces/inc/scroom/</path>
    <filename>plugininformationinterface_8hh.html</filename>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <includes id="scroominterface_8hh" name="scroominterface.hh" local="no" imported="no">scroom/scroominterface.hh</includes>
    <class kind="class">PluginInformationInterface</class>
    <member kind="define">
      <type>#define</type>
      <name>PLUGIN_API_VERSION</name>
      <anchorfile>plugininformationinterface_8hh.html</anchorfile>
      <anchor>ac3bcb9217a74830c51b6c46c9b5f997f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>resizablepresentationinterface.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/plugin-interfaces/inc/scroom/</path>
    <filename>resizablepresentationinterface_8hh.html</filename>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <includes id="observable_8hh" name="observable.hh" local="no" imported="no">scroom/observable.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <class kind="class">ResizablePresentationInterface</class>
  </compound>
  <compound kind="file">
    <name>scroominterface.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/plugin-interfaces/inc/scroom/</path>
    <filename>scroominterface_8hh.html</filename>
    <includes id="bookkeeping_8hh" name="bookkeeping.hh" local="no" imported="no">scroom/bookkeeping.hh</includes>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <class kind="class">ScroomInterface</class>
    <class kind="class">NewPresentationInterface</class>
    <class kind="class">NewAggregateInterface</class>
    <class kind="class">OpenPresentationInterface</class>
    <class kind="class">OpenInterface</class>
    <class kind="class">PresentationObserver</class>
    <class kind="class">ViewObserver</class>
    <class kind="class">ScroomPluginInterface</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::TiledBitmap</namespace>
  </compound>
  <compound kind="file">
    <name>scroomplugin.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/plugin-interfaces/inc/scroom/</path>
    <filename>scroomplugin_8hh.html</filename>
    <member kind="function">
      <type>std::shared_ptr&lt; PluginInformationInterface &gt;</type>
      <name>getPluginInformation</name>
      <anchorfile>scroomplugin_8hh.html</anchorfile>
      <anchor>a5f07737b567b589536819c5d8cedf63a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>showmetadatainterface.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/plugin-interfaces/inc/scroom/</path>
    <filename>showmetadatainterface_8hh.html</filename>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <class kind="class">ShowMetadataInterface</class>
    <member kind="variable">
      <type>const std::string</type>
      <name>METADATA_PROPERTY_NAME</name>
      <anchorfile>showmetadatainterface_8hh.html</anchorfile>
      <anchor>afa30d0559ca625b8a3ef5e5fd42ab65b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>viewinterface.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/plugin-interfaces/inc/scroom/</path>
    <filename>viewinterface_8hh.html</filename>
    <includes id="gtk-helpers_8hh" name="gtk-helpers.hh" local="no" imported="no">scroom/gtk-helpers.hh</includes>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <includes id="progressinterface_8hh" name="progressinterface.hh" local="no" imported="no">scroom/progressinterface.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <class kind="struct">Selection</class>
    <class kind="class">PostRenderer</class>
    <class kind="class">SelectionListener</class>
    <class kind="class">ToolStateListener</class>
    <class kind="class">ViewInterface</class>
    <namespace>SelectionType</namespace>
    <member kind="function">
      <type>const std::string</type>
      <name>GRID</name>
      <anchorfile>namespaceSelectionType.html</anchorfile>
      <anchor>a9f0e8fd7cec2332d694d5a898cff9dc9</anchor>
      <arglist>(&quot;GridSelection&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>PIXEL</name>
      <anchorfile>namespaceSelectionType.html</anchorfile>
      <anchor>aa8763b7e1473f7e5d1e2c8d5b86fe49f</anchor>
      <arglist>(&quot;PixelSelection&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>DEFAULT</name>
      <anchorfile>namespaceSelectionType.html</anchorfile>
      <anchor>aebc501deb9a30b47b6b63f09abcb98bc</anchor>
      <arglist>(GRID)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitmap-helpers.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/scroom/inc/scroom/</path>
    <filename>bitmap-helpers_8hh.html</filename>
    <includes id="global_8hh" name="global.hh" local="no" imported="no">scroom/global.hh</includes>
    <class kind="class">Scroom::Bitmap::BitmapSurface</class>
    <class kind="class">Scroom::Bitmap::SampleIterator</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Bitmap</namespace>
  </compound>
  <compound kind="file">
    <name>cairo-helpers.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/scroom/inc/scroom/</path>
    <filename>cairo-helpers_8hh.html</filename>
    <includes id="color_8hh" name="color.hh" local="no" imported="no">scroom/color.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <namespace>Colors</namespace>
    <member kind="function">
      <type>void</type>
      <name>traceRectangleContour</name>
      <anchorfile>cairo-helpers_8hh.html</anchorfile>
      <anchor>a5d8088f5039ed37d44ccd366998c03b8</anchor>
      <arglist>(cairo_t *cr, Scroom::Utils::Rectangle&lt; double &gt; const &amp;viewArea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRectangleContour</name>
      <anchorfile>cairo-helpers_8hh.html</anchorfile>
      <anchor>a249906dbe982d14efe1755b4efa57c4c</anchor>
      <arglist>(cairo_t *cr, Scroom::Utils::Rectangle&lt; double &gt; const &amp;viewArea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRectangleContour</name>
      <anchorfile>cairo-helpers_8hh.html</anchorfile>
      <anchor>a80463074cbd3cbfd913d639c82cde48c</anchor>
      <arglist>(cairo_t *cr, Color const &amp;c, Scroom::Utils::Rectangle&lt; double &gt; const &amp;viewArea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClip</name>
      <anchorfile>cairo-helpers_8hh.html</anchorfile>
      <anchor>a7eaa96a970e5ff603afbea0a3a0bf761</anchor>
      <arglist>(cairo_t *cr, double x, double y, double width, double height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClip</name>
      <anchorfile>cairo-helpers_8hh.html</anchorfile>
      <anchor>a00f6a1bea87bb5106913e515b35f4b99</anchor>
      <arglist>(cairo_t *cr, const Scroom::Utils::Rectangle&lt; double &gt; &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRectangle</name>
      <anchorfile>cairo-helpers_8hh.html</anchorfile>
      <anchor>a9788adfc52ad24ba1a023b938b6b7882</anchor>
      <arglist>(cairo_t *cr, Color const &amp;c, Scroom::Utils::Rectangle&lt; double &gt; const &amp;viewArea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawOutOfBoundsWithBackground</name>
      <anchorfile>cairo-helpers_8hh.html</anchorfile>
      <anchor>a452092bf4e124ef9557b345e051fd26d</anchor>
      <arglist>(cairo_t *cr, Scroom::Utils::Rectangle&lt; double &gt; const &amp;requestedPresentationArea, Scroom::Utils::Rectangle&lt; double &gt; const &amp;actualPresentationArea, double pixelSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawOutOfBoundsWithBackgroundColor</name>
      <anchorfile>cairo-helpers_8hh.html</anchorfile>
      <anchor>aa0be4a3f77b013339e285dd1089b76b3</anchor>
      <arglist>(cairo_t *cr, const Color &amp;background, Scroom::Utils::Rectangle&lt; double &gt; const &amp;requestedPresentationArea, Scroom::Utils::Rectangle&lt; double &gt; const &amp;actualPresentationArea, double pixelSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawOutOfBoundsWithoutBackground</name>
      <anchorfile>cairo-helpers_8hh.html</anchorfile>
      <anchor>af1d210c96850fe6252ce08aa395907e3</anchor>
      <arglist>(cairo_t *cr, Scroom::Utils::Rectangle&lt; double &gt; const &amp;requestedPresentationArea, Scroom::Utils::Rectangle&lt; double &gt; const &amp;actualPresentationArea, double pixelSize)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pixelSizeFromZoom</name>
      <anchorfile>cairo-helpers_8hh.html</anchorfile>
      <anchor>ac7a152a4cc864e9c67acbc6686a9d3a4</anchor>
      <arglist>(int zoom)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>OUT_OF_BOUNDS</name>
      <anchorfile>namespaceColors.html</anchorfile>
      <anchor>a2229f384a154a2dedc09dc7b2b7896dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>global.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/scroom/inc/scroom/</path>
    <filename>global_8hh.html</filename>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>byte</name>
      <anchorfile>global_8hh.html</anchorfile>
      <anchor>a7528222f65ad403ee1a88ff2b56f9fb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>showmetadata.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/scroom/inc/scroom/</path>
    <filename>showmetadata_8hh.html</filename>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Metadata</namespace>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt;</type>
      <name>Metadata</name>
      <anchorfile>namespaceScroom_1_1Metadata.html</anchorfile>
      <anchor>a51350b5aec7cb7add0d90fdeb7ead3eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showMetaData</name>
      <anchorfile>namespaceScroom_1_1Metadata.html</anchorfile>
      <anchor>a0e30bfa9bfb8d9471c0b6b7a9445b81a</anchor>
      <arglist>(GtkWindow *parent, std::string title, Metadata data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transformpresentation.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/scroom/inc/scroom/</path>
    <filename>transformpresentation_8hh.html</filename>
    <includes id="bitmap-helpers_8hh" name="bitmap-helpers.hh" local="no" imported="no">scroom/bitmap-helpers.hh</includes>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <includes id="pipetteviewinterface_8hh" name="pipetteviewinterface.hh" local="no" imported="no">scroom/pipetteviewinterface.hh</includes>
    <includes id="point_8hh" name="point.hh" local="no" imported="no">scroom/point.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <includes id="showmetadatainterface_8hh" name="showmetadatainterface.hh" local="no" imported="no">scroom/showmetadatainterface.hh</includes>
    <class kind="class">TransformationData</class>
    <class kind="class">Detail::ViewData</class>
    <class kind="class">TransformPresentation</class>
    <namespace>Detail</namespace>
  </compound>
  <compound kind="file">
    <name>bitmap-helpers.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/scroom/src/</path>
    <filename>bitmap-helpers_8cc.html</filename>
    <includes id="bitmap-helpers_8hh" name="bitmap-helpers.hh" local="no" imported="no">scroom/bitmap-helpers.hh</includes>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Bitmap</namespace>
  </compound>
  <compound kind="file">
    <name>cairo-helpers.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/scroom/src/</path>
    <filename>cairo-helpers_8cc.html</filename>
    <includes id="cairo-helpers_8hh" name="cairo-helpers.hh" local="no" imported="no">scroom/cairo-helpers.hh</includes>
    <namespace>Colors</namespace>
    <member kind="function">
      <type>const Color</type>
      <name>OUT_OF_BOUNDS</name>
      <anchorfile>namespaceColors.html</anchorfile>
      <anchor>a610c48d1b47f4fe0d23399eb2a4f9b7f</anchor>
      <arglist>(0.75, 0.75, 1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>traceRectangleContour</name>
      <anchorfile>cairo-helpers_8cc.html</anchorfile>
      <anchor>a3c761221238966e436006bd09ab04a91</anchor>
      <arglist>(cairo_t *cr, Rectangle&lt; double &gt; const &amp;viewArea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRectangleContour</name>
      <anchorfile>cairo-helpers_8cc.html</anchorfile>
      <anchor>ae67b43754cf7440b0f064cdd859cf27c</anchor>
      <arglist>(cairo_t *cr, Rectangle&lt; double &gt; const &amp;viewArea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRectangleContour</name>
      <anchorfile>cairo-helpers_8cc.html</anchorfile>
      <anchor>a794c46ae3cb708877296feb35cd43dcb</anchor>
      <arglist>(cairo_t *cr, Color const &amp;c, Rectangle&lt; double &gt; const &amp;viewArea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClip</name>
      <anchorfile>cairo-helpers_8cc.html</anchorfile>
      <anchor>a7eaa96a970e5ff603afbea0a3a0bf761</anchor>
      <arglist>(cairo_t *cr, double x, double y, double width, double height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClip</name>
      <anchorfile>cairo-helpers_8cc.html</anchorfile>
      <anchor>a3e020736abbd708a58a1d53205ea33d3</anchor>
      <arglist>(cairo_t *cr, const Rectangle&lt; double &gt; &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRectangle</name>
      <anchorfile>cairo-helpers_8cc.html</anchorfile>
      <anchor>a4f46197f43bbf408ce995b3b0a428c68</anchor>
      <arglist>(cairo_t *cr, Color const &amp;c, Rectangle&lt; double &gt; const &amp;viewArea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawOutOfBoundsWithBackground</name>
      <anchorfile>cairo-helpers_8cc.html</anchorfile>
      <anchor>a91c102f9cd86a992dda65508f07d8c80</anchor>
      <arglist>(cairo_t *cr, Rectangle&lt; double &gt; const &amp;requestedPresentationArea, Rectangle&lt; double &gt; const &amp;actualPresentationArea, double pixelSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawOutOfBoundsWithBackgroundColor</name>
      <anchorfile>cairo-helpers_8cc.html</anchorfile>
      <anchor>a27002d3ab3abd3af027354f53c85bec7</anchor>
      <arglist>(cairo_t *cr, const Color &amp;background, Rectangle&lt; double &gt; const &amp;requestedPresentationArea, Rectangle&lt; double &gt; const &amp;actualPresentationArea, double pixelSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawOutOfBoundsWithoutBackground</name>
      <anchorfile>cairo-helpers_8cc.html</anchorfile>
      <anchor>a72b76dcfe2a11213e72c72dee13488d6</anchor>
      <arglist>(cairo_t *cr, Rectangle&lt; double &gt; const &amp;requestedPresentationArea, Rectangle&lt; double &gt; const &amp;actualPresentationArea, double pixelSize)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pixelSizeFromZoom</name>
      <anchorfile>cairo-helpers_8cc.html</anchorfile>
      <anchor>ac7a152a4cc864e9c67acbc6686a9d3a4</anchor>
      <arglist>(int zoom)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>IN_BOUNDS</name>
      <anchorfile>namespaceColors.html</anchorfile>
      <anchor>ac76689c847014b9df2670be51d618b00</anchor>
      <arglist>(1, 1, 1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>colormap-helpers.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/scroom/src/</path>
    <filename>colormap-helpers_8cc.html</filename>
    <includes id="color_8hh" name="color.hh" local="no" imported="no">scroom/color.hh</includes>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
  </compound>
  <compound kind="file">
    <name>presentationinterface.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/scroom/src/</path>
    <filename>presentationinterface_8cc.html</filename>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
  </compound>
  <compound kind="file">
    <name>showmetadata.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/scroom/src/</path>
    <filename>showmetadata_8cc.html</filename>
    <includes id="showmetadata_8hh" name="showmetadata.hh" local="no" imported="no">scroom/showmetadata.hh</includes>
    <class kind="struct">Scroom::Metadata::anonymous_namespace{showmetadata.cc}::MetaDataWindowData</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Metadata</namespace>
    <namespace>Scroom::Metadata::anonymous_namespace{showmetadata.cc}</namespace>
    <member kind="function">
      <type>GtkWidget *</type>
      <name>gtk_label_with_markup</name>
      <anchorfile>namespaceScroom_1_1Metadata_1_1anonymous__namespace_02showmetadata_8cc_03.html</anchorfile>
      <anchor>a8baf0999de5c8e17f5051b7087f90219</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>GtkWidget *</type>
      <name>addNewKeyToGrid</name>
      <anchorfile>namespaceScroom_1_1Metadata_1_1anonymous__namespace_02showmetadata_8cc_03.html</anchorfile>
      <anchor>a19d8ccee7f35235deb2483d465de5014</anchor>
      <arglist>(const GtkWidget *grid, GtkWidget *previousKey, const std::string &amp;keyText)</arglist>
    </member>
    <member kind="function">
      <type>GtkWidget *</type>
      <name>addNewValueToGrid</name>
      <anchorfile>namespaceScroom_1_1Metadata_1_1anonymous__namespace_02showmetadata_8cc_03.html</anchorfile>
      <anchor>a7103ae9eb13109a562cb1ebaa74a6531</anchor>
      <arglist>(const GtkWidget *grid, const std::string &amp;valueText, GtkWidget *key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addKeyAndValueToSizeGroup</name>
      <anchorfile>namespaceScroom_1_1Metadata_1_1anonymous__namespace_02showmetadata_8cc_03.html</anchorfile>
      <anchor>a24a89c6dd6a60001d1e7c00c21204caa</anchor>
      <arglist>(GtkWidget *key, GtkWidget *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_metadata_destroyed</name>
      <anchorfile>namespaceScroom_1_1Metadata_1_1anonymous__namespace_02showmetadata_8cc_03.html</anchorfile>
      <anchor>afaaa35bf934dc1911db8395244289b60</anchor>
      <arglist>(GtkWidget *, gpointer user_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showMetaData</name>
      <anchorfile>namespaceScroom_1_1Metadata.html</anchorfile>
      <anchor>a0e30bfa9bfb8d9471c0b6b7a9445b81a</anchor>
      <arglist>(GtkWindow *parent, std::string title, Metadata data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transformpresentation.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/scroom/src/</path>
    <filename>transformpresentation_8cc.html</filename>
    <includes id="color_8hh" name="color.hh" local="no" imported="no">scroom/color.hh</includes>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <includes id="pipettelayeroperations_8hh" name="pipettelayeroperations.hh" local="no" imported="no">scroom/pipettelayeroperations.hh</includes>
    <includes id="pipetteviewinterface_8hh" name="pipetteviewinterface.hh" local="no" imported="no">scroom/pipetteviewinterface.hh</includes>
    <includes id="point_8hh" name="point.hh" local="no" imported="no">scroom/point.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <includes id="transformpresentation_8hh" name="transformpresentation.hh" local="no" imported="no">scroom/transformpresentation.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <includes id="cairo-helpers_8hh" name="cairo-helpers.hh" local="yes" imported="no">scroom/cairo-helpers.hh</includes>
    <namespace>Detail</namespace>
  </compound>
  <compound kind="file">
    <name>colormaphelpers_test.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/scroom/test/</path>
    <filename>colormaphelpers__test_8cc.html</filename>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <class kind="struct">anonymous_namespace{colormaphelpers_test.cc}::Data</class>
    <namespace>anonymous_namespace{colormaphelpers_test.cc}</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceanonymous__namespace_02colormaphelpers__test_8cc_03.html</anchorfile>
      <anchor>aa70981b2344e37a14341b0b479916284</anchor>
      <arglist>(std::ostream &amp;os, const Data &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_REQUIRE</name>
      <anchorfile>colormaphelpers__test_8cc.html</anchorfile>
      <anchor>a14008efb9696827fb7c79e710cd108ec</anchor>
      <arglist>(originalColormap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CHECK_EQUAL</name>
      <anchorfile>colormaphelpers__test_8cc.html</anchorfile>
      <anchor>afcf7bee9df01428085e7e8c754e219f5</anchor>
      <arglist>(sample.expectedColors, originalColormap-&gt;colors.size())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_REQUIRE</name>
      <anchorfile>colormaphelpers__test_8cc.html</anchorfile>
      <anchor>af86275aead743f4f449df83d7a2056e7</anchor>
      <arglist>(colormap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CHECK_EQUAL</name>
      <anchorfile>colormaphelpers__test_8cc.html</anchorfile>
      <anchor>abe3038bd6c61349e16d00e8c3e3fd867</anchor>
      <arglist>(sample.expectedColors, colormap-&gt;colors.size())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CHECK_EQUAL</name>
      <anchorfile>colormaphelpers__test_8cc.html</anchorfile>
      <anchor>a6128400b8a4d53bbebdb879e5e593304</anchor>
      <arglist>(originalColormap, colormap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>colormaphelpers__test_8cc.html</anchorfile>
      <anchor>ab52dd2cbb5403920b178b66aa6f9279f</anchor>
      <arglist>(regular_colormaps_cant_have_their_colors_set)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>colormaphelpers__test_8cc.html</anchorfile>
      <anchor>aa180f3cb8c79d71012f873284057538c</anchor>
      <arglist>(monochrome_colormap_can_have_its_color_set)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>colormaphelpers__test_8cc.html</anchorfile>
      <anchor>a83871cdd51fd2db66008a9e051cfdaf1</anchor>
      <arglist>(inverted_monochrome_colormap_can_have_its_color_set)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>Blue</name>
      <anchorfile>namespaceanonymous__namespace_02colormaphelpers__test_8cc_03.html</anchorfile>
      <anchor>aa0b842d6fc89cf62b5042ef409096537</anchor>
      <arglist>(0, 0, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>accuracy</name>
      <anchorfile>namespaceanonymous__namespace_02colormaphelpers__test_8cc_03.html</anchorfile>
      <anchor>aa83cf2d27bfc2e17313700fba52bb700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; Data &gt;</type>
      <name>helpers</name>
      <anchorfile>namespaceanonymous__namespace_02colormaphelpers__test_8cc_03.html</anchorfile>
      <anchor>ac190d6a3142f07cfdcbcf63627042321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Colormap::Ptr</type>
      <name>colormap</name>
      <anchorfile>colormaphelpers__test_8cc.html</anchorfile>
      <anchor>a5875fa9b071171a68a4e9605246faf0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transformpresentation_test.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/scroom/test/</path>
    <filename>transformpresentation__test_8cc.html</filename>
    <includes id="bitmap-helpers_8hh" name="bitmap-helpers.hh" local="no" imported="no">scroom/bitmap-helpers.hh</includes>
    <includes id="dont-delete_8hh" name="dont-delete.hh" local="no" imported="no">scroom/dont-delete.hh</includes>
    <includes id="gmock_2presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/gmock/presentationinterface.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <includes id="transformpresentation_8hh" name="transformpresentation.hh" local="no" imported="no">scroom/transformpresentation.hh</includes>
    <member kind="function">
      <type>bool</type>
      <name>points_are_close</name>
      <anchorfile>transformpresentation__test_8cc.html</anchorfile>
      <anchor>a620a40d8b7004204196c9ac99dcfc811</anchor>
      <arglist>(Scroom::Utils::Point&lt; double &gt; const &amp;a, Scroom::Utils::Point&lt; double &gt; const &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rects_are_close</name>
      <anchorfile>transformpresentation__test_8cc.html</anchorfile>
      <anchor>af89367e1eca8a31753f6bbf9c7a5cd21</anchor>
      <arglist>(Scroom::Utils::Rectangle&lt; double &gt; const &amp;a, Scroom::Utils::Rectangle&lt; double &gt; const &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>transformpresentation__test_8cc.html</anchorfile>
      <anchor>afa39e2240697ef0604d44799f8ecb8cf</anchor>
      <arglist>(ViewInterface::WeakPtr const &amp;a, ViewInterface::WeakPtr const &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TEST</name>
      <anchorfile>transformpresentation__test_8cc.html</anchorfile>
      <anchor>a0e2a0fb63e2a776c9c8034080e623ca1</anchor>
      <arglist>(TransformPresentation_Tests, TransformationData_supports_aspect_ratio)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>async-deleter.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/inc/scroom/</path>
    <filename>async-deleter_8hh.html</filename>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <class kind="class">AsyncDeleter</class>
    <namespace>Detail</namespace>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Detail</namespace>
    <namespace>Scroom::Detail::ThreadPool</namespace>
    <member kind="function">
      <type>void</type>
      <name>call_delete</name>
      <anchorfile>namespaceDetail.html</anchorfile>
      <anchor>ade7e310c6f49be3b6e0ded45bd574f9b</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type>::ThreadPool::Ptr</type>
      <name>getDeleter</name>
      <anchorfile>namespaceScroom_1_1Detail_1_1ThreadPool.html</anchorfile>
      <anchor>adbdff2f494948417786589c465d0644a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>function-additor.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/inc/scroom/</path>
    <filename>function-additor_8hh.html</filename>
    <class kind="class">Scroom::Detail::ThreadPool::FunctionAdditor</class>
    <class kind="class">Scroom::Detail::ThreadPool::FunctionMultiplier</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Detail</namespace>
    <namespace>Scroom::Detail::ThreadPool</namespace>
    <member kind="function">
      <type>Scroom::Detail::ThreadPool::FunctionAdditor</type>
      <name>operator+</name>
      <anchorfile>function-additor_8hh.html</anchorfile>
      <anchor>a54543a0f312bd6204c781d225ba2f936</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;f1, boost::function&lt; void()&gt; const &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Detail::ThreadPool::FunctionAdditor &amp;</type>
      <name>operator+</name>
      <anchorfile>function-additor_8hh.html</anchorfile>
      <anchor>ac306eca838a044f8df0c651312876512</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;f1, Scroom::Detail::ThreadPool::FunctionAdditor &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Detail::ThreadPool::FunctionMultiplier &amp;</type>
      <name>operator*</name>
      <anchorfile>function-additor_8hh.html</anchorfile>
      <anchor>a63ec6fe115c447af16c04da33d291ca5</anchor>
      <arglist>(unsigned int i, Scroom::Detail::ThreadPool::FunctionMultiplier &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Detail::ThreadPool::FunctionMultiplier</type>
      <name>operator*</name>
      <anchorfile>function-additor_8hh.html</anchorfile>
      <anchor>af8f5a0d33cea536712458f4e2cace540</anchor>
      <arglist>(unsigned int i, boost::function&lt; void()&gt; const &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Detail::ThreadPool::FunctionMultiplier</type>
      <name>operator*</name>
      <anchorfile>function-additor_8hh.html</anchorfile>
      <anchor>a7a5ae2e0b320fe1c0cc39f8c57eeb0eb</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;f, unsigned int i)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>threadpoolimpl.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/inc/scroom/impl/</path>
    <filename>threadpoolimpl_8hh.html</filename>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <namespace>Detail</namespace>
    <member kind="function">
      <type>R</type>
      <name>threadPoolExecute</name>
      <anchorfile>namespaceDetail.html</anchorfile>
      <anchor>aa88799fa3c308f1c905a094e2555a26b</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>semaphore.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/inc/scroom/</path>
    <filename>semaphore_8hh.html</filename>
    <class kind="class">Scroom::Semaphore</class>
    <namespace>Scroom</namespace>
  </compound>
  <compound kind="file">
    <name>threadpool.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/inc/scroom/</path>
    <filename>threadpool_8hh.html</filename>
    <includes id="semaphore_8hh" name="semaphore.hh" local="no" imported="no">scroom/semaphore.hh</includes>
    <includes id="threadpoolimpl_8hh" name="threadpoolimpl.hh" local="no" imported="no">scroom/impl/threadpoolimpl.hh</includes>
    <class kind="class">ThreadPool</class>
    <class kind="class">ThreadPool::Queue</class>
    <class kind="class">ThreadPool::WeakQueue</class>
    <class kind="struct">ThreadPool::Job</class>
    <class kind="class">ThreadPool::PrivateData</class>
    <class kind="class">QueueJumper</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Detail</namespace>
    <namespace>Scroom::Detail::ThreadPool</namespace>
    <member kind="enumvalue">
      <name>PRIO_HIGHEST</name>
      <anchorfile>threadpool_8hh.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a9c607c121a82da3abd2b000e0e0d837f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIO_HIGHER</name>
      <anchorfile>threadpool_8hh.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7ae794fc830a89160a4e51d90ec59cf494</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIO_HIGH</name>
      <anchorfile>threadpool_8hh.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7ac0989e0aa23aaef4f0dd60b30b407e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIO_NORMAL</name>
      <anchorfile>threadpool_8hh.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7af88484ad6458c0b4069eefb62dc51c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIO_LOW</name>
      <anchorfile>threadpool_8hh.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7acaeeec8b8bc1903d3f7cac497584bfa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIO_LOWER</name>
      <anchorfile>threadpool_8hh.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a8b39589f53f22ae32cb72a828429db59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRIO_LOWEST</name>
      <anchorfile>threadpool_8hh.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7ae1e7bd17086c6462b6a320e199cbbcf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ThreadPool::Ptr</type>
      <name>CpuBound</name>
      <anchorfile>threadpool_8hh.html</anchorfile>
      <anchor>a4a99c6a6be48be73a9ecf92e6e3f6e9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ThreadPool::Ptr</type>
      <name>Sequentially</name>
      <anchorfile>threadpool_8hh.html</anchorfile>
      <anchor>af979353165a7a214dda8f7f289de81ea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>async-deleter.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/src/</path>
    <filename>async-deleter_8cc.html</filename>
    <includes id="async-deleter_8hh" name="async-deleter.hh" local="no" imported="no">scroom/async-deleter.hh</includes>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Detail</namespace>
    <namespace>Scroom::Detail::ThreadPool</namespace>
    <member kind="function">
      <type>::ThreadPool::Ptr</type>
      <name>getDeleter</name>
      <anchorfile>namespaceScroom_1_1Detail_1_1ThreadPool.html</anchorfile>
      <anchor>adbdff2f494948417786589c465d0644a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>function-additor.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/src/</path>
    <filename>function-additor_8cc.html</filename>
    <includes id="function-additor_8hh" name="function-additor.hh" local="no" imported="no">scroom/function-additor.hh</includes>
    <member kind="function">
      <type>Scroom::Detail::ThreadPool::FunctionAdditor</type>
      <name>operator+</name>
      <anchorfile>function-additor_8cc.html</anchorfile>
      <anchor>a54543a0f312bd6204c781d225ba2f936</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;f1, boost::function&lt; void()&gt; const &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Detail::ThreadPool::FunctionAdditor &amp;</type>
      <name>operator+</name>
      <anchorfile>function-additor_8cc.html</anchorfile>
      <anchor>ac306eca838a044f8df0c651312876512</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;f1, Scroom::Detail::ThreadPool::FunctionAdditor &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Detail::ThreadPool::FunctionMultiplier &amp;</type>
      <name>operator*</name>
      <anchorfile>function-additor_8cc.html</anchorfile>
      <anchor>a63ec6fe115c447af16c04da33d291ca5</anchor>
      <arglist>(unsigned int i, Scroom::Detail::ThreadPool::FunctionMultiplier &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Detail::ThreadPool::FunctionMultiplier</type>
      <name>operator*</name>
      <anchorfile>function-additor_8cc.html</anchorfile>
      <anchor>af8f5a0d33cea536712458f4e2cace540</anchor>
      <arglist>(unsigned int i, boost::function&lt; void()&gt; const &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Detail::ThreadPool::FunctionMultiplier</type>
      <name>operator*</name>
      <anchorfile>function-additor_8cc.html</anchorfile>
      <anchor>a7a5ae2e0b320fe1c0cc39f8c57eeb0eb</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;f, unsigned int i)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>queue.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/src/</path>
    <filename>queue_8cc.html</filename>
    <includes id="queue_8hh" name="queue.hh" local="yes" imported="no">queue.hh</includes>
  </compound>
  <compound kind="file">
    <name>queue.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/src/</path>
    <filename>queue_8hh.html</filename>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <class kind="class">Scroom::Detail::ThreadPool::QueueImpl</class>
    <class kind="class">Scroom::Detail::ThreadPool::QueueLock</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Detail</namespace>
    <namespace>Scroom::Detail::ThreadPool</namespace>
  </compound>
  <compound kind="file">
    <name>threadpoolimpl.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/src/</path>
    <filename>threadpoolimpl_8cc.html</filename>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
    <includes id="async-deleter_8hh" name="async-deleter.hh" local="no" imported="no">scroom/async-deleter.hh</includes>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="queue_8hh" name="queue.hh" local="yes" imported="no">queue.hh</includes>
    <class kind="class">anonymous_namespace{threadpoolimpl.cc}::ThreadList</class>
    <class kind="class">anonymous_namespace{threadpoolimpl.cc}::ThreadWaiter</class>
    <namespace>anonymous_namespace{threadpoolimpl.cc}</namespace>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>NotifyThreadList</name>
      <anchorfile>namespaceanonymous__namespace_02threadpoolimpl_8cc_03.html</anchorfile>
      <anchor>a35f73b3d9bd57b7e8ee264607fc753a4</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; t, const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>ThreadPool::Ptr</type>
      <name>CpuBound</name>
      <anchorfile>threadpoolimpl_8cc.html</anchorfile>
      <anchor>a4a99c6a6be48be73a9ecf92e6e3f6e9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ThreadPool::Ptr</type>
      <name>Sequentially</name>
      <anchorfile>threadpoolimpl_8cc.html</anchorfile>
      <anchor>af979353165a7a214dda8f7f289de81ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ThreadWaiter</type>
      <name>waiter</name>
      <anchorfile>namespaceanonymous__namespace_02threadpoolimpl_8cc_03.html</anchorfile>
      <anchor>a32b816d0a8f58ae1cd2d35e52e0b93ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>async-deleter-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/test/</path>
    <filename>async-deleter-tests_8cc.html</filename>
    <includes id="async-deleter_8hh" name="async-deleter.hh" local="no" imported="no">scroom/async-deleter.hh</includes>
    <includes id="function-additor_8hh" name="function-additor.hh" local="no" imported="no">scroom/function-additor.hh</includes>
    <includes id="semaphore_8hh" name="semaphore.hh" local="no" imported="no">scroom/semaphore.hh</includes>
    <includes id="helpers_8hh" name="helpers.hh" local="yes" imported="no">helpers.hh</includes>
    <class kind="class">A</class>
    <member kind="function" static="yes">
      <type>static const millisec</type>
      <name>short_timeout</name>
      <anchorfile>async-deleter-tests_8cc.html</anchorfile>
      <anchor>a41e9098c348f76ca843af2f0c7a779b9</anchor>
      <arglist>(250)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const millisec</type>
      <name>long_timeout</name>
      <anchorfile>async-deleter-tests_8cc.html</anchorfile>
      <anchor>a2c41b2581cb1d99d7e2aea66460232b9</anchor>
      <arglist>(2000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>async-deleter-tests_8cc.html</anchorfile>
      <anchor>a189f47301e4388801084e3baaa43de1c</anchor>
      <arglist>(deleter_deletes_asynchronously)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>function-additor-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/test/</path>
    <filename>function-additor-tests_8cc.html</filename>
    <includes id="function-additor_8hh" name="function-additor.hh" local="no" imported="no">scroom/function-additor.hh</includes>
    <includes id="semaphore_8hh" name="semaphore.hh" local="no" imported="no">scroom/semaphore.hh</includes>
    <includes id="helpers_8hh" name="helpers.hh" local="yes" imported="no">helpers.hh</includes>
    <member kind="function" static="yes">
      <type>static const millisec</type>
      <name>short_timeout</name>
      <anchorfile>function-additor-tests_8cc.html</anchorfile>
      <anchor>a41e9098c348f76ca843af2f0c7a779b9</anchor>
      <arglist>(250)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const millisec</type>
      <name>long_timeout</name>
      <anchorfile>function-additor-tests_8cc.html</anchorfile>
      <anchor>a2c41b2581cb1d99d7e2aea66460232b9</anchor>
      <arglist>(2000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>function-additor-tests_8cc.html</anchorfile>
      <anchor>a8c6b64a6ebacf136da7168a1e15b63a3</anchor>
      <arglist>(clear_clears)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>function-additor-tests_8cc.html</anchorfile>
      <anchor>a0006dee6ef85946d9b539537f251f557</anchor>
      <arglist>(pass_passes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>function-additor-tests_8cc.html</anchorfile>
      <anchor>a8e7ec4eefd42a7ba74a4deea4a1cf5b6</anchor>
      <arglist>(destroy_destroys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>function-additor-tests_8cc.html</anchorfile>
      <anchor>ae7a4a979f54df181e4a1f2f947c1846d</anchor>
      <arglist>(additor_adds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>function-additor-tests_8cc.html</anchorfile>
      <anchor>ae52b44e71b0b2ccdbcefafc336a9d102</anchor>
      <arglist>(order_is_preserved)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>function-additor-tests_8cc.html</anchorfile>
      <anchor>ae65ec93d9d3a840799452ef33ffeae51</anchor>
      <arglist>(left_association)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>function-additor-tests_8cc.html</anchorfile>
      <anchor>a458abdb43d91b02aa49de9c70ff1d577</anchor>
      <arglist>(right_association)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>function-additor-tests_8cc.html</anchorfile>
      <anchor>ad1ce833692225b9ed8153fd66b37b470</anchor>
      <arglist>(Multiplier_multiplies)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>function-additor-tests_8cc.html</anchorfile>
      <anchor>a8adc87885e022f00c7246cc6a9f23cad</anchor>
      <arglist>(Test_If_Expressions_Compile)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>helpers.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/test/</path>
    <filename>helpers_8cc.html</filename>
    <includes id="helpers_8hh" name="helpers.hh" local="yes" imported="no">helpers.hh</includes>
    <includes id="semaphore_8hh" name="semaphore.hh" local="no" imported="no">scroom/semaphore.hh</includes>
    <namespace>anonymous_namespace{helpers.cc}</namespace>
    <member kind="function">
      <type>boost::function&lt; void()&gt;</type>
      <name>pass</name>
      <anchorfile>helpers_8cc.html</anchorfile>
      <anchor>a265d001f12a52b5613c4ee52075e536d</anchor>
      <arglist>(Semaphore *s)</arglist>
    </member>
    <member kind="function">
      <type>boost::function&lt; void()&gt;</type>
      <name>clear</name>
      <anchorfile>helpers_8cc.html</anchorfile>
      <anchor>a66ff7f37fdae1af04806f788e9e8bc68</anchor>
      <arglist>(Semaphore *s)</arglist>
    </member>
    <member kind="function">
      <type>boost::function&lt; void()&gt;</type>
      <name>destroy</name>
      <anchorfile>helpers_8cc.html</anchorfile>
      <anchor>abf1026f40ea5c3b59caa3a76326a1079</anchor>
      <arglist>(std::shared_ptr&lt; void &gt; &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>helpers.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/test/</path>
    <filename>helpers_8hh.html</filename>
    <includes id="semaphore_8hh" name="semaphore.hh" local="no" imported="no">scroom/semaphore.hh</includes>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <member kind="function">
      <type>boost::function&lt; void()&gt;</type>
      <name>pass</name>
      <anchorfile>helpers_8hh.html</anchorfile>
      <anchor>a265d001f12a52b5613c4ee52075e536d</anchor>
      <arglist>(Semaphore *s)</arglist>
    </member>
    <member kind="function">
      <type>boost::function&lt; void()&gt;</type>
      <name>clear</name>
      <anchorfile>helpers_8hh.html</anchorfile>
      <anchor>a66ff7f37fdae1af04806f788e9e8bc68</anchor>
      <arglist>(Semaphore *s)</arglist>
    </member>
    <member kind="function">
      <type>boost::function&lt; void()&gt;</type>
      <name>destroy</name>
      <anchorfile>helpers_8hh.html</anchorfile>
      <anchor>abf1026f40ea5c3b59caa3a76326a1079</anchor>
      <arglist>(std::shared_ptr&lt; void &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>boost::function&lt; void()&gt;</type>
      <name>destroy</name>
      <anchorfile>helpers_8hh.html</anchorfile>
      <anchor>a07108a1c2fd1b98c70b3d99afb8ae1cc</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>semaphore-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/test/</path>
    <filename>semaphore-tests_8cc.html</filename>
    <includes id="function-additor_8hh" name="function-additor.hh" local="no" imported="no">scroom/function-additor.hh</includes>
    <includes id="semaphore_8hh" name="semaphore.hh" local="no" imported="no">scroom/semaphore.hh</includes>
    <includes id="helpers_8hh" name="helpers.hh" local="yes" imported="no">helpers.hh</includes>
    <member kind="function">
      <type>void</type>
      <name>test_count_equals</name>
      <anchorfile>semaphore-tests_8cc.html</anchorfile>
      <anchor>a08b2a90dedf45bbb1824b257c5921d7b</anchor>
      <arglist>(Semaphore *s, int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>semaphore-tests_8cc.html</anchorfile>
      <anchor>abbc3f7b015814d14f6833c4ac4c1c925</anchor>
      <arglist>(try_P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>semaphore-tests_8cc.html</anchorfile>
      <anchor>a1caa4da4d247a97ce5dbb68b694fd247</anchor>
      <arglist>(count_equals_0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>semaphore-tests_8cc.html</anchorfile>
      <anchor>a1918b44df10af8e587e05feaa32361a5</anchor>
      <arglist>(count_equals_1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>semaphore-tests_8cc.html</anchorfile>
      <anchor>a3d1ff80fe291d391ab20e1e58cf04782</anchor>
      <arglist>(count_equals_2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>semaphore-tests_8cc.html</anchorfile>
      <anchor>a378b159a17574a9b0ce51655987f39dc</anchor>
      <arglist>(inc_count_1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>semaphore-tests_8cc.html</anchorfile>
      <anchor>a71e789844b921fda5b44feed22feb237</anchor>
      <arglist>(inc_count_2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>semaphore-tests_8cc.html</anchorfile>
      <anchor>acd59f06086981563bb36d16e5df44251</anchor>
      <arglist>(inc_count_3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>semaphore-tests_8cc.html</anchorfile>
      <anchor>abbe95292f996eba8dd759d8e9c19845c</anchor>
      <arglist>(pass_many)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>semaphore-tests_8cc.html</anchorfile>
      <anchor>ab98f1564bec2173b8563095753590360</anchor>
      <arglist>(p_with_timeout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>semaphore-tests_8cc.html</anchorfile>
      <anchor>ae066b1f8a9124b06dfc6d395cc229ea0</anchor>
      <arglist>(p_without_timeout)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>threadpool-destruction-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/test/</path>
    <filename>threadpool-destruction-tests_8cc.html</filename>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="function-additor_8hh" name="function-additor.hh" local="no" imported="no">scroom/function-additor.hh</includes>
    <includes id="semaphore_8hh" name="semaphore.hh" local="no" imported="no">scroom/semaphore.hh</includes>
    <includes id="helpers_8hh" name="helpers.hh" local="yes" imported="no">helpers.hh</includes>
    <member kind="function">
      <type>const millisec</type>
      <name>short_timeout</name>
      <anchorfile>threadpool-destruction-tests_8cc.html</anchorfile>
      <anchor>a0c7f3b7acbda77ed7e72c41028f253e4</anchor>
      <arglist>(250)</arglist>
    </member>
    <member kind="function">
      <type>const millisec</type>
      <name>long_timeout</name>
      <anchorfile>threadpool-destruction-tests_8cc.html</anchorfile>
      <anchor>acf1a301c89fe656d5f69f8f61b90536f</anchor>
      <arglist>(2000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-destruction-tests_8cc.html</anchorfile>
      <anchor>a40608cd013e10b2b821917052ba322a0</anchor>
      <arglist>(destroy_threadpool_with_nonempty_queue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-destruction-tests_8cc.html</anchorfile>
      <anchor>a26a1f6cc76238d5c47e076c6a5fa6df8</anchor>
      <arglist>(destroy_threadpool_with_nonempty_queue_with_completeAllJobsBeforeDestruction_true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>threadpool-queue-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/test/</path>
    <filename>threadpool-queue-tests_8cc.html</filename>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="function-additor_8hh" name="function-additor.hh" local="no" imported="no">scroom/function-additor.hh</includes>
    <includes id="semaphore_8hh" name="semaphore.hh" local="no" imported="no">scroom/semaphore.hh</includes>
    <includes id="helpers_8hh" name="helpers.hh" local="yes" imported="no">helpers.hh</includes>
    <includes id="queue_8hh" name="queue.hh" local="yes" imported="no">queue.hh</includes>
    <member kind="function">
      <type>const millisec</type>
      <name>short_timeout</name>
      <anchorfile>threadpool-queue-tests_8cc.html</anchorfile>
      <anchor>a0c7f3b7acbda77ed7e72c41028f253e4</anchor>
      <arglist>(250)</arglist>
    </member>
    <member kind="function">
      <type>const millisec</type>
      <name>long_timeout</name>
      <anchorfile>threadpool-queue-tests_8cc.html</anchorfile>
      <anchor>acf1a301c89fe656d5f69f8f61b90536f</anchor>
      <arglist>(2000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-queue-tests_8cc.html</anchorfile>
      <anchor>a13c62a1444abcfa534b3eb6d40ffa6ee</anchor>
      <arglist>(basic_jobcounting)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-queue-tests_8cc.html</anchorfile>
      <anchor>a19f79a61b0b0f31a00c787e9559f10fb</anchor>
      <arglist>(destroy_waits_for_jobs_to_finish)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-queue-tests_8cc.html</anchorfile>
      <anchor>a04231cfc630be721800047883ee3c782</anchor>
      <arglist>(destroy_using_QueueLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-queue-tests_8cc.html</anchorfile>
      <anchor>a0d4f204c75475eb98c0c6771248335dc</anchor>
      <arglist>(jobs_on_custom_queue_get_executed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-queue-tests_8cc.html</anchorfile>
      <anchor>a683244d5c851ef231aa4edc517b11db4</anchor>
      <arglist>(jobs_on_deleted_queue_dont_get_executed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-queue-tests_8cc.html</anchorfile>
      <anchor>aa92af8fffe2b00a2b9a5ae184f852ee2</anchor>
      <arglist>(queue_deletion_waits_for_jobs_to_finish)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>threadpool-queueimpl-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/test/</path>
    <filename>threadpool-queueimpl-tests_8cc.html</filename>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="semaphore_8hh" name="semaphore.hh" local="no" imported="no">scroom/semaphore.hh</includes>
    <includes id="helpers_8hh" name="helpers.hh" local="yes" imported="no">helpers.hh</includes>
    <member kind="function">
      <type>const millisec</type>
      <name>short_timeout</name>
      <anchorfile>threadpool-queueimpl-tests_8cc.html</anchorfile>
      <anchor>a0c7f3b7acbda77ed7e72c41028f253e4</anchor>
      <arglist>(250)</arglist>
    </member>
    <member kind="function">
      <type>const millisec</type>
      <name>long_timeout</name>
      <anchorfile>threadpool-queueimpl-tests_8cc.html</anchorfile>
      <anchor>acf1a301c89fe656d5f69f8f61b90536f</anchor>
      <arglist>(2000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-queueimpl-tests_8cc.html</anchorfile>
      <anchor>a5b32ceeab55ba1ffe0a438c212145634</anchor>
      <arglist>(queueimpl_jobs_get_executed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-queueimpl-tests_8cc.html</anchorfile>
      <anchor>a4d97facaccdf79d0c1260ddb11abf20d</anchor>
      <arglist>(queueimpl_jobs_with_deleted_queue_can_be_scheduled_and_dont_get_executed)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>threadpool-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/threadpool/test/</path>
    <filename>threadpool-tests_8cc.html</filename>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="function-additor_8hh" name="function-additor.hh" local="no" imported="no">scroom/function-additor.hh</includes>
    <includes id="semaphore_8hh" name="semaphore.hh" local="no" imported="no">scroom/semaphore.hh</includes>
    <includes id="helpers_8hh" name="helpers.hh" local="yes" imported="no">helpers.hh</includes>
    <class kind="class">A</class>
    <class kind="class">B</class>
    <member kind="function">
      <type>const millisec</type>
      <name>short_timeout</name>
      <anchorfile>threadpool-tests_8cc.html</anchorfile>
      <anchor>a0c7f3b7acbda77ed7e72c41028f253e4</anchor>
      <arglist>(250)</arglist>
    </member>
    <member kind="function">
      <type>const millisec</type>
      <name>long_timeout</name>
      <anchorfile>threadpool-tests_8cc.html</anchorfile>
      <anchor>acf1a301c89fe656d5f69f8f61b90536f</anchor>
      <arglist>(2000)</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>no_op</name>
      <anchorfile>threadpool-tests_8cc.html</anchorfile>
      <anchor>abc8d36c4d1d17b772ee624f93cb52ce7</anchor>
      <arglist>(Semaphore *s, R result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_at_least_n_threads</name>
      <anchorfile>threadpool-tests_8cc.html</anchorfile>
      <anchor>a0b21271f8e664b28e1ebb8638ec13d75</anchor>
      <arglist>(ThreadPool *pool, int count_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_exactly_n_threads</name>
      <anchorfile>threadpool-tests_8cc.html</anchorfile>
      <anchor>afed1d9f0b7b77d5594eefec825c3104f</anchor>
      <arglist>(ThreadPool *pool, int count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-tests_8cc.html</anchorfile>
      <anchor>abd1dd5f662717ece92f17097e5513968</anchor>
      <arglist>(work_gets_done)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-tests_8cc.html</anchorfile>
      <anchor>a518fe0910b6bef34b3b9fc28ff849354</anchor>
      <arglist>(work_gets_done_by_prio)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-tests_8cc.html</anchorfile>
      <anchor>a3077976e3d1fe33bf001879cd635fb80</anchor>
      <arglist>(construct_0_threads)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-tests_8cc.html</anchorfile>
      <anchor>a11d8db969b646c84943088577dfeaec4</anchor>
      <arglist>(construct_1_threads)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-tests_8cc.html</anchorfile>
      <anchor>aa3ea635fa0fd7cbd8c8d6a099a3624cc</anchor>
      <arglist>(construct_2_threads)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-tests_8cc.html</anchorfile>
      <anchor>a8602795b76cefd1333c30fc39110c6ea</anchor>
      <arglist>(schedule_shared_pointer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-tests_8cc.html</anchorfile>
      <anchor>af8a75afb47662e6e3d5c6bb605f85a7f</anchor>
      <arglist>(schedule_future)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-tests_8cc.html</anchorfile>
      <anchor>aa997a1e913fe62cf7e70b838a5e777f6</anchor>
      <arglist>(schedule_shared_pointer_with_future)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>threadpool-tests_8cc.html</anchorfile>
      <anchor>ae2c7f76a8c075a0d62e14e240c66c7ad</anchor>
      <arglist>(verify_threadcount)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>layeroperations.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/inc/scroom/</path>
    <filename>layeroperations_8hh.html</filename>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <includes id="pipettelayeroperations_8hh" name="pipettelayeroperations.hh" local="no" imported="no">scroom/pipettelayeroperations.hh</includes>
    <includes id="tiledbitmapinterface_8hh" name="tiledbitmapinterface.hh" local="no" imported="no">scroom/tiledbitmapinterface.hh</includes>
    <class kind="class">CommonOperations</class>
    <class kind="class">PipetteCommonOperationsCMYK</class>
    <class kind="class">PipetteCommonOperationsRGB</class>
    <class kind="class">Operations1bpp</class>
    <class kind="class">Operations8bpp</class>
    <class kind="class">Operations24bpp</class>
    <class kind="class">Operations</class>
    <class kind="class">OperationsColormapped</class>
    <class kind="class">Operations1bppClipped</class>
    <class kind="class">OperationsCMYK32</class>
    <class kind="class">OperationsCMYK16</class>
    <class kind="class">OperationsCMYK8</class>
    <class kind="class">OperationsCMYK4</class>
  </compound>
  <compound kind="file">
    <name>tile.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/inc/scroom/</path>
    <filename>tile_8hh.html</filename>
    <includes id="global_8hh" name="global.hh" local="no" imported="no">scroom/global.hh</includes>
    <includes id="memoryblobs_8hh" name="memoryblobs.hh" local="no" imported="no">scroom/memoryblobs.hh</includes>
    <class kind="class">Tile</class>
    <class kind="class">ConstTile</class>
  </compound>
  <compound kind="file">
    <name>tiledbitmapinterface.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/inc/scroom/</path>
    <filename>tiledbitmapinterface_8hh.html</filename>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <includes id="scroominterface_8hh" name="scroominterface.hh" local="no" imported="no">scroom/scroominterface.hh</includes>
    <includes id="stuff_8hh" name="stuff.hh" local="no" imported="no">scroom/stuff.hh</includes>
    <includes id="tile_8hh" name="tile.hh" local="no" imported="no">scroom/tile.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <class kind="class">LayerOperations</class>
    <class kind="class">SourcePresentation</class>
    <class kind="class">TiledBitmapInterface</class>
    <member kind="typedef">
      <type>std::vector&lt; LayerOperations::Ptr &gt;</type>
      <name>LayerSpec</name>
      <anchorfile>tiledbitmapinterface_8hh.html</anchorfile>
      <anchor>a00279dcefa7f911f75fec39af1d48e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TileState</name>
      <anchorfile>tiledbitmapinterface_8hh.html</anchorfile>
      <anchor>ac84d9b534c1947f639684269d09f7921</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TILE_UNINITIALIZED</name>
      <anchorfile>tiledbitmapinterface_8hh.html</anchorfile>
      <anchor>ac84d9b534c1947f639684269d09f7921af2a7a5d5623523d6e2039ec00fec0239</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TILE_UNLOADED</name>
      <anchorfile>tiledbitmapinterface_8hh.html</anchorfile>
      <anchor>ac84d9b534c1947f639684269d09f7921a2b0ca8c75e0afe97b00e5180a0db7898</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TILE_LOADED</name>
      <anchorfile>tiledbitmapinterface_8hh.html</anchorfile>
      <anchor>ac84d9b534c1947f639684269d09f7921a50319f02eabe9ac914a3183d86555e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TILE_OUT_OF_BOUNDS</name>
      <anchorfile>tiledbitmapinterface_8hh.html</anchorfile>
      <anchor>ac84d9b534c1947f639684269d09f7921af9af66a665a3524fc0d049fc669b2d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TiledBitmapInterface::Ptr</type>
      <name>createTiledBitmap</name>
      <anchorfile>tiledbitmapinterface_8hh.html</anchorfile>
      <anchor>afb81a705ea3c38444cb0f4fb12410f43</anchor>
      <arglist>(int bitmapWidth, int bitmapHeight, LayerSpec const &amp;ls)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tiledbitmaplayer.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/inc/scroom/</path>
    <filename>tiledbitmaplayer_8hh.html</filename>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <includes id="memoryblobs_8hh" name="memoryblobs.hh" local="no" imported="no">scroom/memoryblobs.hh</includes>
    <includes id="observable_8hh" name="observable.hh" local="no" imported="no">scroom/observable.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <includes id="stuff_8hh" name="stuff.hh" local="no" imported="no">scroom/stuff.hh</includes>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="tile_8hh" name="tile.hh" local="no" imported="no">scroom/tile.hh</includes>
    <includes id="tiledbitmapinterface_8hh" name="tiledbitmapinterface.hh" local="no" imported="no">scroom/tiledbitmapinterface.hh</includes>
    <class kind="class">TileInitialisationObserver</class>
    <class kind="class">TileLoadingObserver</class>
    <class kind="class">CompressedTile</class>
    <class kind="class">Layer</class>
    <member kind="define">
      <type>#define</type>
      <name>TILESIZE</name>
      <anchorfile>tiledbitmaplayer_8hh.html</anchorfile>
      <anchor>a07ae61ed7dc31e9cddbdf9da244567c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CompressedTile::Ptr &gt;</type>
      <name>CompressedTileLine</name>
      <anchorfile>tiledbitmaplayer_8hh.html</anchorfile>
      <anchor>a3902e4a779f862590474adb2068255b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CompressedTileLine &gt;</type>
      <name>CompressedTileGrid</name>
      <anchorfile>tiledbitmaplayer_8hh.html</anchorfile>
      <anchor>a6a439d385552614de1a0814da3706395</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TileStateInternal</name>
      <anchorfile>tiledbitmaplayer_8hh.html</anchorfile>
      <anchor>a4f52bb8f2d5da2afbcf302a471a7aa22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSI_UNINITIALIZED</name>
      <anchorfile>tiledbitmaplayer_8hh.html</anchorfile>
      <anchor>a4f52bb8f2d5da2afbcf302a471a7aa22ae99ee9bf993a2c1567b467958e9eeb6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSI_NORMAL</name>
      <anchorfile>tiledbitmaplayer_8hh.html</anchorfile>
      <anchor>a4f52bb8f2d5da2afbcf302a471a7aa22a4b56dcafb8b31b416ac0a8ceaa7708a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSI_OUT_OF_BOUNDS</name>
      <anchorfile>tiledbitmaplayer_8hh.html</anchorfile>
      <anchor>a4f52bb8f2d5da2afbcf302a471a7aa22a5a84d269a576456f9a8a1771672325a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSI_LOADING_SYNCHRONOUSLY</name>
      <anchorfile>tiledbitmaplayer_8hh.html</anchorfile>
      <anchor>a4f52bb8f2d5da2afbcf302a471a7aa22acc1ed62bf86ee908bdf3b3d087e9287c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSI_LOADING_ASYNCHRONOUSLY</name>
      <anchorfile>tiledbitmaplayer_8hh.html</anchorfile>
      <anchor>a4f52bb8f2d5da2afbcf302a471a7aa22a8257ad7491d95b6798756ab4058d7e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cmyklayeroperations.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>cmyklayeroperations_8cc.html</filename>
    <includes id="bitmap-helpers_8hh" name="bitmap-helpers.hh" local="no" imported="no">scroom/bitmap-helpers.hh</includes>
    <includes id="global_8hh" name="global.hh" local="no" imported="no">scroom/global.hh</includes>
    <includes id="layeroperations_8hh" name="layeroperations.hh" local="no" imported="no">scroom/layeroperations.hh</includes>
    <includes id="memoryblobs_8hh" name="memoryblobs.hh" local="no" imported="no">scroom/memoryblobs.hh</includes>
    <includes id="stuff_8hh" name="stuff.hh" local="no" imported="no">scroom/stuff.hh</includes>
    <includes id="tile_8hh" name="tile.hh" local="no" imported="no">scroom/tile.hh</includes>
  </compound>
  <compound kind="file">
    <name>compressedtile.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>compressedtile_8cc.html</filename>
    <includes id="tiledbitmaplayer_8hh" name="tiledbitmaplayer.hh" local="no" imported="no">scroom/tiledbitmaplayer.hh</includes>
    <includes id="local_8hh" name="local.hh" local="yes" imported="no">local.hh</includes>
    <includes id="tileviewstate_8hh" name="tileviewstate.hh" local="yes" imported="no">tileviewstate.hh</includes>
  </compound>
  <compound kind="file">
    <name>layer.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>layer_8cc.html</filename>
    <includes id="threadpoolimpl_8hh" name="threadpoolimpl.hh" local="no" imported="no">scroom/impl/threadpoolimpl.hh</includes>
    <includes id="memoryblobs_8hh" name="memoryblobs.hh" local="no" imported="no">scroom/memoryblobs.hh</includes>
    <includes id="stuff_8hh" name="stuff.hh" local="no" imported="no">scroom/stuff.hh</includes>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="tile_8hh" name="tile.hh" local="no" imported="no">scroom/tile.hh</includes>
    <includes id="tiledbitmapinterface_8hh" name="tiledbitmapinterface.hh" local="no" imported="no">scroom/tiledbitmapinterface.hh</includes>
    <includes id="tiledbitmaplayer_8hh" name="tiledbitmaplayer.hh" local="no" imported="no">scroom/tiledbitmaplayer.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <includes id="local_8hh" name="local.hh" local="yes" imported="no">local.hh</includes>
    <class kind="class">DataFetcher</class>
    <member kind="function" static="yes">
      <type>static Scroom::MemoryBlobs::PageProvider::Ptr</type>
      <name>createProvider</name>
      <anchorfile>layer_8cc.html</anchorfile>
      <anchor>a84bb171aac649efd1dab4f77373d08a4</anchor>
      <arglist>(double width, double height, int bpp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>layercoordinator.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>layercoordinator_8cc.html</filename>
    <includes id="layercoordinator_8hh" name="layercoordinator.hh" local="yes" imported="no">layercoordinator.hh</includes>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="tiledbitmaplayer_8hh" name="tiledbitmaplayer.hh" local="no" imported="no">scroom/tiledbitmaplayer.hh</includes>
    <includes id="local_8hh" name="local.hh" local="yes" imported="no">local.hh</includes>
  </compound>
  <compound kind="file">
    <name>layercoordinator.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>layercoordinator_8hh.html</filename>
    <includes id="tiledbitmaplayer_8hh" name="tiledbitmaplayer.hh" local="no" imported="no">scroom/tiledbitmaplayer.hh</includes>
    <class kind="class">LayerCoordinator</class>
  </compound>
  <compound kind="file">
    <name>layeroperations.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>layeroperations_8cc.html</filename>
    <includes id="bitmap-helpers_8hh" name="bitmap-helpers.hh" local="no" imported="no">scroom/bitmap-helpers.hh</includes>
    <includes id="cairo-helpers_8hh" name="cairo-helpers.hh" local="no" imported="no">scroom/cairo-helpers.hh</includes>
    <includes id="layeroperations_8hh" name="layeroperations.hh" local="no" imported="no">scroom/layeroperations.hh</includes>
    <class kind="class">BitCountLut</class>
    <namespace>anonymous_namespace{layeroperations.cc}</namespace>
    <member kind="function">
      <type>std::shared_ptr&lt; unsigned char &gt;</type>
      <name>shared_malloc</name>
      <anchorfile>namespaceanonymous__namespace_02layeroperations_8cc_03.html</anchorfile>
      <anchor>a4723c72ad8f18c63e337ca9301f7f3ef</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="variable">
      <type>BitCountLut</type>
      <name>bcl</name>
      <anchorfile>layeroperations_8cc.html</anchorfile>
      <anchor>ab88c659bf4f68d58f4c6f816d2f49f2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>layerspecforbitmap.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>layerspecforbitmap_8cc.html</filename>
    <includes id="layeroperations_8hh" name="layeroperations.hh" local="no" imported="no">scroom/layeroperations.hh</includes>
    <includes id="opentiledbitmapinterface_8hh" name="opentiledbitmapinterface.hh" local="no" imported="no">scroom/opentiledbitmapinterface.hh</includes>
    <class kind="class">Scroom::TiledBitmap::LayerSpecForBitmapper</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::TiledBitmap</namespace>
    <namespace>Scroom::TiledBitmap::anonymous_namespace{layerspecforbitmap.cc}</namespace>
    <member kind="function">
      <type>const char *</type>
      <name>to_string</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap_1_1anonymous__namespace_02layerspecforbitmap_8cc_03.html</anchorfile>
      <anchor>a9fd3fb8f5d0079d26686c582e803dc54</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_stream</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>ad48ffa08ebee955f5039811162e0df4a</anchor>
      <arglist>(std::ostream &amp;os, const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a90b98df77076cf30312ea6e57d3e75d2</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>Metadata::Metadata</type>
      <name>to_metadata</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a57ca2a55cf5fd640d3e3e3e2d59c4a62</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>LayerSpecResult</type>
      <name>RGBBitmap</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a6f47ad908b18e8214e9bc60808ed6466</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>LayerSpecResult</type>
      <name>CMYKBitmap</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a1c8c49cce636d826f4a7426a55ba5aa0</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>LayerSpecResult</type>
      <name>GreyscaleBitmap</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a2fac0e54aad7e9d259220cf19bc83ac4</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>LayerSpecResult</type>
      <name>ColormappedBitmap</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>ae9bb2ffc268c966862573f2ef383ed7d</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>LayerSpecResult</type>
      <name>LayerSpecForBitmap</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a22a1bb4f862ef52ed08042515ffca9da</anchor>
      <arglist>(const BitmapMetaData &amp;bitmapMetaData)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>local.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>local_8hh.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>LOAD_PRIO</name>
      <anchorfile>local_8hh.html</anchorfile>
      <anchor>aaa596031f81e74e8c57c9af7778907b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DATAFETCH_PRIO</name>
      <anchorfile>local_8hh.html</anchorfile>
      <anchor>ae2de07f0f9ff468e76d12f302807d3d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REDUCE_PRIO</name>
      <anchorfile>local_8hh.html</anchorfile>
      <anchor>a0a865049f169efddb5dcb94b4b6f2e6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tiled-bitmap.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>tiled-bitmap_8cc.html</filename>
    <includes id="tiled-bitmap_8hh" name="tiled-bitmap.hh" local="yes" imported="no">tiled-bitmap.hh</includes>
    <includes id="cairo-helpers_8hh" name="cairo-helpers.hh" local="no" imported="no">scroom/cairo-helpers.hh</includes>
    <includes id="semaphore_8hh" name="semaphore.hh" local="no" imported="no">scroom/semaphore.hh</includes>
    <includes id="tileviewstate_8hh" name="tileviewstate.hh" local="yes" imported="no">tileviewstate.hh</includes>
    <member kind="function">
      <type>TiledBitmapInterface::Ptr</type>
      <name>createTiledBitmap</name>
      <anchorfile>tiled-bitmap_8cc.html</anchorfile>
      <anchor>afb81a705ea3c38444cb0f4fb12410f43</anchor>
      <arglist>(int bitmapWidth, int bitmapHeight, LayerSpec const &amp;ls)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Rectangle&lt; int &gt;</type>
      <name>TileAreaForIndex</name>
      <anchorfile>tiled-bitmap_8cc.html</anchorfile>
      <anchor>a1e35e4080b41bdb0e0c0e4798a8295be</anchor>
      <arglist>(Scroom::Utils::Point&lt; int &gt; tileIndex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tiled-bitmap.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>tiled-bitmap_8hh.html</filename>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <includes id="opentiledbitmapinterface_8hh" name="opentiledbitmapinterface.hh" local="no" imported="no">scroom/opentiledbitmapinterface.hh</includes>
    <includes id="progressinterfacehelpers_8hh" name="progressinterfacehelpers.hh" local="no" imported="no">scroom/progressinterfacehelpers.hh</includes>
    <includes id="scroominterface_8hh" name="scroominterface.hh" local="no" imported="no">scroom/scroominterface.hh</includes>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="tiledbitmapinterface_8hh" name="tiledbitmapinterface.hh" local="no" imported="no">scroom/tiledbitmapinterface.hh</includes>
    <includes id="tiledbitmaplayer_8hh" name="tiledbitmaplayer.hh" local="no" imported="no">scroom/tiledbitmaplayer.hh</includes>
    <includes id="layercoordinator_8hh" name="layercoordinator.hh" local="yes" imported="no">layercoordinator.hh</includes>
    <includes id="tiledbitmapviewdata_8hh" name="tiledbitmapviewdata.hh" local="yes" imported="no">tiledbitmapviewdata.hh</includes>
    <class kind="class">TiledBitmap</class>
  </compound>
  <compound kind="file">
    <name>tiledbitmappresentation.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>tiledbitmappresentation_8cc.html</filename>
    <includes id="cairo-helpers_8hh" name="cairo-helpers.hh" local="no" imported="no">scroom/cairo-helpers.hh</includes>
    <includes id="opentiledbitmapinterface_8hh" name="opentiledbitmapinterface.hh" local="no" imported="no">scroom/opentiledbitmapinterface.hh</includes>
    <includes id="pipetteviewinterface_8hh" name="pipetteviewinterface.hh" local="no" imported="no">scroom/pipetteviewinterface.hh</includes>
    <includes id="showmetadata_8hh" name="showmetadata.hh" local="no" imported="no">scroom/showmetadata.hh</includes>
    <includes id="showmetadatainterface_8hh" name="showmetadatainterface.hh" local="no" imported="no">scroom/showmetadatainterface.hh</includes>
    <includes id="transformpresentation_8hh" name="transformpresentation.hh" local="no" imported="no">scroom/transformpresentation.hh</includes>
    <includes id="tiled-bitmap_8hh" name="tiled-bitmap.hh" local="yes" imported="no">tiled-bitmap.hh</includes>
    <class kind="class">anonymous_namespace{tiledbitmappresentation.cc}::TiledBitmapPresentation</class>
    <class kind="class">anonymous_namespace{tiledbitmappresentation.cc}::OpenTiledBitmapAsPresentation</class>
    <namespace>anonymous_namespace{tiledbitmappresentation.cc}</namespace>
    <namespace>Scroom</namespace>
    <namespace>Scroom::TiledBitmap</namespace>
    <member kind="function">
      <type>PipetteLayerOperations::PipetteColor</type>
      <name>sumPipetteColors</name>
      <anchorfile>namespaceanonymous__namespace_02tiledbitmappresentation_8cc_03.html</anchorfile>
      <anchor>abae3a7fd8f52b1b6ce0a5e0252747cf3</anchor>
      <arglist>(const PipetteLayerOperations::PipetteColor &amp;lhs, const PipetteLayerOperations::PipetteColor &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PipetteLayerOperations::PipetteColor</type>
      <name>dividePipetteColors</name>
      <anchorfile>namespaceanonymous__namespace_02tiledbitmappresentation_8cc_03.html</anchorfile>
      <anchor>a35301cfe472c7f8d343c5d6a23d8da30</anchor>
      <arglist>(PipetteLayerOperations::PipetteColor elements, const int divisor)</arglist>
    </member>
    <member kind="function">
      <type>OpenPresentationInterface::Ptr</type>
      <name>ToOpenPresentationInterface</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>abd171862b26335d75a34704553701421</anchor>
      <arglist>(OpenTiledBitmapInterface::Ptr openTiledBitmapInterface)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tiledbitmapviewdata.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>tiledbitmapviewdata_8cc.html</filename>
    <includes id="tiledbitmapviewdata_8hh" name="tiledbitmapviewdata.hh" local="yes" imported="no">tiledbitmapviewdata.hh</includes>
    <includes id="gtk-helpers_8hh" name="gtk-helpers.hh" local="no" imported="no">scroom/gtk-helpers.hh</includes>
    <includes id="progressinterfacehelpers_8hh" name="progressinterfacehelpers.hh" local="no" imported="no">scroom/progressinterfacehelpers.hh</includes>
    <includes id="tileviewstate_8hh" name="tileviewstate.hh" local="yes" imported="no">tileviewstate.hh</includes>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>invalidate_view</name>
      <anchorfile>tiledbitmapviewdata_8cc.html</anchorfile>
      <anchor>a428ca3cfbaecfbe7aed16ea3ad4a61e5</anchor>
      <arglist>(const ViewInterface::WeakPtr &amp;vi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tiledbitmapviewdata.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>tiledbitmapviewdata_8hh.html</filename>
    <includes id="bookkeeping_8hh" name="bookkeeping.hh" local="no" imported="no">scroom/bookkeeping.hh</includes>
    <includes id="observable_8hh" name="observable.hh" local="no" imported="no">scroom/observable.hh</includes>
    <includes id="tiledbitmaplayer_8hh" name="tiledbitmaplayer.hh" local="no" imported="no">scroom/tiledbitmaplayer.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <class kind="class">TiledBitmapViewData</class>
  </compound>
  <compound kind="file">
    <name>tileviewstate.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>tileviewstate_8cc.html</filename>
    <includes id="tileviewstate_8hh" name="tileviewstate.hh" local="yes" imported="no">tileviewstate.hh</includes>
    <includes id="observable_8hh" name="observable.hh" local="no" imported="no">scroom/observable.hh</includes>
    <includes id="stuff_8hh" name="stuff.hh" local="no" imported="no">scroom/stuff.hh</includes>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="tiledbitmapinterface_8hh" name="tiledbitmapinterface.hh" local="no" imported="no">scroom/tiledbitmapinterface.hh</includes>
    <includes id="tiledbitmaplayer_8hh" name="tiledbitmaplayer.hh" local="no" imported="no">scroom/tiledbitmaplayer.hh</includes>
    <includes id="local_8hh" name="local.hh" local="yes" imported="no">local.hh</includes>
    <includes id="tiledbitmapviewdata_8hh" name="tiledbitmapviewdata.hh" local="yes" imported="no">tiledbitmapviewdata.hh</includes>
  </compound>
  <compound kind="file">
    <name>tileviewstate.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/src/</path>
    <filename>tileviewstate_8hh.html</filename>
    <includes id="observable_8hh" name="observable.hh" local="no" imported="no">scroom/observable.hh</includes>
    <includes id="stuff_8hh" name="stuff.hh" local="no" imported="no">scroom/stuff.hh</includes>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="tiledbitmapinterface_8hh" name="tiledbitmapinterface.hh" local="no" imported="no">scroom/tiledbitmapinterface.hh</includes>
    <includes id="tiledbitmaplayer_8hh" name="tiledbitmaplayer.hh" local="no" imported="no">scroom/tiledbitmaplayer.hh</includes>
    <class kind="class">TileViewState</class>
  </compound>
  <compound kind="file">
    <name>sampleiterator-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/test/</path>
    <filename>sampleiterator-tests_8cc.html</filename>
    <includes id="bitmap-helpers_8hh" name="bitmap-helpers.hh" local="no" imported="no">scroom/bitmap-helpers.hh</includes>
    <namespace>anonymous_namespace{sampleiterator-tests.cc}</namespace>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Bitmap</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceScroom_1_1Bitmap.html</anchorfile>
      <anchor>a46a1a3acb2ff4ba47611ec022bbfa1ef</anchor>
      <arglist>(std::ostream &amp;os, const SampleIterator&lt; T &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>sampleiterator-tests_8cc.html</anchorfile>
      <anchor>a7761b437139a1903b3fb12eb94ad1b60</anchor>
      <arglist>(auto i=0;i&lt; it.samplesPerBase;i++, it++, out++)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CHECK_EQUAL</name>
      <anchorfile>sampleiterator-tests_8cc.html</anchorfile>
      <anchor>ab482580f25154bcb5a6ab7e0f6a7635d</anchor>
      <arglist>(0, memcmp(testData, output, 2))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>sampleiterator-tests_8cc.html</anchorfile>
      <anchor>a78a464b281445692e45ae74e9956639c</anchor>
      <arglist>(equality)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_DATA_TEST_CASE</name>
      <anchorfile>sampleiterator-tests_8cc.html</anchorfile>
      <anchor>a84d38fa38463603a2167ab970d0aacb4</anchor>
      <arglist>(arithmetic, data::make(bit_depths) *data::make(initial_offsets) *data::make(deltas), bps, initial_offset, delta)</arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>testData</name>
      <anchorfile>namespaceanonymous__namespace_02sampleiterator-tests_8cc_03.html</anchorfile>
      <anchor>a8f9ecb9b9edcd3f6d2b5865d6c1b8ab6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bit_depths</name>
      <anchorfile>namespaceanonymous__namespace_02sampleiterator-tests_8cc_03.html</anchorfile>
      <anchor>aa69fb4a20df5ff7d8dd3b9bd3b5dd1c1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>initial_offsets</name>
      <anchorfile>namespaceanonymous__namespace_02sampleiterator-tests_8cc_03.html</anchorfile>
      <anchor>aa7b9d1b6540dbb5b682005cb742562ae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>deltas</name>
      <anchorfile>namespaceanonymous__namespace_02sampleiterator-tests_8cc_03.html</anchorfile>
      <anchor>a437d26ece966bc7a8ba58cdaf7674e67</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>output</name>
      <anchorfile>sampleiterator-tests_8cc.html</anchorfile>
      <anchor>a5d0785bb2feab5228fc445f0f5bf3719</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SampleIterator&lt; uint8_t &gt;</type>
      <name>out</name>
      <anchorfile>sampleiterator-tests_8cc.html</anchorfile>
      <anchor>af7f90aabed7c25134df9aabe75020d0f</anchor>
      <arglist>(output, 0, bps)</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>mask</name>
      <anchorfile>sampleiterator-tests_8cc.html</anchorfile>
      <anchor>af8d3c430a6b0df870e68904316c06101</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tiledbitmap-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/test/</path>
    <filename>tiledbitmap-tests_8cc.html</filename>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <includes id="tiledbitmapinterface_8hh" name="tiledbitmapinterface.hh" local="no" imported="no">scroom/tiledbitmapinterface.hh</includes>
    <class kind="class">DummyLayerOperations</class>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>tiledbitmap-tests_8cc.html</anchorfile>
      <anchor>a2f9e0fe03c4d2fe6664ab387b42e585e</anchor>
      <arglist>(tiledbitmap_can_be_deleted)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>measure-framerate-callbacks.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/tools/</path>
    <filename>measure-framerate-callbacks_8cc.html</filename>
    <includes id="measure-framerate-callbacks_8hh" name="measure-framerate-callbacks.hh" local="yes" imported="no">measure-framerate-callbacks.hh</includes>
    <includes id="test-helpers_8hh" name="test-helpers.hh" local="yes" imported="no">test-helpers.hh</includes>
    <member kind="function" static="yes">
      <type>static gboolean</type>
      <name>on_configure</name>
      <anchorfile>measure-framerate-callbacks_8cc.html</anchorfile>
      <anchor>a2af8defea1ca269ba2aa1b09e6715ecc</anchor>
      <arglist>(GtkWidget *, GdkEventConfigure *, gpointer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>on_hide</name>
      <anchorfile>measure-framerate-callbacks_8cc.html</anchorfile>
      <anchor>af71bb5d6a6f45d722a45b29224475f69</anchor>
      <arglist>(GtkWidget *, gpointer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static gboolean</type>
      <name>on_expose</name>
      <anchorfile>measure-framerate-callbacks_8cc.html</anchorfile>
      <anchor>a64a909cd6d374e001bbff275bd3fdc11</anchor>
      <arglist>(GtkWidget *widget, GdkEventExpose *, gpointer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static gboolean</type>
      <name>on_idle</name>
      <anchorfile>measure-framerate-callbacks_8cc.html</anchorfile>
      <anchor>adf41c8b40d25ed07925641aca31f5e32</anchor>
      <arglist>(gpointer)</arglist>
    </member>
    <member kind="function">
      <type>GtkWidget *</type>
      <name>create_window</name>
      <anchorfile>measure-framerate-callbacks_8cc.html</anchorfile>
      <anchor>a6a86d07f5ca3c64910be2285087bf35e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>measure-framerate-callbacks_8cc.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>measure-framerate-callbacks_8cc.html</anchorfile>
      <anchor>a893f1101c650c08c98612515c2b1a89c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; boost::function&lt; bool()&gt; &gt;</type>
      <name>functions</name>
      <anchorfile>measure-framerate-callbacks_8cc.html</anchorfile>
      <anchor>a05753da6e97a1ef39125024fc989a6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned int</type>
      <name>current</name>
      <anchorfile>measure-framerate-callbacks_8cc.html</anchorfile>
      <anchor>ae5102c5e4d522765c36ee5a44a750d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static GtkWidget *</type>
      <name>drawingArea</name>
      <anchorfile>measure-framerate-callbacks_8cc.html</anchorfile>
      <anchor>aa9f25030b325d56c01737cf18c0c874d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>measure-framerate-callbacks.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/tools/</path>
    <filename>measure-framerate-callbacks_8hh.html</filename>
    <member kind="function">
      <type>GtkWidget *</type>
      <name>create_window</name>
      <anchorfile>measure-framerate-callbacks_8hh.html</anchorfile>
      <anchor>a6a86d07f5ca3c64910be2285087bf35e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>measure-framerate-callbacks_8hh.html</anchorfile>
      <anchor>a02fd73d861ef2e4aabb38c0c9ff82947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>measure-framerate-callbacks_8hh.html</anchorfile>
      <anchor>a893f1101c650c08c98612515c2b1a89c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; boost::function&lt; bool()&gt; &gt;</type>
      <name>functions</name>
      <anchorfile>measure-framerate-callbacks_8hh.html</anchorfile>
      <anchor>a05753da6e97a1ef39125024fc989a6fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>measure-framerate-stubs.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/tools/</path>
    <filename>measure-framerate-stubs_8cc.html</filename>
    <includes id="measure-framerate-stubs_8hh" name="measure-framerate-stubs.hh" local="yes" imported="no">measure-framerate-stubs.hh</includes>
    <includes id="progressinterfacehelpers_8hh" name="progressinterfacehelpers.hh" local="no" imported="no">scroom/progressinterfacehelpers.hh</includes>
  </compound>
  <compound kind="file">
    <name>measure-framerate-stubs.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/tools/</path>
    <filename>measure-framerate-stubs_8hh.html</filename>
    <includes id="progressinterface_8hh" name="progressinterface.hh" local="no" imported="no">scroom/progressinterface.hh</includes>
    <includes id="tile_8hh" name="tile.hh" local="no" imported="no">scroom/tile.hh</includes>
    <includes id="tiledbitmapinterface_8hh" name="tiledbitmapinterface.hh" local="no" imported="no">scroom/tiledbitmapinterface.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <class kind="class">ProgressInterfaceStub</class>
    <class kind="class">ViewInterfaceStub</class>
    <class kind="class">Source1Bpp</class>
    <class kind="class">Source2Bpp</class>
    <class kind="class">Source4Bpp</class>
    <class kind="class">Source8Bpp</class>
  </compound>
  <compound kind="file">
    <name>measure-framerate-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/tools/</path>
    <filename>measure-framerate-tests_8cc.html</filename>
    <includes id="measure-framerate-tests_8hh" name="measure-framerate-tests.hh" local="yes" imported="no">measure-framerate-tests.hh</includes>
    <includes id="measure-framerate-callbacks_8hh" name="measure-framerate-callbacks.hh" local="yes" imported="no">measure-framerate-callbacks.hh</includes>
    <includes id="measure-framerate-stubs_8hh" name="measure-framerate-stubs.hh" local="yes" imported="no">measure-framerate-stubs.hh</includes>
    <includes id="test-helpers_8hh" name="test-helpers.hh" local="yes" imported="no">test-helpers.hh</includes>
    <class kind="class">Invalidator</class>
    <class kind="class">BaseCounter</class>
    <class kind="class">InvalidatingCounter</class>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>logSizes</name>
      <anchorfile>measure-framerate-tests_8cc.html</anchorfile>
      <anchor>a00343b452b404b39488be0d8b75512b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_tests</name>
      <anchorfile>measure-framerate-tests_8cc.html</anchorfile>
      <anchor>a0c38ed457f90e06f41a3238692c70397</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>measure-framerate-tests.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/tools/</path>
    <filename>measure-framerate-tests_8hh.html</filename>
    <member kind="function">
      <type>void</type>
      <name>init_tests</name>
      <anchorfile>measure-framerate-tests_8hh.html</anchorfile>
      <anchor>a0c38ed457f90e06f41a3238692c70397</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>measure-framerate.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/tools/</path>
    <filename>measure-framerate_8cc.html</filename>
    <includes id="measure-framerate-callbacks_8hh" name="measure-framerate-callbacks.hh" local="yes" imported="no">measure-framerate-callbacks.hh</includes>
    <includes id="measure-framerate-tests_8hh" name="measure-framerate-tests.hh" local="yes" imported="no">measure-framerate-tests.hh</includes>
    <member kind="function">
      <type>void</type>
      <name>usage</name>
      <anchorfile>measure-framerate_8cc.html</anchorfile>
      <anchor>a0a789fa690aac00f8c6ceb083f77ec68</anchor>
      <arglist>(const std::string &amp;me, const std::string &amp;message=std::string())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>measure-framerate_8cc.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>measure-load-performance-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/tools/</path>
    <filename>measure-load-performance-tests_8cc.html</filename>
    <includes id="measure-load-performance-tests_8hh" name="measure-load-performance-tests.hh" local="yes" imported="no">measure-load-performance-tests.hh</includes>
    <includes id="semaphore_8hh" name="semaphore.hh" local="no" imported="no">scroom/semaphore.hh</includes>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="measure-framerate-callbacks_8hh" name="measure-framerate-callbacks.hh" local="yes" imported="no">measure-framerate-callbacks.hh</includes>
    <includes id="measure-framerate-stubs_8hh" name="measure-framerate-stubs.hh" local="yes" imported="no">measure-framerate-stubs.hh</includes>
    <includes id="test-helpers_8hh" name="test-helpers.hh" local="yes" imported="no">test-helpers.hh</includes>
    <class kind="class">WaitForAsyncOp</class>
    <member kind="function">
      <type>void</type>
      <name>init_tests</name>
      <anchorfile>measure-load-performance-tests_8cc.html</anchorfile>
      <anchor>a0c38ed457f90e06f41a3238692c70397</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>measure-load-performance-tests.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/tools/</path>
    <filename>measure-load-performance-tests_8hh.html</filename>
    <includes id="semaphore_8hh" name="semaphore.hh" local="no" imported="no">scroom/semaphore.hh</includes>
    <member kind="function">
      <type>void</type>
      <name>init_tests</name>
      <anchorfile>measure-load-performance-tests_8hh.html</anchorfile>
      <anchor>a0c38ed457f90e06f41a3238692c70397</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>measure-load-performance.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/tools/</path>
    <filename>measure-load-performance_8cc.html</filename>
    <includes id="measure-framerate-callbacks_8hh" name="measure-framerate-callbacks.hh" local="yes" imported="no">measure-framerate-callbacks.hh</includes>
    <includes id="measure-load-performance-tests_8hh" name="measure-load-performance-tests.hh" local="yes" imported="no">measure-load-performance-tests.hh</includes>
    <member kind="function">
      <type>void</type>
      <name>usage</name>
      <anchorfile>measure-load-performance_8cc.html</anchorfile>
      <anchor>a0a789fa690aac00f8c6ceb083f77ec68</anchor>
      <arglist>(const std::string &amp;me, const std::string &amp;message=std::string())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>measure-load-performance_8cc.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test-helpers.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/tools/</path>
    <filename>test-helpers_8cc.html</filename>
    <includes id="test-helpers_8hh" name="test-helpers.hh" local="yes" imported="no">test-helpers.hh</includes>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <includes id="layeroperations_8hh" name="layeroperations.hh" local="no" imported="no">scroom/layeroperations.hh</includes>
    <includes id="cairo-helpers_8hh" name="cairo-helpers.hh" local="yes" imported="no">scroom/cairo-helpers.hh</includes>
    <member kind="function">
      <type>bool</type>
      <name>quit</name>
      <anchorfile>test-helpers_8cc.html</anchorfile>
      <anchor>af0de4f6cbbddd00a562f169a5e703713</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reset</name>
      <anchorfile>test-helpers_8cc.html</anchorfile>
      <anchor>a50910ef42a65d4c139af341f1ef2323f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait</name>
      <anchorfile>test-helpers_8cc.html</anchorfile>
      <anchor>ab86f338cf229c8dd15d854493ff43ff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupTest1bpp</name>
      <anchorfile>test-helpers_8cc.html</anchorfile>
      <anchor>a510b01f28a69aa5aef9be5c774994d46</anchor>
      <arglist>(int zoom, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupTest2bpp</name>
      <anchorfile>test-helpers_8cc.html</anchorfile>
      <anchor>a335d41148bd6cbbc8d10a896689608a2</anchor>
      <arglist>(int zoom, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupTest4bpp</name>
      <anchorfile>test-helpers_8cc.html</anchorfile>
      <anchor>a882cf8e832bb4cd71ae3e259d172c37e</anchor>
      <arglist>(int zoom, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupTest8bpp</name>
      <anchorfile>test-helpers_8cc.html</anchorfile>
      <anchor>a9c754881425f808e78c88bc70892083f</anchor>
      <arglist>(int zoom, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupTest8bppColormapped</name>
      <anchorfile>test-helpers_8cc.html</anchorfile>
      <anchor>a49f7223b9ce970949245d09bbe15d32a</anchor>
      <arglist>(int zoom, int width, int height)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>drawingAreaWidth</name>
      <anchorfile>test-helpers_8cc.html</anchorfile>
      <anchor>a172be8ce7473f0a2ca30107ca4824fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>drawingAreaHeight</name>
      <anchorfile>test-helpers_8cc.html</anchorfile>
      <anchor>ab0d783febb709ca1ac0cf56716b0ee84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TestData::Ptr</type>
      <name>testData</name>
      <anchorfile>test-helpers_8cc.html</anchorfile>
      <anchor>a6588afec2a5416f3896ea42ee1d8cf0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test-helpers.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/tiled-bitmap/tools/</path>
    <filename>test-helpers_8hh.html</filename>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <includes id="layeroperations_8hh" name="layeroperations.hh" local="no" imported="no">scroom/layeroperations.hh</includes>
    <includes id="measure-framerate-stubs_8hh" name="measure-framerate-stubs.hh" local="yes" imported="no">measure-framerate-stubs.hh</includes>
    <class kind="class">DummyColormapProvider</class>
    <class kind="class">TestData</class>
    <class kind="class">Sleeper</class>
    <member kind="function">
      <type>bool</type>
      <name>quit</name>
      <anchorfile>test-helpers_8hh.html</anchorfile>
      <anchor>af0de4f6cbbddd00a562f169a5e703713</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reset</name>
      <anchorfile>test-helpers_8hh.html</anchorfile>
      <anchor>a50910ef42a65d4c139af341f1ef2323f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait</name>
      <anchorfile>test-helpers_8hh.html</anchorfile>
      <anchor>ab86f338cf229c8dd15d854493ff43ff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupTest1bpp</name>
      <anchorfile>test-helpers_8hh.html</anchorfile>
      <anchor>a510b01f28a69aa5aef9be5c774994d46</anchor>
      <arglist>(int zoom, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupTest2bpp</name>
      <anchorfile>test-helpers_8hh.html</anchorfile>
      <anchor>a335d41148bd6cbbc8d10a896689608a2</anchor>
      <arglist>(int zoom, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupTest4bpp</name>
      <anchorfile>test-helpers_8hh.html</anchorfile>
      <anchor>a882cf8e832bb4cd71ae3e259d172c37e</anchor>
      <arglist>(int zoom, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupTest8bpp</name>
      <anchorfile>test-helpers_8hh.html</anchorfile>
      <anchor>a9c754881425f808e78c88bc70892083f</anchor>
      <arglist>(int zoom, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setupTest8bppColormapped</name>
      <anchorfile>test-helpers_8hh.html</anchorfile>
      <anchor>a49f7223b9ce970949245d09bbe15d32a</anchor>
      <arglist>(int zoom, int width, int height)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>drawingAreaWidth</name>
      <anchorfile>test-helpers_8hh.html</anchorfile>
      <anchor>a172be8ce7473f0a2ca30107ca4824fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>drawingAreaHeight</name>
      <anchorfile>test-helpers_8hh.html</anchorfile>
      <anchor>ab0d783febb709ca1ac0cf56716b0ee84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TestData::Ptr</type>
      <name>testData</name>
      <anchorfile>test-helpers_8hh.html</anchorfile>
      <anchor>a6588afec2a5416f3896ea42ee1d8cf0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assertions.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>assertions_8hh.html</filename>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Utils</namespace>
    <namespace>Scroom::Utils::Detail</namespace>
    <member kind="define">
      <type>#define</type>
      <name>require</name>
      <anchorfile>assertions_8hh.html</anchorfile>
      <anchor>ae925d7587e34145cd52f674b2012539a</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ensure</name>
      <anchorfile>assertions_8hh.html</anchorfile>
      <anchor>a0a6432d768e4a040089ea8b3c8b6b4f0</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>verify</name>
      <anchorfile>assertions_8hh.html</anchorfile>
      <anchor>aecaddce56c58fa07fb91249ea5de89ae</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>defect</name>
      <anchorfile>assertions_8hh.html</anchorfile>
      <anchor>a53abbe0948aa9d052aecd95684b68190</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>defect_message</name>
      <anchorfile>assertions_8hh.html</anchorfile>
      <anchor>a2679784148a3d02d3f8ffd6ec2ae80f4</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertionFailed</name>
      <anchorfile>namespaceScroom_1_1Utils_1_1Detail.html</anchorfile>
      <anchor>af5d9c2e601f73135116e508920810bd8</anchor>
      <arglist>(std::string_view type, std::string_view expr, std::string_view function, std::string_view filename, unsigned int line) __attribute__((noreturn))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bookkeeping.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>bookkeeping_8hh.html</filename>
    <includes id="stuff_8hh" name="stuff.hh" local="no" imported="no">scroom/stuff.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <includes id="bookkeepingimpl_8hh" name="bookkeepingimpl.hh" local="no" imported="no">scroom/impl/bookkeepingimpl.hh</includes>
    <class kind="class">Scroom::Bookkeeping::Detail::ValueType</class>
    <class kind="class">Scroom::Bookkeeping::Detail::LValue</class>
    <class kind="struct">Scroom::Bookkeeping::Detail::MapType</class>
    <class kind="struct">Scroom::Bookkeeping::Detail::MapType&lt; std::weak_ptr&lt; K &gt;, V &gt;</class>
    <class kind="class">Scroom::Bookkeeping::Token</class>
    <class kind="class">Scroom::Bookkeeping::MapBase</class>
    <class kind="class">Scroom::Bookkeeping::Map</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Bookkeeping</namespace>
    <namespace>Scroom::Bookkeeping::Detail</namespace>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Detail::TokenImpl &gt;</type>
      <name>WeakToken</name>
      <anchorfile>namespaceScroom_1_1Bookkeeping.html</anchorfile>
      <anchor>aa859536c2894d3c9e1163bc1e2048bab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dont-delete.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>dont-delete_8hh.html</filename>
    <class kind="class">DontDelete</class>
  </compound>
  <compound kind="file">
    <name>format_stuff.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>format__stuff_8hh.html</filename>
    <includes id="point_8hh" name="point.hh" local="no" imported="no">scroom/point.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <class kind="struct">fmt::formatter&lt; Scroom::Utils::Rectangle&lt; T &gt; &gt;</class>
    <class kind="struct">fmt::formatter&lt; Scroom::Utils::Point&lt; T &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>gtk-helpers.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>gtk-helpers_8hh.html</filename>
    <includes id="assertions_8hh" name="assertions.hh" local="yes" imported="no">assertions.hh</includes>
    <namespace>Scroom</namespace>
    <namespace>Scroom::GtkHelpers</namespace>
    <namespace>Scroom::GtkHelpers::Detail</namespace>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>gtkWrapper</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers_1_1Detail.html</anchorfile>
      <anchor>a49fe9082a2e319cd57551e663b5a8f3e</anchor>
      <arglist>(gpointer data)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; GSourceFunc, gpointer &gt;</type>
      <name>wrap</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>ac6ea38c746831ab3ff96ce29ffe5bf7a</anchor>
      <arglist>(T f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>on_ui_thread</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>a2ade52a9fdfe46700036def64d00f9da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_on_ui_thread</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>ac2709d76d34bc51f4310e34502d17ed1</anchor>
      <arglist>(T f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_on_ui_thread_and_wait</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>a37a36328ffc6b0e7468a02d64724c21d</anchor>
      <arglist>(T f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync_on_ui_thread</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>a41d93c131774cfff3137ec807ead3e94</anchor>
      <arglist>(T f)</arglist>
    </member>
    <member kind="function">
      <type>cairo_rectangle_int_t</type>
      <name>createCairoIntRectangle</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>a5260b667cc757819028aac849da3304e</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>GtkWindow *</type>
      <name>get_parent_window</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>a68ad2ca25cec0ca8c5f9174039ea86fa</anchor>
      <arglist>(GtkWidget *widget)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>gtk-helpers_8hh.html</anchorfile>
      <anchor>ad5066a3f0522489a2ebd89f62e2139b7</anchor>
      <arglist>(cairo_rectangle_int_t const &amp;left, cairo_rectangle_int_t const &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>gtk-helpers_8hh.html</anchorfile>
      <anchor>a7c0ce57e4e3168ea6eaaa546742f4236</anchor>
      <arglist>(const GdkPoint &amp;left, const GdkPoint &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>gtk-helpers_8hh.html</anchorfile>
      <anchor>a23764a07c608b18aa216c15eb981a18b</anchor>
      <arglist>(std::ostream &amp;os, cairo_rectangle_int_t const &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>gtk-helpers_8hh.html</anchorfile>
      <anchor>a9a1e805cf8f6613ef3ec1e49bed8d2d2</anchor>
      <arglist>(std::ostream &amp;os, const GdkPoint &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gtk-test-helpers.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>gtk-test-helpers_8hh.html</filename>
    <class kind="class">Scroom::GtkTestHelpers::GtkMainLoop</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::GtkTestHelpers</namespace>
  </compound>
  <compound kind="file">
    <name>bookkeepingimpl.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/impl/</path>
    <filename>bookkeepingimpl_8hh.html</filename>
    <class kind="class">Scroom::Bookkeeping::Detail::TokenAddition</class>
    <class kind="class">Scroom::Bookkeeping::Detail::TokenImpl</class>
    <class kind="class">Scroom::Bookkeeping::Detail::MapTokenImpl</class>
    <class kind="class">Scroom::Bookkeeping::Detail::ValueType</class>
    <class kind="class">Scroom::Bookkeeping::Detail::LValue</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Bookkeeping</namespace>
    <namespace>Scroom::Bookkeeping::Detail</namespace>
  </compound>
  <compound kind="file">
    <name>interface.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>interface_8hh.html</filename>
    <class kind="class">Interface</class>
  </compound>
  <compound kind="file">
    <name>linearsegment.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>linearsegment_8hh.html</filename>
    <includes id="rounding_8hh" name="rounding.hh" local="no" imported="no">scroom/rounding.hh</includes>
    <class kind="class">Scroom::Utils::Segment</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Utils</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>aee1ec40078d98263c9d8e298f864ae35</anchor>
      <arglist>(T v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero&lt; int &gt;</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a30f36549b95d51dd6817a6e93e451253</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero&lt; double &gt;</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>ab3f256ef38648a0deeb8941fdebbc2d1</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areEqual</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a62de66cbe67e4fd48bba7a0eff17be69</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; T &gt;</type>
      <name>make_segment</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>aa08251a37a550efbeabbf72d5e4b844d</anchor>
      <arglist>(T start, T size)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; T &gt;</type>
      <name>make_segment_from_start_end</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a161485b4d406f370ba6cc1bfdeb514db</anchor>
      <arglist>(T start, T end)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a0caa939fe4026a1877ff417d351afc68</anchor>
      <arglist>(std::ostream &amp;os, const Segment&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; double &gt;</type>
      <name>roundOutward</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a33bac75a3d40fb70f2b21a31713b61ba</anchor>
      <arglist>(Segment&lt; double &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>center</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a6af7d77e767482d135292f17d5dcce30</anchor>
      <arglist>(Segment&lt; T &gt; s)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>epsilon</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a00a4f91d4115659e531a6542307e270b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>observable.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>observable_8hh.html</filename>
    <includes id="bookkeeping_8hh" name="bookkeeping.hh" local="no" imported="no">scroom/bookkeeping.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <class kind="class">Scroom::Utils::Observable</class>
    <class kind="class">Scroom::Utils::Detail::Registration</class>
    <class kind="class">Scroom::Utils::Observable</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Utils</namespace>
    <namespace>Scroom::Utils::Detail</namespace>
  </compound>
  <compound kind="file">
    <name>point.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>point_8hh.html</filename>
    <includes id="rounding_8hh" name="rounding.hh" local="no" imported="no">scroom/rounding.hh</includes>
    <class kind="class">Scroom::Utils::Point</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Utils</namespace>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>make_point</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>aec6a39c97f4eef824b1c61dfc3b01c72</anchor>
      <arglist>(T x, T y)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>make_point</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a0adf4537b5a9b11bca9c56dc67d584ca</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a8f64fb89db50510d80441078201e09c3</anchor>
      <arglist>(std::ostream &amp;os, const Point&lt; T &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a687fe942f26a1884e4887aa9694235eb</anchor>
      <arglist>(Point&lt; T &gt; left, Point&lt; U &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a3b2d1f96c712d264c4698c8f5a059159</anchor>
      <arglist>(Point&lt; T &gt; left, Point&lt; U &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a3d5ed76d63606b17de1a73108e3c0709</anchor>
      <arglist>(Point&lt; T &gt; left, Point&lt; U &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>aa875c96523453fd97f78a6cda3abbfb8</anchor>
      <arglist>(Point&lt; T &gt; left, Point&lt; U &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a9ba167d60ac5976b771efa7bfae1c5bc</anchor>
      <arglist>(T left, Point&lt; U &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a53cc18c0fc79d14366403e84f9420f8c</anchor>
      <arglist>(Point&lt; T &gt; left, U right)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>rounded_divide_by</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a0f841ab61c4a51b9ef8a8dda13614552</anchor>
      <arglist>(Point&lt; T &gt; value, T factor)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>ceiled_divide_by</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>aa9430ca475207a4fb61773036eca9472</anchor>
      <arglist>(Point&lt; T &gt; value, T factor)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>floored_divide_by</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>ac279a11e667e077540b85a90ad8884db</anchor>
      <arglist>(Point&lt; T &gt; value, T factor)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>rounded_divide_by</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a9e36c6dc0101ca8d786dc2441e1cc360</anchor>
      <arglist>(Point&lt; T &gt; value, Point&lt; T &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>ceiled_divide_by</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a31b7188dcc0f8f706923df67b370ee93</anchor>
      <arglist>(Point&lt; T &gt; value, Point&lt; T &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>floored_divide_by</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>ad8e604f317aa2306e03d4dd9e2845369</anchor>
      <arglist>(Point&lt; T &gt; value, Point&lt; T &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>ceil</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a6d5bd18b979a559c0ec66d05ea5f751f</anchor>
      <arglist>(Point&lt; T &gt; p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>progressinterface.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>progressinterface_8hh.html</filename>
    <includes id="interface_8hh" name="interface.hh" local="no" imported="no">scroom/interface.hh</includes>
    <class kind="class">ProgressInterface</class>
  </compound>
  <compound kind="file">
    <name>progressinterfacehelpers.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>progressinterfacehelpers_8hh.html</filename>
    <includes id="progressinterface_8hh" name="progressinterface.hh" local="no" imported="no">scroom/progressinterface.hh</includes>
    <includes id="stuff_8hh" name="stuff.hh" local="no" imported="no">scroom/stuff.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <class kind="class">Scroom::Utils::ProgressStateInterface</class>
    <class kind="class">Scroom::Utils::ProgressInterfaceFromProgressStateInterface</class>
    <class kind="class">Scroom::Utils::ProgressInterfaceFromProgressStateInterfaceForwarder</class>
    <class kind="class">Scroom::Utils::ProgressStateInterfaceFromProgressInterface</class>
    <class kind="class">Scroom::Utils::ProgressStateInterfaceFromProgressInterfaceForwarder</class>
    <class kind="class">Scroom::Utils::Detail::ProgressStore</class>
    <class kind="class">Scroom::Utils::ProgressInterfaceBroadcaster</class>
    <class kind="class">Scroom::Utils::ProgressInterfaceBroadcaster::Unsubscriber</class>
    <class kind="class">Scroom::Utils::ProgressInterfaceMultiplexer</class>
    <class kind="class">Scroom::Utils::ProgressInterfaceMultiplexer::ChildData</class>
    <class kind="class">Scroom::Utils::ProgressInterfaceMultiplexer::Child</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Utils</namespace>
    <namespace>Scroom::Utils::Detail</namespace>
  </compound>
  <compound kind="file">
    <name>rectangle.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>rectangle_8hh.html</filename>
    <includes id="gtk-helpers_8hh" name="gtk-helpers.hh" local="no" imported="no">scroom/gtk-helpers.hh</includes>
    <includes id="linearsegment_8hh" name="linearsegment.hh" local="no" imported="no">scroom/linearsegment.hh</includes>
    <includes id="point_8hh" name="point.hh" local="no" imported="no">scroom/point.hh</includes>
    <class kind="class">Scroom::Utils::Rectangle</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Utils</namespace>
    <member kind="function">
      <type>Rectangle&lt; T &gt;</type>
      <name>make_rect</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>ab180ef35718c488735a883d3798c6c8b</anchor>
      <arglist>(T x, T y, T width, T height)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; T &gt;</type>
      <name>make_rect</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a13532c34cbfeeca5958d9a1b652c7869</anchor>
      <arglist>(Point&lt; T &gt; position, Point&lt; T &gt; size)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; T &gt;</type>
      <name>make_rect_from_start_end</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>aaa2202c74a349156d323e4bd256ae733</anchor>
      <arglist>(Point&lt; T &gt; start, Point&lt; T &gt; end)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>aeaa94ffe898673912f62fc4371a750df</anchor>
      <arglist>(std::ostream &amp;os, const Rectangle&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a519ad4e7386d37be3bb4dfac771a6b38</anchor>
      <arglist>(std::ostream &amp;os, const cairo_rectangle_int_t &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a8d0cf039a6a38245abf928fa5f042c01</anchor>
      <arglist>(Rectangle&lt; T &gt; left, U right)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a80c7e1e2defb6862929e2561aa401382</anchor>
      <arglist>(T left, Rectangle&lt; U &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a45b94b28c803eb685b931d96350ee6ae</anchor>
      <arglist>(cairo_rectangle_int_t const &amp;r, Point&lt; double &gt; const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a0938219b764b451ae4c49a95e35ff61d</anchor>
      <arglist>(Point&lt; double &gt; const &amp;p, cairo_rectangle_int_t const &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a75073e42c960a7f5adbd862de366dca5</anchor>
      <arglist>(Rectangle&lt; T &gt; left, Point&lt; U &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; double &gt;</type>
      <name>roundOutward</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a109657362fdd03211f8e43916a419f03</anchor>
      <arglist>(Rectangle&lt; double &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; double &gt;</type>
      <name>roundCorners</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>abe635d041cef6e7fb266c5eb7470b6f0</anchor>
      <arglist>(Rectangle&lt; double &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>center</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a2be3b66bf784d694bf0017a57299a39e</anchor>
      <arglist>(Rectangle&lt; T &gt; r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rounding.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>rounding_8hh.html</filename>
    <member kind="function">
      <type>double</type>
      <name>rounded_divide_by</name>
      <anchorfile>rounding_8hh.html</anchorfile>
      <anchor>aedaf778f8b35fe2d25e2e06832bee1ca</anchor>
      <arglist>(double value, double factor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ceiled_divide_by</name>
      <anchorfile>rounding_8hh.html</anchorfile>
      <anchor>a3705c07b90d6f60753b35c4aea0082b5</anchor>
      <arglist>(double value, double factor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>floored_divide_by</name>
      <anchorfile>rounding_8hh.html</anchorfile>
      <anchor>a08d4c4fef3e0764e999f269b7773286c</anchor>
      <arglist>(double value, double factor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rounded_divide_by</name>
      <anchorfile>rounding_8hh.html</anchorfile>
      <anchor>a3b4ffa72156d0a5508a39100e1e854c0</anchor>
      <arglist>(int value, int factor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ceiled_divide_by</name>
      <anchorfile>rounding_8hh.html</anchorfile>
      <anchor>a45319e782831c72e3496261e9ac27afe</anchor>
      <arglist>(int value, int factor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>floored_divide_by</name>
      <anchorfile>rounding_8hh.html</anchorfile>
      <anchor>af3514817b8009dff977d117a70d0dbfb</anchor>
      <arglist>(int value, int factor)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>round_to_multiple_of</name>
      <anchorfile>rounding_8hh.html</anchorfile>
      <anchor>a8ef4d93107153397a73e4a13f5f86a3d</anchor>
      <arglist>(T value, T factor)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>round_up_to_multiple_of</name>
      <anchorfile>rounding_8hh.html</anchorfile>
      <anchor>a1b27314f9dc323dff1e495e265c88eca</anchor>
      <arglist>(T value, T factor)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>round_down_to_multiple_of</name>
      <anchorfile>rounding_8hh.html</anchorfile>
      <anchor>aa1169552e0a4044595bc67a5b9361694</anchor>
      <arglist>(T value, T factor)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stuff.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>stuff_8hh.html</filename>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Utils</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; void &gt;</type>
      <name>Stuff</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a7831a6b14da4ae303170e6607f29e6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; void &gt;</type>
      <name>StuffWeak</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>afea0aa2f53589bdee27bdc6dd4cc418a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; Stuff &gt;</type>
      <name>StuffList</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>acf77d2a64982c6e01e5111ebec656515</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Stuff</type>
      <name>Empty</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a053ab918264fd8b7dca49cacf95060d9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utilities.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/inc/scroom/</path>
    <filename>utilities_8hh.html</filename>
    <class kind="class">Scroom::Utils::Base</class>
    <class kind="class">Scroom::Utils::on_scope_exit</class>
    <class kind="class">Scroom::Utils::optional_cleanup</class>
    <class kind="class">Scroom::Utils::Count</class>
    <class kind="class">Scroom::Utils::Counter</class>
    <class kind="class">Scroom::Utils::Counted</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Utils</namespace>
    <member kind="typedef">
      <type>std::map&lt; K, V, std::owner_less&lt; K &gt; &gt;</type>
      <name>WeakKeyMap</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a4eff4a800754d2391c7ac5e04d1048d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; K, std::owner_less&lt; K &gt; &gt;</type>
      <name>WeakKeySet</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a2f0b01cb3ac958356ac99bc37fbf7168</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; void &gt;</type>
      <name>on_destruction</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>ace9b5ab9d76c3c1aff125ea97d2c72e5</anchor>
      <arglist>(F f)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; unsigned char &gt;</type>
      <name>shared_malloc</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a96f33218a52ff36368d6556a40f14437</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpCounts</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a0688885798e7f3f3c0c4d510577119f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assertions.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/src/</path>
    <filename>assertions_8cc.html</filename>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
    <class kind="class">Scroom::Utils::Detail::ErrorSignalHandler</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Utils</namespace>
    <namespace>Scroom::Utils::Detail</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>stackTrace</name>
      <anchorfile>namespaceScroom_1_1Utils_1_1Detail.html</anchorfile>
      <anchor>a368d40c614868bb7e2a6299ec7431d35</anchor>
      <arglist>([[maybe_unused]] size_t cutoff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort</name>
      <anchorfile>namespaceScroom_1_1Utils_1_1Detail.html</anchorfile>
      <anchor>af6ca1b376461c7e9fa52954959a24652</anchor>
      <arglist>() __attribute__((noreturn))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertionFailed</name>
      <anchorfile>namespaceScroom_1_1Utils_1_1Detail.html</anchorfile>
      <anchor>af5d9c2e601f73135116e508920810bd8</anchor>
      <arglist>(std::string_view type, std::string_view expr, std::string_view function, std::string_view filename, unsigned int line) __attribute__((noreturn))</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ErrorSignalHandler</type>
      <name>errorSignalHandler</name>
      <anchorfile>namespaceScroom_1_1Utils_1_1Detail.html</anchorfile>
      <anchor>a7c1c38cf6641e94e7312bc79bc543c23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>counter.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/src/</path>
    <filename>counter_8cc.html</filename>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <member kind="function">
      <type>gboolean</type>
      <name>timedDumpCounts</name>
      <anchorfile>counter_8cc.html</anchorfile>
      <anchor>a14e997dd0204437df28124758bdf1b96</anchor>
      <arglist>(gpointer data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gtk-helpers.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/src/</path>
    <filename>gtk-helpers_8cc.html</filename>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
    <includes id="gtk-helpers_8hh" name="gtk-helpers.hh" local="no" imported="no">scroom/gtk-helpers.hh</includes>
    <namespace>Scroom</namespace>
    <namespace>Scroom::GtkHelpers</namespace>
    <member kind="function">
      <type>bool</type>
      <name>on_ui_thread</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>a2ade52a9fdfe46700036def64d00f9da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GtkWindow *</type>
      <name>get_parent_window</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>a68ad2ca25cec0ca8c5f9174039ea86fa</anchor>
      <arglist>(GtkWidget *widget)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>gtk-helpers_8cc.html</anchorfile>
      <anchor>a23764a07c608b18aa216c15eb981a18b</anchor>
      <arglist>(std::ostream &amp;os, cairo_rectangle_int_t const &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>gtk-helpers_8cc.html</anchorfile>
      <anchor>a9a1e805cf8f6613ef3ec1e49bed8d2d2</anchor>
      <arglist>(std::ostream &amp;os, const GdkPoint &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gtk-test-helpers.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/src/</path>
    <filename>gtk-test-helpers_8cc.html</filename>
    <includes id="gtk-helpers_8hh" name="gtk-helpers.hh" local="no" imported="no">scroom/gtk-helpers.hh</includes>
    <includes id="gtk-test-helpers_8hh" name="gtk-test-helpers.hh" local="no" imported="no">scroom/gtk-test-helpers.hh</includes>
    <namespace>Scroom</namespace>
    <namespace>Scroom::GtkTestHelpers</namespace>
  </compound>
  <compound kind="file">
    <name>progressinterfacehelpers.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/src/</path>
    <filename>progressinterfacehelpers_8cc.html</filename>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
    <includes id="progressinterfacehelpers_8hh" name="progressinterfacehelpers.hh" local="no" imported="no">scroom/progressinterfacehelpers.hh</includes>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Utils</namespace>
    <namespace>Scroom::Utils::Detail</namespace>
  </compound>
  <compound kind="file">
    <name>bookkeeping-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/test/</path>
    <filename>bookkeeping-tests_8cc.html</filename>
    <includes id="bookkeeping_8hh" name="bookkeeping.hh" local="no" imported="no">scroom/bookkeeping.hh</includes>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>bookkeeping-tests_8cc.html</anchorfile>
      <anchor>ac7f1686ca36c22c382bba2f5a628fe13</anchor>
      <arglist>(token_arithmatic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>bookkeeping-tests_8cc.html</anchorfile>
      <anchor>a7f01720577ff97f68eedaa7af58f5238</anchor>
      <arglist>(basic_usage)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>counter-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/test/</path>
    <filename>counter-tests_8cc.html</filename>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <class kind="class">TestCounted</class>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>counter-tests_8cc.html</anchorfile>
      <anchor>a051c835897a74033f02dae330c58cb42</anchor>
      <arglist>(count)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gtkhelper-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/test/</path>
    <filename>gtkhelper-tests_8cc.html</filename>
    <includes id="gtk-helpers_8hh" name="gtk-helpers.hh" local="no" imported="no">scroom/gtk-helpers.hh</includes>
    <includes id="gtk-test-helpers_8hh" name="gtk-test-helpers.hh" local="no" imported="no">scroom/gtk-test-helpers.hh</includes>
    <class kind="class">anonymous_namespace{gtkhelper-tests.cc}::B</class>
    <namespace>anonymous_namespace{gtkhelper-tests.cc}</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>b</name>
      <anchorfile>gtkhelper-tests_8cc.html</anchorfile>
      <anchor>a76b40d65a91db0d36333b5b1e627d199</anchor>
      <arglist>(const B::Ptr &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>gtkhelper-tests_8cc.html</anchorfile>
      <anchor>abce25c5dd3483eeb76bc9d32912f50ab</anchor>
      <arglist>(function_returning_bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>gtkhelper-tests_8cc.html</anchorfile>
      <anchor>a6e3906ba2925e8572fb2464aefcd813f</anchor>
      <arglist>(on_ui_thread_test)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>observable-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/test/</path>
    <filename>observable-tests_8cc.html</filename>
    <includes id="observable_8hh" name="observable.hh" local="no" imported="no">scroom/observable.hh</includes>
    <class kind="class">TestObserver</class>
    <class kind="class">TestObservable</class>
    <class kind="class">TestRecursiveObservable</class>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>observable-tests_8cc.html</anchorfile>
      <anchor>a673da05745d03032dd474593f2c9a6f8</anchor>
      <arglist>(register_observer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>observable-tests_8cc.html</anchorfile>
      <anchor>a27291bf05a0e8b980df085308114abbc</anchor>
      <arglist>(register_weak_observer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>observable-tests_8cc.html</anchorfile>
      <anchor>aede605c907a1dcf11c8278ca9948b001</anchor>
      <arglist>(registered_weak_observer_goes_away)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>observable-tests_8cc.html</anchorfile>
      <anchor>a9353878b21d4109ea332e562a3eac9d6</anchor>
      <arglist>(register_multiple_observers)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>observable-tests_8cc.html</anchorfile>
      <anchor>adda753a52b6dce0bf0b1933680506d30</anchor>
      <arglist>(register_observer_multiple_times)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>observable-tests_8cc.html</anchorfile>
      <anchor>a754a590b6f9e577dd245d7ac8b30e878</anchor>
      <arglist>(register_weak_observer_multiple_times)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>observable-tests_8cc.html</anchorfile>
      <anchor>a6b37f5b71286cc5ec39273735ab3418d</anchor>
      <arglist>(register_observer_recursively)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>observable-tests_8cc.html</anchorfile>
      <anchor>ad0b21d151136fb154c63909fd7d39b1f</anchor>
      <arglist>(shared_from_this)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>observable-tests_8cc.html</anchorfile>
      <anchor>a05022d5a2a9347aa8b6133f0d267b9e5</anchor>
      <arglist>(deleting_observable_deletes_observer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>progressinterfacebroadcaster-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/test/</path>
    <filename>progressinterfacebroadcaster-tests_8cc.html</filename>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
    <includes id="progressinterfacehelpers_8hh" name="progressinterfacehelpers.hh" local="no" imported="no">scroom/progressinterfacehelpers.hh</includes>
    <includes id="progressstateinterfacestub_8hh" name="progressstateinterfacestub.hh" local="yes" imported="no">progressstateinterfacestub.hh</includes>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfacebroadcaster-tests_8cc.html</anchorfile>
      <anchor>a1b972418928920a92aab8ee9a3fdc023</anchor>
      <arglist>(each_child_is_notified)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfacebroadcaster-tests_8cc.html</anchorfile>
      <anchor>a106c124c03245ba5275816982f28c324</anchor>
      <arglist>(late_children_receive_current_state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfacebroadcaster-tests_8cc.html</anchorfile>
      <anchor>a0e8673b1cc5e2447ec54c129fbbd8e4b</anchor>
      <arglist>(unsubscribed_children_stop_receiving_events)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>progressinterfaceconversion-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/test/</path>
    <filename>progressinterfaceconversion-tests_8cc.html</filename>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
    <includes id="progressinterfacehelpers_8hh" name="progressinterfacehelpers.hh" local="no" imported="no">scroom/progressinterfacehelpers.hh</includes>
    <includes id="progressstateinterfacestub_8hh" name="progressstateinterfacestub.hh" local="yes" imported="no">progressstateinterfacestub.hh</includes>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfaceconversion-tests_8cc.html</anchorfile>
      <anchor>a712795f5fd887c1cc34cf60b8de01431</anchor>
      <arglist>(test_ProgressInterfaceFromProgressStateInterface)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfaceconversion-tests_8cc.html</anchorfile>
      <anchor>a2576f20ee253cd1fbeccf527408e3dde</anchor>
      <arglist>(test_ProgressStateInterfaceFromProgressInterface)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>progressinterfacemultiplexer-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/test/</path>
    <filename>progressinterfacemultiplexer-tests_8cc.html</filename>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
    <includes id="progressinterfacehelpers_8hh" name="progressinterfacehelpers.hh" local="no" imported="no">scroom/progressinterfacehelpers.hh</includes>
    <includes id="progressstateinterfacestub_8hh" name="progressstateinterfacestub.hh" local="yes" imported="no">progressstateinterfacestub.hh</includes>
    <class kind="class">ProgressInterfaceMultiplexer_Fixture</class>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfacemultiplexer-tests_8cc.html</anchorfile>
      <anchor>a6aa915c73ac79e7bf393dd576df96da9</anchor>
      <arglist>(each_subinterface_contributes_proportionally)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfacemultiplexer-tests_8cc.html</anchorfile>
      <anchor>a316bdacc478c5f8008fdd997c44e30d2</anchor>
      <arglist>(idle_subinterfaces_dont_count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfacemultiplexer-tests_8cc.html</anchorfile>
      <anchor>a1b8d907cc66749da51d69735d46bf9da</anchor>
      <arglist>(finishing_the_last_interface_resets_progress)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfacemultiplexer-tests_8cc.html</anchorfile>
      <anchor>a09a529225c75fef01adbcdb49861ed10</anchor>
      <arglist>(disappearing_clients_dont_count_any_more)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfacemultiplexer-tests_8cc.html</anchorfile>
      <anchor>acd2673171e6aefa312fc3dd2d8f5f367</anchor>
      <arglist>(waiting_plus_working_equals_working)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfacemultiplexer-tests_8cc.html</anchorfile>
      <anchor>a5b4c072d4af4b2ee4e1c436ad4a20bc0</anchor>
      <arglist>(waiting_plus_finished_equals_waiting)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfacemultiplexer-tests_8cc.html</anchorfile>
      <anchor>a399c0d81bf72d7119f8f17515ecf65d2</anchor>
      <arglist>(working_plus_finished_equals_working)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfacemultiplexer-tests_8cc.html</anchorfile>
      <anchor>a28547d83e548e6aacd342ea0dbb67383</anchor>
      <arglist>(working_plus_waiting_equals_working)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfacemultiplexer-tests_8cc.html</anchorfile>
      <anchor>aa82b4ac3d346d3afafaef971c50cbe3f</anchor>
      <arglist>(finished_plus_waiting_equals_waiting)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>progressinterfacemultiplexer-tests_8cc.html</anchorfile>
      <anchor>a3d32924991692169b9985606a2805e12</anchor>
      <arglist>(finished_plus_working_equals_working)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>progressstateinterfacestub.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/test/</path>
    <filename>progressstateinterfacestub_8cc.html</filename>
    <includes id="progressstateinterfacestub_8hh" name="progressstateinterfacestub.hh" local="yes" imported="no">progressstateinterfacestub.hh</includes>
    <includes id="progressinterfacehelpers_8hh" name="progressinterfacehelpers.hh" local="no" imported="no">scroom/progressinterfacehelpers.hh</includes>
  </compound>
  <compound kind="file">
    <name>progressstateinterfacestub.hh</name>
    <path>/home/runner/work/scroom/scroom/libs/util/test/</path>
    <filename>progressstateinterfacestub_8hh.html</filename>
    <includes id="progressinterfacehelpers_8hh" name="progressinterfacehelpers.hh" local="no" imported="no">scroom/progressinterfacehelpers.hh</includes>
    <class kind="class">ProgressStateInterfaceStub</class>
  </compound>
  <compound kind="file">
    <name>rectangletests.cc</name>
    <path>/home/runner/work/scroom/scroom/libs/util/test/</path>
    <filename>rectangletests_8cc.html</filename>
    <includes id="gtk-helpers_8hh" name="gtk-helpers.hh" local="no" imported="no">scroom/gtk-helpers.hh</includes>
    <includes id="linearsegment_8hh" name="linearsegment.hh" local="no" imported="no">scroom/linearsegment.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <class kind="class">RectangleHorizontalTestScaffold</class>
    <class kind="class">RectangleVerticalTestScaffold</class>
    <member kind="typedef">
      <type>boost::mpl::list&lt; Segment&lt; int &gt;, RectangleHorizontalTestScaffold, RectangleVerticalTestScaffold &gt;</type>
      <name>test_types</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>abd88b397c8150cb266dde8924abfff71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>containedSegmentEqualsIntersection</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>a5ea92059d572f1e41584ffee83250d38</anchor>
      <arglist>(const Scaffold &amp;container, const Scaffold &amp;contained)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectsImpliesNonEmptyIntersection</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>ac9efe8024f034d9dd7d2ad130dcace77</anchor>
      <arglist>(const Scaffold &amp;a, const Scaffold &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE_TEMPLATE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>a9526991bc46875ab8a0c13d1e1402a59</anchor>
      <arglist>(testCreateSegment, Scaffold, test_types)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE_TEMPLATE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>a40fd6fb666f93600ab92a47ef3184c55</anchor>
      <arglist>(testMoveTo, Scaffold, test_types)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE_TEMPLATE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>ad075767a061eda70742d341edbbc24af</anchor>
      <arglist>(testReduceSizeToMultipleOf, Scaffold, test_types)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE_TEMPLATE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>a43b58a9bea057dfc3d0ed9542aac311d</anchor>
      <arglist>(testContainsPoint, Scaffold, test_types)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE_TEMPLATE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>a7c06289c8ebb600b83a4320de0011df5</anchor>
      <arglist>(testContainsSegment, Scaffold, test_types)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE_TEMPLATE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>a485abb9fb75bcd2ad35e349fd86ed2db</anchor>
      <arglist>(testIntersects, Scaffold, test_types)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE_TEMPLATE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>a4ea5cdd80e7323b52db4feb589e21ec6</anchor>
      <arglist>(testIntersection, Scaffold, test_types)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>a8d6de62872517cd048c27bf2dc33c5ad</anchor>
      <arglist>(testRetrievingHorizontallyAndVertically)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>a8db307fdddadfda0f7f86caf46cfbb98</anchor>
      <arglist>(testConversionToAndFromGdkRectangle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>adb538940ce34bd58bf23ee221e34c2c3</anchor>
      <arglist>(testCorners)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>aa30022f0667940cffdaff754bf6ca77e</anchor>
      <arglist>(testMath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>a3d3b1cf69ff5e93580bff70e49c88173</anchor>
      <arglist>(testCuts)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>a02d9c4cf1dda5e64f57c90ce7f941064</anchor>
      <arglist>(testPlus)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>aaaf6ddc1f38586ad45324f24c93333b8</anchor>
      <arglist>(testMinus)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>aa2ab85a45321d4339b1032e4b2a559bd</anchor>
      <arglist>(testMultiply)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>rectangletests_8cc.html</anchorfile>
      <anchor>a4e2b4609fef1ef8154759743906c902f</anchor>
      <arglist>(testAnd)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scope-exit-tests.cpp</name>
    <path>/home/runner/work/scroom/scroom/libs/util/test/</path>
    <filename>scope-exit-tests_8cpp.html</filename>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>scope-exit-tests_8cpp.html</anchorfile>
      <anchor>af85e5232922a93839c4b14f38a1ec6c3</anchor>
      <arglist>(test_on_scope_exit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>scope-exit-tests_8cpp.html</anchorfile>
      <anchor>a17a1ee35d8befc608c84f95173b519f1</anchor>
      <arglist>(test_on_destruction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>scope-exit-tests_8cpp.html</anchorfile>
      <anchor>a780097aca76d07cc4145877c612aba5c</anchor>
      <arglist>(test_desired_optional_cleanup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>scope-exit-tests_8cpp.html</anchorfile>
      <anchor>a70c1d7f988405869502b5837c6a951a3</anchor>
      <arglist>(test_undesired_optional_cleanup)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>colormapplugin.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/colormap/</path>
    <filename>colormapplugin_8cc.html</filename>
    <includes id="colormapplugin_8hh" name="colormapplugin.hh" local="yes" imported="no">colormapplugin.hh</includes>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <includes id="colormapprovider_8hh" name="colormapprovider.hh" local="yes" imported="no">colormapprovider.hh</includes>
    <namespace>Scroom</namespace>
    <namespace>Scroom::ColormapImpl</namespace>
  </compound>
  <compound kind="file">
    <name>colormapplugin.hh</name>
    <path>/home/runner/work/scroom/scroom/plugins/colormap/</path>
    <filename>colormapplugin_8hh.html</filename>
    <includes id="plugininformationinterface_8hh" name="plugininformationinterface.hh" local="no" imported="no">scroom/plugininformationinterface.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="scroominterface_8hh" name="scroominterface.hh" local="no" imported="no">scroom/scroominterface.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <class kind="class">Scroom::ColormapImpl::ColormapPlugin</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::ColormapImpl</namespace>
  </compound>
  <compound kind="file">
    <name>colormapprovider.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/colormap/</path>
    <filename>colormapprovider_8cc.html</filename>
    <includes id="colormapprovider_8hh" name="colormapprovider.hh" local="yes" imported="no">colormapprovider.hh</includes>
    <includes id="bookkeeping_8hh" name="bookkeeping.hh" local="no" imported="no">scroom/bookkeeping.hh</includes>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="colormaps_8hh" name="colormaps.hh" local="yes" imported="no">colormaps.hh</includes>
    <namespace>anonymous_namespace{colormapprovider.cc}</namespace>
    <namespace>Scroom</namespace>
    <namespace>Scroom::ColormapImpl</namespace>
    <member kind="enumvalue">
      <name>COLUMN_NAME</name>
      <anchorfile>namespaceScroom_1_1ColormapImpl.html</anchorfile>
      <anchor>a96a49dee46290c75074b156cdd5b6a62a0fb964c09532b084b7ab3c6ab4b15459</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLUMN_POINTER</name>
      <anchorfile>namespaceScroom_1_1ColormapImpl.html</anchorfile>
      <anchor>a96a49dee46290c75074b156cdd5b6a62a832330cba15b863a66c9c9d6177d551c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>N_COLUMNS</name>
      <anchorfile>namespaceScroom_1_1ColormapImpl.html</anchorfile>
      <anchor>a96a49dee46290c75074b156cdd5b6a62ab6276a6e8897bd5f844a2f9f0970a5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_colormap_selected</name>
      <anchorfile>namespaceanonymous__namespace_02colormapprovider_8cc_03.html</anchorfile>
      <anchor>a06bfc9ab2418758baf13c001000a0885</anchor>
      <arglist>(GtkTreeView *tv, gpointer user_data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>colormapprovider.hh</name>
    <path>/home/runner/work/scroom/scroom/plugins/colormap/</path>
    <filename>colormapprovider_8hh.html</filename>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <includes id="observable_8hh" name="observable.hh" local="no" imported="no">scroom/observable.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <class kind="class">Scroom::ColormapImpl::ColormapProvider</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::ColormapImpl</namespace>
  </compound>
  <compound kind="file">
    <name>colormaps.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/colormap/</path>
    <filename>colormaps_8cc.html</filename>
    <includes id="colormaps_8hh" name="colormaps.hh" local="yes" imported="no">colormaps.hh</includes>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <namespace>Scroom</namespace>
    <namespace>Scroom::ColormapImpl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SCROOMDIR</name>
      <anchorfile>colormaps_8cc.html</anchorfile>
      <anchor>aa6b804f3644a4e3e917e2e67ca0231e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COLORMAPDIR</name>
      <anchorfile>colormaps_8cc.html</anchorfile>
      <anchor>ac346e99b41ceff73f13ec4918463d7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COLORMAPEXT</name>
      <anchorfile>colormaps_8cc.html</anchorfile>
      <anchor>ace332af3e35ca52847dc1e03c4c4fc86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PAL_HEADER</name>
      <anchorfile>colormaps_8cc.html</anchorfile>
      <anchor>a2ce7f8251828f073143b55c64f221ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PAL_VERSION</name>
      <anchorfile>colormaps_8cc.html</anchorfile>
      <anchor>aa960dd8015992b6b54dcbeb97d11ec65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BUFFERSIZE</name>
      <anchorfile>colormaps_8cc.html</anchorfile>
      <anchor>ac3146f1e9227301bb4aa518f4d336cee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>colormaps.hh</name>
    <path>/home/runner/work/scroom/scroom/plugins/colormap/</path>
    <filename>colormaps_8hh.html</filename>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <class kind="class">Scroom::ColormapImpl::Colormaps</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::ColormapImpl</namespace>
  </compound>
  <compound kind="file">
    <name>example.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/example/</path>
    <filename>example_8cc.html</filename>
    <includes id="example_8hh" name="example.hh" local="yes" imported="no">example.hh</includes>
    <includes id="examplepresentation_8hh" name="examplepresentation.hh" local="yes" imported="no">examplepresentation.hh</includes>
  </compound>
  <compound kind="file">
    <name>example.hh</name>
    <path>/home/runner/work/scroom/scroom/plugins/example/</path>
    <filename>example_8hh.html</filename>
    <includes id="plugininformationinterface_8hh" name="plugininformationinterface.hh" local="no" imported="no">scroom/plugininformationinterface.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <class kind="class">Example</class>
  </compound>
  <compound kind="file">
    <name>examplepresentation.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/example/</path>
    <filename>examplepresentation_8cc.html</filename>
    <includes id="examplepresentation_8hh" name="examplepresentation.hh" local="yes" imported="no">examplepresentation.hh</includes>
    <includes id="cairo-helpers_8hh" name="cairo-helpers.hh" local="no" imported="no">scroom/cairo-helpers.hh</includes>
  </compound>
  <compound kind="file">
    <name>examplepresentation.hh</name>
    <path>/home/runner/work/scroom/scroom/plugins/example/</path>
    <filename>examplepresentation_8hh.html</filename>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <class kind="class">ExamplePresentation</class>
  </compound>
  <compound kind="file">
    <name>measure.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/measure/src/</path>
    <filename>measure_8cc.html</filename>
    <includes id="measure_8hh" name="measure.hh" local="yes" imported="no">measure.hh</includes>
    <includes id="cairo-helpers_8hh" name="cairo-helpers.hh" local="no" imported="no">scroom/cairo-helpers.hh</includes>
    <includes id="format__stuff_8hh" name="format_stuff.hh" local="no" imported="no">scroom/format_stuff.hh</includes>
    <includes id="bookkeepingimpl_8hh" name="bookkeepingimpl.hh" local="no" imported="no">scroom/impl/bookkeepingimpl.hh</includes>
    <includes id="point_8hh" name="point.hh" local="no" imported="no">scroom/point.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
  </compound>
  <compound kind="file">
    <name>measure.hh</name>
    <path>/home/runner/work/scroom/scroom/plugins/measure/src/</path>
    <filename>measure_8hh.html</filename>
    <includes id="plugininformationinterface_8hh" name="plugininformationinterface.hh" local="no" imported="no">scroom/plugininformationinterface.hh</includes>
    <includes id="point_8hh" name="point.hh" local="no" imported="no">scroom/point.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <class kind="class">MeasureHandler</class>
    <class kind="class">Measure</class>
  </compound>
  <compound kind="file">
    <name>metadata.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/metadata/</path>
    <filename>metadata_8cc.html</filename>
    <includes id="metadata_8hh" name="metadata.hh" local="yes" imported="no">metadata.hh</includes>
    <includes id="showmetadatainterface_8hh" name="showmetadatainterface.hh" local="no" imported="no">scroom/showmetadatainterface.hh</includes>
    <member kind="function">
      <type>void</type>
      <name>on_image_properties_activate</name>
      <anchorfile>metadata_8cc.html</anchorfile>
      <anchor>a05befa08789279605954b2fd767ddeb9</anchor>
      <arglist>(GtkButton *self, gpointer user_data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>metadata.hh</name>
    <path>/home/runner/work/scroom/scroom/plugins/metadata/</path>
    <filename>metadata_8hh.html</filename>
    <includes id="plugininformationinterface_8hh" name="plugininformationinterface.hh" local="no" imported="no">scroom/plugininformationinterface.hh</includes>
    <class kind="class">Metadata</class>
  </compound>
  <compound kind="file">
    <name>pipette.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/pipette/src/</path>
    <filename>pipette_8cc.html</filename>
    <includes id="pipette_8hh" name="pipette.hh" local="yes" imported="no">pipette.hh</includes>
    <includes id="cairo-helpers_8hh" name="cairo-helpers.hh" local="no" imported="no">scroom/cairo-helpers.hh</includes>
    <includes id="format__stuff_8hh" name="format_stuff.hh" local="no" imported="no">scroom/format_stuff.hh</includes>
  </compound>
  <compound kind="file">
    <name>pipette.hh</name>
    <path>/home/runner/work/scroom/scroom/plugins/pipette/src/</path>
    <filename>pipette_8hh.html</filename>
    <includes id="pipetteviewinterface_8hh" name="pipetteviewinterface.hh" local="no" imported="no">scroom/pipetteviewinterface.hh</includes>
    <includes id="plugininformationinterface_8hh" name="plugininformationinterface.hh" local="no" imported="no">scroom/plugininformationinterface.hh</includes>
    <includes id="threadpool_8hh" name="threadpool.hh" local="no" imported="no">scroom/threadpool.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <class kind="class">PipetteHandler</class>
    <class kind="class">Pipette</class>
  </compound>
  <compound kind="file">
    <name>pipette-tests.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/pipette/test/</path>
    <filename>pipette-tests_8cc.html</filename>
    <includes id="gtk-test-helpers_8hh" name="gtk-test-helpers.hh" local="no" imported="no">scroom/gtk-test-helpers.hh</includes>
    <includes id="pipette_8hh" name="pipette.hh" local="yes" imported="no">pipette.hh</includes>
    <class kind="class">DummyPresentation</class>
    <class kind="class">DummyView</class>
    <class kind="class">DummyPluginInterface</class>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>pipette-tests_8cc.html</anchorfile>
      <anchor>aa162e95935c65930ad6e57dd48010301</anchor>
      <arglist>(pipette_selection_end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>pipette-tests_8cc.html</anchorfile>
      <anchor>ac6c704d4f87d4eeab5fe84312f3dc8da</anchor>
      <arglist>(pipette_selection_update)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>pipette-tests_8cc.html</anchorfile>
      <anchor>aec0f3c3966f9577bff8175da843eb27e</anchor>
      <arglist>(pipette_enable_disable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>pipette-tests_8cc.html</anchorfile>
      <anchor>af0c722d5f9accd605527b71e470afc65</anchor>
      <arglist>(pipette_metadata)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>pipette-tests_8cc.html</anchorfile>
      <anchor>ab05b97cd69085931fd3b3bb7331b5269</anchor>
      <arglist>(pipette_value_display_presentation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>pipette-tests_8cc.html</anchorfile>
      <anchor>a072c5bd097cbb73c580011491741e7c6</anchor>
      <arglist>(pipette_value_display_no_presentation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>pipette-tests_8cc.html</anchorfile>
      <anchor>a942443a89a8eb1c4c79986f60bad7849</anchor>
      <arglist>(pipette_view_add)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tiff.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/tiff/src/</path>
    <filename>tiff_8cc.html</filename>
    <includes id="tiff_8hh" name="tiff.hh" local="yes" imported="no">tiff.hh</includes>
    <includes id="opentiledbitmapinterface_8hh" name="opentiledbitmapinterface.hh" local="no" imported="no">scroom/opentiledbitmapinterface.hh</includes>
    <includes id="transformpresentation_8hh" name="transformpresentation.hh" local="no" imported="no">scroom/transformpresentation.hh</includes>
    <includes id="tiffsource_8hh" name="tiffsource.hh" local="yes" imported="no">tiffsource.hh</includes>
  </compound>
  <compound kind="file">
    <name>tiff.hh</name>
    <path>/home/runner/work/scroom/scroom/plugins/tiff/src/</path>
    <filename>tiff_8hh.html</filename>
    <includes id="opentiledbitmapinterface_8hh" name="opentiledbitmapinterface.hh" local="no" imported="no">scroom/opentiledbitmapinterface.hh</includes>
    <includes id="plugininformationinterface_8hh" name="plugininformationinterface.hh" local="no" imported="no">scroom/plugininformationinterface.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="scroominterface_8hh" name="scroominterface.hh" local="no" imported="no">scroom/scroominterface.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <class kind="class">Tiff</class>
  </compound>
  <compound kind="file">
    <name>tiffsource.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/tiff/src/</path>
    <filename>tiffsource_8cc.html</filename>
    <includes id="tiffsource_8hh" name="tiffsource.hh" local="yes" imported="no">tiffsource.hh</includes>
    <namespace>anonymous_namespace{tiffsource.cc}</namespace>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Tiff</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TT</name>
      <anchorfile>tiffsource_8cc.html</anchorfile>
      <anchor>a1d5aaac4db170d73797e019c2e2f78ae</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; ttag_t, std::string &gt;</type>
      <name>TagInfo</name>
      <anchorfile>namespaceanonymous__namespace_02tiffsource_8cc_03.html</anchorfile>
      <anchor>a96015f6d1cd3f99d868d00b658fc6702</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TIFFGetFieldChecked</name>
      <anchorfile>namespaceanonymous__namespace_02tiffsource_8cc_03.html</anchorfile>
      <anchor>a62e82fb965088d37460d098c1084fca1</anchor>
      <arglist>(const TIFFPtr &amp;file, const TagInfo &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TIFFGetFieldCheckedOr</name>
      <anchorfile>namespaceanonymous__namespace_02tiffsource_8cc_03.html</anchorfile>
      <anchor>a371dccebed7623814b28704c8243e7f5</anchor>
      <arglist>(const TIFFPtr &amp;file, const TagInfo &amp;tag, T default_value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>approx</name>
      <anchorfile>namespaceanonymous__namespace_02tiffsource_8cc_03.html</anchorfile>
      <anchor>a21d7b2d4f86f5c8ebfd822f27f5f9417</anchor>
      <arglist>(const BitmapMetaData &amp;left, const BitmapMetaData &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TIFFCloseUnlessNull</name>
      <anchorfile>namespaceanonymous__namespace_02tiffsource_8cc_03.html</anchorfile>
      <anchor>a7f913135a0ac4c36686a040acd700495</anchor>
      <arglist>(TIFF *tif)</arglist>
    </member>
    <member kind="function">
      <type>Colormap::Ptr</type>
      <name>getColorMap</name>
      <anchorfile>namespaceScroom_1_1Tiff.html</anchorfile>
      <anchor>a16a8453816281bdec1cedafadfa7c14d</anchor>
      <arglist>(const TIFFPtr &amp;tif, uint16_t bps)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; Scroom::Utils::Point&lt; double &gt; &gt;</type>
      <name>getAspectRatio</name>
      <anchorfile>namespaceScroom_1_1Tiff.html</anchorfile>
      <anchor>a89fbc3026ce677e382e655b44c83ca39</anchor>
      <arglist>(const TIFFPtr &amp;tif)</arglist>
    </member>
    <member kind="function">
      <type>ColormapHelperBase::Ptr</type>
      <name>getColormapHelper</name>
      <anchorfile>namespaceScroom_1_1Tiff.html</anchorfile>
      <anchor>af14448da0b14397e25f9736a935e5dd1</anchor>
      <arglist>(const TIFFPtr &amp;tif, uint16_t bps)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; std::tuple&lt; Scroom::TiledBitmap::BitmapMetaData, TIFFPtr &gt; &gt;</type>
      <name>open</name>
      <anchorfile>namespaceScroom_1_1Tiff.html</anchorfile>
      <anchor>a98ecc36f2682d41aa5feacbaba2cc055</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tiffsource.hh</name>
    <path>/home/runner/work/scroom/scroom/plugins/tiff/src/</path>
    <filename>tiffsource_8hh.html</filename>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <includes id="observable_8hh" name="observable.hh" local="no" imported="no">scroom/observable.hh</includes>
    <includes id="opentiledbitmapinterface_8hh" name="opentiledbitmapinterface.hh" local="no" imported="no">scroom/opentiledbitmapinterface.hh</includes>
    <includes id="pipetteviewinterface_8hh" name="pipetteviewinterface.hh" local="no" imported="no">scroom/pipetteviewinterface.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="scroominterface_8hh" name="scroominterface.hh" local="no" imported="no">scroom/scroominterface.hh</includes>
    <includes id="tiledbitmapinterface_8hh" name="tiledbitmapinterface.hh" local="no" imported="no">scroom/tiledbitmapinterface.hh</includes>
    <includes id="transformpresentation_8hh" name="transformpresentation.hh" local="no" imported="no">scroom/transformpresentation.hh</includes>
    <class kind="class">Scroom::Tiff::Source</class>
    <namespace>Scroom</namespace>
    <namespace>Scroom::Tiff</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TIFF &gt;</type>
      <name>TIFFPtr</name>
      <anchorfile>namespaceScroom_1_1Tiff.html</anchorfile>
      <anchor>a0a251765fe27458966a781ecd875a374</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; std::tuple&lt; Scroom::TiledBitmap::BitmapMetaData, TIFFPtr &gt; &gt;</type>
      <name>open</name>
      <anchorfile>namespaceScroom_1_1Tiff.html</anchorfile>
      <anchor>a98ecc36f2682d41aa5feacbaba2cc055</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sizedeterminer.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/transparent-overlay/src/</path>
    <filename>sizedeterminer_8cc.html</filename>
    <includes id="sizedeterminer_8hh" name="sizedeterminer.hh" local="yes" imported="no">sizedeterminer.hh</includes>
    <includes id="assertions_8hh" name="assertions.hh" local="no" imported="no">scroom/assertions.hh</includes>
    <includes id="gtk-helpers_8hh" name="gtk-helpers.hh" local="no" imported="no">scroom/gtk-helpers.hh</includes>
    <namespace>anonymous_namespace{sizedeterminer.cc}</namespace>
    <member kind="function">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>DetermineSize</name>
      <anchorfile>namespaceanonymous__namespace_02sizedeterminer_8cc_03.html</anchorfile>
      <anchor>a00905ae534493c5951489c3df27a7b92</anchor>
      <arglist>(const std::list&lt; PresentationInterface::Ptr &gt; &amp;presentations)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; K &gt;</type>
      <name>keys</name>
      <anchorfile>namespaceanonymous__namespace_02sizedeterminer_8cc_03.html</anchorfile>
      <anchor>ae83cee782a5c3b96625583459ab5582c</anchor>
      <arglist>(std::map&lt; K, V &gt; const &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sizedeterminer.hh</name>
    <path>/home/runner/work/scroom/scroom/plugins/transparent-overlay/src/</path>
    <filename>sizedeterminer_8hh.html</filename>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="resizablepresentationinterface_8hh" name="resizablepresentationinterface.hh" local="no" imported="no">scroom/resizablepresentationinterface.hh</includes>
    <class kind="class">SizeDeterminer</class>
    <class kind="class">SizeDeterminer::PresentationData</class>
  </compound>
  <compound kind="file">
    <name>transparentoverlay.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/transparent-overlay/src/</path>
    <filename>transparentoverlay_8cc.html</filename>
    <includes id="transparentoverlay_8hh" name="transparentoverlay.hh" local="yes" imported="no">transparentoverlay.hh</includes>
    <includes id="transparentoverlaypresentation_8hh" name="transparentoverlaypresentation.hh" local="yes" imported="no">transparentoverlaypresentation.hh</includes>
  </compound>
  <compound kind="file">
    <name>transparentoverlay.hh</name>
    <path>/home/runner/work/scroom/scroom/plugins/transparent-overlay/src/</path>
    <filename>transparentoverlay_8hh.html</filename>
    <includes id="plugininformationinterface_8hh" name="plugininformationinterface.hh" local="no" imported="no">scroom/plugininformationinterface.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <class kind="class">TransparentOverlay</class>
  </compound>
  <compound kind="file">
    <name>transparentoverlaypresentation.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/transparent-overlay/src/</path>
    <filename>transparentoverlaypresentation_8cc.html</filename>
    <includes id="transparentoverlaypresentation_8hh" name="transparentoverlaypresentation.hh" local="yes" imported="no">transparentoverlaypresentation.hh</includes>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <class kind="struct">anonymous_namespace{transparentoverlaypresentation.cc}::ColorComparer</class>
    <namespace>anonymous_namespace{transparentoverlaypresentation.cc}</namespace>
    <member kind="variable">
      <type>const std::list&lt; Color &gt;</type>
      <name>colors</name>
      <anchorfile>namespaceanonymous__namespace_02transparentoverlaypresentation_8cc_03.html</anchorfile>
      <anchor>a5d2074d7840f9d66c2b18260065ef697</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transparentoverlaypresentation.hh</name>
    <path>/home/runner/work/scroom/scroom/plugins/transparent-overlay/src/</path>
    <filename>transparentoverlaypresentation_8hh.html</filename>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="rectangle_8hh" name="rectangle.hh" local="no" imported="no">scroom/rectangle.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <includes id="sizedeterminer_8hh" name="sizedeterminer.hh" local="yes" imported="no">sizedeterminer.hh</includes>
    <includes id="transparentoverlayviewinfo_8hh" name="transparentoverlayviewinfo.hh" local="yes" imported="no">transparentoverlayviewinfo.hh</includes>
    <class kind="class">TransparentOverlayPresentation</class>
  </compound>
  <compound kind="file">
    <name>transparentoverlayviewinfo.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/transparent-overlay/src/</path>
    <filename>transparentoverlayviewinfo_8cc.html</filename>
    <includes id="transparentoverlayviewinfo_8hh" name="transparentoverlayviewinfo.hh" local="yes" imported="no">transparentoverlayviewinfo.hh</includes>
    <includes id="bitmap-helpers_8hh" name="bitmap-helpers.hh" local="no" imported="no">scroom/bitmap-helpers.hh</includes>
    <includes id="colormappable_8hh" name="colormappable.hh" local="no" imported="no">scroom/colormappable.hh</includes>
    <namespace>anonymous_namespace{transparentoverlayviewinfo.cc}</namespace>
    <member kind="function">
      <type>void</type>
      <name>setToggleButtonColor</name>
      <anchorfile>namespaceanonymous__namespace_02transparentoverlayviewinfo_8cc_03.html</anchorfile>
      <anchor>a706649399a1cf1938cfbfed014fd3917</anchor>
      <arglist>(GtkWidget *w, PresentationInterface::Ptr const &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>on_toggled</name>
      <anchorfile>transparentoverlayviewinfo_8cc.html</anchorfile>
      <anchor>aafa184efb6eac85ffee43095f44fa12b</anchor>
      <arglist>(GtkToggleButton *button, gpointer data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transparentoverlayviewinfo.hh</name>
    <path>/home/runner/work/scroom/scroom/plugins/transparent-overlay/src/</path>
    <filename>transparentoverlayviewinfo_8hh.html</filename>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="progressinterfacehelpers_8hh" name="progressinterfacehelpers.hh" local="no" imported="no">scroom/progressinterfacehelpers.hh</includes>
    <includes id="utilities_8hh" name="utilities.hh" local="no" imported="no">scroom/utilities.hh</includes>
    <includes id="viewinterface_8hh" name="viewinterface.hh" local="no" imported="no">scroom/viewinterface.hh</includes>
    <includes id="sizedeterminer_8hh" name="sizedeterminer.hh" local="yes" imported="no">sizedeterminer.hh</includes>
    <class kind="class">ChildView</class>
    <class kind="class">TransparentOverlayViewInfo</class>
  </compound>
  <compound kind="file">
    <name>determine-size-test.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/transparent-overlay/test/</path>
    <filename>determine-size-test_8cc.html</filename>
    <includes id="gtk-helpers_8hh" name="gtk-helpers.hh" local="no" imported="no">scroom/gtk-helpers.hh</includes>
    <includes id="presentationinterface_8hh" name="presentationinterface.hh" local="no" imported="no">scroom/presentationinterface.hh</includes>
    <includes id="resizablepresentationinterface_8hh" name="resizablepresentationinterface.hh" local="no" imported="no">scroom/resizablepresentationinterface.hh</includes>
    <includes id="sizedeterminer_8hh" name="sizedeterminer.hh" local="yes" imported="no">sizedeterminer.hh</includes>
    <class kind="class">anonymous_namespace{determine-size-test.cc}::PresentationInterfaceStub</class>
    <class kind="class">anonymous_namespace{determine-size-test.cc}::ResizablePresentationInterfaceStub</class>
    <class kind="class">anonymous_namespace{determine-size-test.cc}::ViewInterfaceDummy</class>
    <namespace>anonymous_namespace{determine-size-test.cc}</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dumpContainer</name>
      <anchorfile>determine-size-test_8cc.html</anchorfile>
      <anchor>ad46b74814ea65610c6857f956c8b8fb2</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;name, Iter const &amp;begin, Iter const &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>determine-size-test_8cc.html</anchorfile>
      <anchor>a9d7bd04b916b51f911bbd8972ac40037</anchor>
      <arglist>(std::ostream &amp;os, std::list&lt; T &gt; const &amp;l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>operator==</name>
      <anchorfile>determine-size-test_8cc.html</anchorfile>
      <anchor>a6e34aca1a1cb4233a0c57d53c480c1fa</anchor>
      <arglist>(std::weak_ptr&lt; T &gt; const &amp;left, std::weak_ptr&lt; T &gt; const &amp;right)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>determine-size-test_8cc.html</anchorfile>
      <anchor>a4eb30d9728e92207984000019d043432</anchor>
      <arglist>(determine_size_of_one_regular)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>determine-size-test_8cc.html</anchorfile>
      <anchor>a1384ad3b347100faf1580c6e67b7a7ff</anchor>
      <arglist>(determine_size_of_two_regular)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>determine-size-test_8cc.html</anchorfile>
      <anchor>afcef7ed0fd2165f9bf1a2d41387916ff</anchor>
      <arglist>(determine_size_of_one_regular_one_resizable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>determine-size-test_8cc.html</anchorfile>
      <anchor>a4c5614a7a3852d94b94190acc457cca1</anchor>
      <arglist>(determine_size_of_two_resizable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>determine-size-test_8cc.html</anchorfile>
      <anchor>a2e8d108947d3c7892d66eb5d04d16c5d</anchor>
      <arglist>(open_a_view_then_add_presentations_one_regular_one_resizable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>determine-size-test_8cc.html</anchorfile>
      <anchor>a58de5db525bc7cdf6f3dea01f25dbe78</anchor>
      <arglist>(updates_are_sent_to_multiple_views)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>plugin-test.cc</name>
    <path>/home/runner/work/scroom/scroom/plugins/transparent-overlay/test/</path>
    <filename>plugin-test_8cc.html</filename>
    <includes id="plugininformationinterface_8hh" name="plugininformationinterface.hh" local="no" imported="no">scroom/plugininformationinterface.hh</includes>
    <includes id="scroomplugin_8hh" name="scroomplugin.hh" local="no" imported="no">scroom/scroomplugin.hh</includes>
    <member kind="function">
      <type></type>
      <name>BOOST_AUTO_TEST_CASE</name>
      <anchorfile>plugin-test_8cc.html</anchorfile>
      <anchor>a37159e72046246c603b96f2287a2bc5f</anchor>
      <arglist>(get_plugin_information)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>A</name>
    <filename>classA.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; A &gt;</type>
      <name>Ptr</name>
      <anchorfile>classA.html</anchorfile>
      <anchor>acc7a6c74c438e68547070b8eddfc6061</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>A</name>
      <anchorfile>classA.html</anchorfile>
      <anchor>accd4ccd0b11e5ffb2dbf0466c1078aed</anchor>
      <arglist>(Semaphore *s1_, Semaphore *s2_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~A</name>
      <anchorfile>classA.html</anchorfile>
      <anchor>a8d74412b1ff05d7493b4c546795bf405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>A</name>
      <anchorfile>classA.html</anchorfile>
      <anchor>a3289f742bab00f99c99d049c7cf4b330</anchor>
      <arglist>(const A &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>A</name>
      <anchorfile>classA.html</anchorfile>
      <anchor>ae45d27514283a0388ced89591ce923a3</anchor>
      <arglist>(A &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>A &amp;</type>
      <name>operator=</name>
      <anchorfile>classA.html</anchorfile>
      <anchor>ac8b2dfd773a787ab13679a63adeb44b1</anchor>
      <arglist>(const A &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>A &amp;</type>
      <name>operator=</name>
      <anchorfile>classA.html</anchorfile>
      <anchor>a4bca711e2fdedf4c52de9bb134111fa4</anchor>
      <arglist>(A &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>A</name>
      <anchorfile>classA.html</anchorfile>
      <anchor>a0e04a07badd0c44b1e76ab3c481735df</anchor>
      <arglist>(Semaphore *s_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classA.html</anchorfile>
      <anchor>a877313daff9be760af89610ab9d3d04f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classA.html</anchorfile>
      <anchor>a618e70a0e68de972aa04a29d605c381f</anchor>
      <arglist>(Semaphore *s)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Semaphore *</type>
      <name>s1</name>
      <anchorfile>classA.html</anchorfile>
      <anchor>acba8a582394a47c03640eb85559f67c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Semaphore *</type>
      <name>s2</name>
      <anchorfile>classA.html</anchorfile>
      <anchor>a1dd1ab86f3eb679680f3ef57f758fd15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Semaphore *</type>
      <name>s</name>
      <anchorfile>classA.html</anchorfile>
      <anchor>a2d88ec788ef9b55a440bcd9b78d86468</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Aggregate</name>
    <filename>classAggregate.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Aggregate &gt;</type>
      <name>Ptr</name>
      <anchorfile>classAggregate.html</anchorfile>
      <anchor>a15dd0bd685f1a60b28d4945e0cd525aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addPresentation</name>
      <anchorfile>classAggregate.html</anchorfile>
      <anchor>a39c3b46c0741bd56b418035e59d1e802</anchor>
      <arglist>(PresentationInterface::Ptr const &amp;presentation)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AsyncDeleter</name>
    <filename>classAsyncDeleter.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>AsyncDeleter</name>
      <anchorfile>classAsyncDeleter.html</anchorfile>
      <anchor>a78dce23b8bc0fe9ca5be3da6bba596c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classAsyncDeleter.html</anchorfile>
      <anchor>a520663653f446a9805acdd77e1d26a0c</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ThreadPool::Ptr</type>
      <name>deleter</name>
      <anchorfile>classAsyncDeleter.html</anchorfile>
      <anchor>af6749fac2a5a1157e422bfe25a4d97f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>B</name>
    <filename>classB.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::shared_ptr&lt; B&lt; R &gt; &gt;</type>
      <name>Ptr</name>
      <anchorfile>classB.html</anchorfile>
      <anchor>a5574f1c0e8652aab70c042f59bec7158</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>B</name>
      <anchorfile>classB.html</anchorfile>
      <anchor>a943fe7aa6b9eea42c83db59b84c7d080</anchor>
      <arglist>(Semaphore *s_, R result_)</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>operator()</name>
      <anchorfile>classB.html</anchorfile>
      <anchor>a3f8f3a1552ba8c37a8fcc253f9cb8f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classB.html</anchorfile>
      <anchor>a8d4a36f9d7c0a0e432b65d285ffa413f</anchor>
      <arglist>(Semaphore *s, R result)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Semaphore *</type>
      <name>s</name>
      <anchorfile>classB.html</anchorfile>
      <anchor>a63e36b4d0ec2fe67ef2b093414e5712d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>R</type>
      <name>result</name>
      <anchorfile>classB.html</anchorfile>
      <anchor>a51926ecf60905720aa1b6067497625cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>anonymous_namespace{gtkhelper-tests.cc}::B</name>
    <filename>classanonymous__namespace_02gtkhelper-tests_8cc_03_1_1B.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; B &gt;</type>
      <name>Ptr</name>
      <anchorfile>classanonymous__namespace_02gtkhelper-tests_8cc_03_1_1B.html</anchorfile>
      <anchor>a571dc5a5be71739b5552d3d0b18aabb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; B &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classanonymous__namespace_02gtkhelper-tests_8cc_03_1_1B.html</anchorfile>
      <anchor>af93d9b0f377d88561db0b878b20a5030</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classanonymous__namespace_02gtkhelper-tests_8cc_03_1_1B.html</anchorfile>
      <anchor>a1454e9d909ad1f87e6c2408346b26da6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::Base</name>
    <filename>classScroom_1_1Utils_1_1Base.html</filename>
    <member kind="function">
      <type></type>
      <name>Base</name>
      <anchorfile>classScroom_1_1Utils_1_1Base.html</anchorfile>
      <anchor>ab5cfb041b339d8cdd32b01f346ac4a33</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Base</name>
      <anchorfile>classScroom_1_1Utils_1_1Base.html</anchorfile>
      <anchor>a0905ca89614ba5543bec1668ced1f2bf</anchor>
      <arglist>(const Base &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Base</name>
      <anchorfile>classScroom_1_1Utils_1_1Base.html</anchorfile>
      <anchor>af745d1e7c7e25e4de67ef69ad92819d3</anchor>
      <arglist>(Base &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Base &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1Base.html</anchorfile>
      <anchor>a8985009df1baba1a1c81993a656f7e97</anchor>
      <arglist>(const Base &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Base &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1Base.html</anchorfile>
      <anchor>a87284b95256cad0952fb87652e4ed98c</anchor>
      <arglist>(Base &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Base</name>
      <anchorfile>classScroom_1_1Utils_1_1Base.html</anchorfile>
      <anchor>af4bdad20963b6957da0277e4f1dae600</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; R &gt;</type>
      <name>shared_from_this</name>
      <anchorfile>classScroom_1_1Utils_1_1Base.html</anchorfile>
      <anchor>ac257b173d59a12c2fecbaaadb8cc3f49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; R const  &gt;</type>
      <name>shared_from_this</name>
      <anchorfile>classScroom_1_1Utils_1_1Base.html</anchorfile>
      <anchor>a64094ddcb73aa419175238779f99ef27</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseCounter</name>
    <filename>classBaseCounter.html</filename>
    <member kind="function">
      <type></type>
      <name>BaseCounter</name>
      <anchorfile>classBaseCounter.html</anchorfile>
      <anchor>a9bdc0bca3cda11680cb9ade96584637b</anchor>
      <arglist>(const std::string &amp;name, unsigned int secs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classBaseCounter.html</anchorfile>
      <anchor>a91467350a2efdaaa819aa4dbec85291b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classBaseCounter.html</anchorfile>
      <anchor>a9db314a45e31789c4b503b64f9716536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>secs</name>
      <anchorfile>classBaseCounter.html</anchorfile>
      <anchor>aad3c4acad4493d6a0bc0b1075b1fcf2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>started</name>
      <anchorfile>classBaseCounter.html</anchorfile>
      <anchor>a33f056a3f265b27071064dbce424523d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>count</name>
      <anchorfile>classBaseCounter.html</anchorfile>
      <anchor>a86e32bbeb2a1fa9c507fca51285813f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>struct timespec</type>
      <name>t</name>
      <anchorfile>classBaseCounter.html</anchorfile>
      <anchor>a5696c3f3f53d59931833f7ed8fc655f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static unsigned int</type>
      <name>columnWidth</name>
      <anchorfile>classBaseCounter.html</anchorfile>
      <anchor>a150940f7688f27c893e70da6722de5f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BitCountLut</name>
    <filename>classBitCountLut.html</filename>
    <member kind="function">
      <type></type>
      <name>BitCountLut</name>
      <anchorfile>classBitCountLut.html</anchorfile>
      <anchor>acd52591421865ddac0e330236ce6fe9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>byte</type>
      <name>lookup</name>
      <anchorfile>classBitCountLut.html</anchorfile>
      <anchor>a9894e0293a024d63740b7c15cf53bff0</anchor>
      <arglist>(byte index)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>byte</type>
      <name>lut</name>
      <anchorfile>classBitCountLut.html</anchorfile>
      <anchor>a98992a69cd80f781325f971ee1048e58</anchor>
      <arglist>[256]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Scroom::TiledBitmap::BitmapMetaData</name>
    <filename>structScroom_1_1TiledBitmap_1_1BitmapMetaData.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>structScroom_1_1TiledBitmap_1_1BitmapMetaData.html</anchorfile>
      <anchor>a253565042c3ccff0767b1a71f168158e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>bitsPerSample</name>
      <anchorfile>structScroom_1_1TiledBitmap_1_1BitmapMetaData.html</anchorfile>
      <anchor>a86250b9ade69c4581854e533283e582a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>samplesPerPixel</name>
      <anchorfile>structScroom_1_1TiledBitmap_1_1BitmapMetaData.html</anchorfile>
      <anchor>aad1d5e2334e32d7e9fad7e5cc31f0c45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scroom::Utils::Rectangle&lt; int &gt;</type>
      <name>rect</name>
      <anchorfile>structScroom_1_1TiledBitmap_1_1BitmapMetaData.html</anchorfile>
      <anchor>ad3eaee769ffd723ea5a4d6eda73963b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; Scroom::Utils::Point&lt; double &gt; &gt;</type>
      <name>aspectRatio</name>
      <anchorfile>structScroom_1_1TiledBitmap_1_1BitmapMetaData.html</anchorfile>
      <anchor>acf26ff10a150a0f048bc38621a150a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ColormapHelperBase::Ptr</type>
      <name>colormapHelper</name>
      <anchorfile>structScroom_1_1TiledBitmap_1_1BitmapMetaData.html</anchorfile>
      <anchor>a305fcbe326cb847c10dce31d453ea73a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Bitmap::BitmapSurface</name>
    <filename>classScroom_1_1Bitmap_1_1BitmapSurface.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BitmapSurface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Bitmap_1_1BitmapSurface.html</anchorfile>
      <anchor>a2c5f307f8fb27e77610b97bbcd6e282c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BitmapSurface</name>
      <anchorfile>classScroom_1_1Bitmap_1_1BitmapSurface.html</anchorfile>
      <anchor>a83d3ef3f4aafa31722db153e342a9bd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BitmapSurface</name>
      <anchorfile>classScroom_1_1Bitmap_1_1BitmapSurface.html</anchorfile>
      <anchor>a01b392735034681d7dfabc4fc2f71cfa</anchor>
      <arglist>(const BitmapSurface &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BitmapSurface</name>
      <anchorfile>classScroom_1_1Bitmap_1_1BitmapSurface.html</anchorfile>
      <anchor>a619351678bc0f02602a08ff6e97c9a21</anchor>
      <arglist>(BitmapSurface &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>BitmapSurface &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Bitmap_1_1BitmapSurface.html</anchorfile>
      <anchor>a0ce332ca1beb87966a5e06b490ab1378</anchor>
      <arglist>(const BitmapSurface &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>BitmapSurface &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Bitmap_1_1BitmapSurface.html</anchorfile>
      <anchor>a32b29bd80a5a34800776a1cd9f9eae07</anchor>
      <arglist>(BitmapSurface &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>cairo_surface_t *</type>
      <name>get</name>
      <anchorfile>classScroom_1_1Bitmap_1_1BitmapSurface.html</anchorfile>
      <anchor>a4e20b367582344b95c31226ba88ae3a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Bitmap_1_1BitmapSurface.html</anchorfile>
      <anchor>a697961480f8888e1a149d4be54adb9e7</anchor>
      <arglist>(int width, int height, cairo_format_t format)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Bitmap_1_1BitmapSurface.html</anchorfile>
      <anchor>abc68ac9074fc5fdfc62dd2a42ed22de2</anchor>
      <arglist>(int width, int height, cairo_format_t format, int stride, std::shared_ptr&lt; unsigned char &gt; const &amp;data)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BitmapSurface</name>
      <anchorfile>classScroom_1_1Bitmap_1_1BitmapSurface.html</anchorfile>
      <anchor>ad184ea423900d4ba43742e85ea103ce8</anchor>
      <arglist>(int width, int height, cairo_format_t format)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BitmapSurface</name>
      <anchorfile>classScroom_1_1Bitmap_1_1BitmapSurface.html</anchorfile>
      <anchor>a9e2d358a55132f7cfb16c7eed3e2ed06</anchor>
      <arglist>(int width, int height, cairo_format_t format, int stride, std::shared_ptr&lt; unsigned char &gt; const &amp;data)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cairo_surface_t *const</type>
      <name>surface</name>
      <anchorfile>classScroom_1_1Bitmap_1_1BitmapSurface.html</anchorfile>
      <anchor>a52d5cf41eb8104774d48618032e21c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::shared_ptr&lt; unsigned char &gt;</type>
      <name>data</name>
      <anchorfile>classScroom_1_1Bitmap_1_1BitmapSurface.html</anchorfile>
      <anchor>a61d4c01e4168209eb64cd437dee9b24c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::MemoryBlobs::Blob</name>
    <filename>classScroom_1_1MemoryBlobs_1_1Blob.html</filename>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <class kind="class">Scroom::MemoryBlobs::Blob::UnloadData</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Blob &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a24b884558304d06d87210adcce94e122</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RawPageData::Ptr</type>
      <name>get</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a5f92c1a53bb27aafc2c872b3bd9c55a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RawPageData::ConstPtr</type>
      <name>getConst</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>aea1474e9fb8b35484a056d57244b0c68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RawPageData::Ptr</type>
      <name>initialize</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a943e5547833945716afd1a0c884206ea</anchor>
      <arglist>(uint8_t value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a4efac4819c3d9d77e9fbf022c61fe4c2</anchor>
      <arglist>(PageProvider::Ptr provider, size_t size)</arglist>
    </member>
    <member kind="enumeration" protection="private">
      <type></type>
      <name>State</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a50973e173ac55206712bce2ecfe361ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>UNINITIALIZED</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a50973e173ac55206712bce2ecfe361ceada65282c0b4db4b8848e8c4df565495f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>CLEAN</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a50973e173ac55206712bce2ecfe361cea7d62e6518e0d6f756da029ca3d455baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>DIRTY</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a50973e173ac55206712bce2ecfe361cea012fa49753d5787b58e4eb3454a1bf56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>COMPRESSING</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a50973e173ac55206712bce2ecfe361cea79f7443f9062063b8cac1e41d3fa1fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>UNINITIALIZED</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a50973e173ac55206712bce2ecfe361ceada65282c0b4db4b8848e8c4df565495f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>CLEAN</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a50973e173ac55206712bce2ecfe361cea7d62e6518e0d6f756da029ca3d455baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>DIRTY</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a50973e173ac55206712bce2ecfe361cea012fa49753d5787b58e4eb3454a1bf56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>COMPRESSING</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a50973e173ac55206712bce2ecfe361cea79f7443f9062063b8cac1e41d3fa1fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Blob</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a8f8dc363aea3e891bf0812467e4fd165</anchor>
      <arglist>(PageProvider::Ptr provider, size_t size)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unload</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a520b5c505d0dc5d53c7909e20694f6a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RawPageData::Ptr</type>
      <name>load</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a775037c70c28e8e06cd2731a6968a410</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>compress</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a2f3d263c27f8084dbd467aab9f175b35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PageProvider::Ptr</type>
      <name>provider</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>ae064fcf4f4048f8ee8ca404ba913cb22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>af187e73ce1bad805c9dd36c53d884472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t *</type>
      <name>data</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a24cf060940ca750d2ca7233998d913e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>State</type>
      <name>state</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a8eade4f3c6520d1240989f07c1bf9311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>ae06666aefeb402daafce8dc6ecf571b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RawPageData::WeakPtr</type>
      <name>weakData</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>ae30591679a07ec57c3d8b6a55fecec01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PageList</type>
      <name>pages</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a75de1680f4940a0da5026ba820e8325a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; ThreadPool &gt;</type>
      <name>cpuBound</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a1b0b84014dcdd6bab86cfe9a57f20067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>ab924d3a347477150af5227609c84e7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UnloadData</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob.html</anchorfile>
      <anchor>a963a93080579819dfa40758263afe7e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::MemoryBlocks::BlockFactoryInterface</name>
    <filename>classScroom_1_1MemoryBlocks_1_1BlockFactoryInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BlockFactoryInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1BlockFactoryInterface.html</anchorfile>
      <anchor>a43e89cda577863691d563b7d63b56b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BlockInterface::Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1BlockFactoryInterface.html</anchorfile>
      <anchor>a77ed4c0f1d6b5ead2bbd775177bd3b89</anchor>
      <arglist>(size_t count, size_t size)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::MemoryBlocks::BlockInterface</name>
    <filename>classScroom_1_1MemoryBlocks_1_1BlockInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BlockInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1BlockInterface.html</anchorfile>
      <anchor>a86bca4baf5373a3a543254a7459ea5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; BlockInterface &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1BlockInterface.html</anchorfile>
      <anchor>a413b6c76fd8de3d57cef5825868e42e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PageList</type>
      <name>getPages</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1BlockInterface.html</anchorfile>
      <anchor>a6080b154e029fecc1f62dbf264e80f29</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual RawPageData::Ptr</type>
      <name>get</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1BlockInterface.html</anchorfile>
      <anchor>a7135b99a8c0fcc5ef51492665e3ec87d</anchor>
      <arglist>(size_t id)=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Page</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1BlockInterface.html</anchorfile>
      <anchor>a66d145c56e1747e0aecb5309042ab183</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::ProgressInterfaceMultiplexer::Child</name>
    <filename>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1Child.html</filename>
    <base>Scroom::Utils::ProgressInterfaceFromProgressStateInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Child &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1Child.html</anchorfile>
      <anchor>ae3d36ce3669ef433183c7321e0d2d0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Child</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1Child.html</anchorfile>
      <anchor>aa763d45cf1db715159941f50aa5c1578</anchor>
      <arglist>(const Child &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Child</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1Child.html</anchorfile>
      <anchor>a04906beb12a296654a1189dcfa5d7474</anchor>
      <arglist>(Child &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Child &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1Child.html</anchorfile>
      <anchor>ae83373f8d28945185a2ab2a6be4a4049</anchor>
      <arglist>(const Child &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Child &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1Child.html</anchorfile>
      <anchor>a225234c7dc1f046ac2056e3f6d613457</anchor>
      <arglist>(Child &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Child</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1Child.html</anchorfile>
      <anchor>a5461f47ffead60b2c64e601c01a5a553</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProgress</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1Child.html</anchorfile>
      <anchor>a938f597b00f36e0d00788ac384af6e26</anchor>
      <arglist>(State s, double progress=0.0) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1Child.html</anchorfile>
      <anchor>a22ad2b2559a4627f21682e22bf57e23e</anchor>
      <arglist>(ProgressInterfaceMultiplexer::Ptr parent, ChildData::Ptr data)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Child</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1Child.html</anchorfile>
      <anchor>a6f07e6a0bae6c8520c174eecf7f94be5</anchor>
      <arglist>(ProgressInterfaceMultiplexer::Ptr parent, ChildData::Ptr data)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProgressInterfaceMultiplexer::Ptr</type>
      <name>parent</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1Child.html</anchorfile>
      <anchor>ae2a5099f5ceaa5a005df7d69347a236d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ChildData::Ptr</type>
      <name>data</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1Child.html</anchorfile>
      <anchor>ae5a1bc87ce79d72e95fd120c7da31226</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::ProgressInterfaceMultiplexer::ChildData</name>
    <filename>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1ChildData.html</filename>
    <base>Scroom::Utils::ProgressStateInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ChildData &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1ChildData.html</anchorfile>
      <anchor>ab7dccff7a84950b23a383f16213db749</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearFinished</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1ChildData.html</anchorfile>
      <anchor>a315d2baabcec489c3a78fccb54aa0ff4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProgress</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1ChildData.html</anchorfile>
      <anchor>a4483488f88566ef7cce7a8c0827a32ed</anchor>
      <arglist>(State s, double progress=0.0) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1ChildData.html</anchorfile>
      <anchor>abbce47347e158ad34ebf0f5ce13ff5be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1ChildData.html</anchorfile>
      <anchor>a7c48d9e8c9c4b0ddf887a0cbdb909d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ProgressStateInterface::State</type>
      <name>state</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1ChildData.html</anchorfile>
      <anchor>a2bd614bbc2840a788bf13255dd5bc919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>progress</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1ChildData.html</anchorfile>
      <anchor>a5bde59fb1f20fb350622a5cd117dfce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ChildData</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer_1_1ChildData.html</anchorfile>
      <anchor>a3aadac87197b04eac759f9853445478e</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChildView</name>
    <filename>classChildView.html</filename>
    <base>ViewInterface</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ChildView &gt;</type>
      <name>Ptr</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>a07612c87b40469b94ac93e2f2905a21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>a63bd209b3646afd63bbebf18e74b737e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>ProgressInterface::Ptr</type>
      <name>getProgressInterface</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>a1cafa490c4005a996cc35767b23a28b8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSideWidget</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>a3ac962e90947593473297cfda33e6a05</anchor>
      <arglist>(std::string title, GtkWidget *w) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSideWidget</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>aac1588838574fb015a14f52394e049cb</anchor>
      <arglist>(GtkWidget *w) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToToolbar</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>aed8e151e6dae2b52378c354adfc6e69a</anchor>
      <arglist>(GtkToolItem *ti) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromToolbar</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>a74fab7d3aa0146399c0f870166cb1eef</anchor>
      <arglist>(GtkToolItem *ti) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSelectionListener</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>abe41bb6680f4e923486f1eb9bab9839e</anchor>
      <arglist>(SelectionListener::Ptr listener) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPostRenderer</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>a4abac056e7c55ac972c4162531a2197c</anchor>
      <arglist>(PostRenderer::Ptr renderer) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatusMessage</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>ad53ec871927c7e56baab1871cd2711a0</anchor>
      <arglist>(const std::string &amp;message) override</arglist>
    </member>
    <member kind="function">
      <type>PresentationInterface::Ptr</type>
      <name>getCurrentPresentation</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>af20e11c2dd07c1e8a786ae476ffa4897</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToolButton</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>a9ac3b04d66ee53e1ff8ee916933fe11d</anchor>
      <arglist>(GtkToggleButton *name, ToolStateListener::Ptr callback) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>a71a62425bde015dcaed7c8828e79a861</anchor>
      <arglist>(std::shared_ptr&lt; TransparentOverlayViewInfo &gt; const &amp;parent)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ChildView</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>aef80d64ca8d3c657ba1b9aecf901672b</anchor>
      <arglist>(std::shared_ptr&lt; TransparentOverlayViewInfo &gt; parent)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; TransparentOverlayViewInfo &gt;</type>
      <name>parent</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>aef2ad8a98f9bb7ac52cdd77a72a123cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProgressInterface::Ptr</type>
      <name>progressInterface</name>
      <anchorfile>classChildView.html</anchorfile>
      <anchor>ac02cc478ae940994824652b44e0ff5f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Color</name>
    <filename>classColor.html</filename>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>a6fae8aa8b75d27cb134234e75b41caf2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>ae26f316e88c4e4f372ec39951bcaac28</anchor>
      <arglist>(double red_, double green_, double blue_, double alpha_=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>a677db6dbf89e2270a6b98cee939b672e</anchor>
      <arglist>(double gray, double alpha_=1.0)</arglist>
    </member>
    <member kind="function">
      <type>Color &amp;</type>
      <name>operator+=</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>acc174d44b7c00532ba90f669fb9e2a1b</anchor>
      <arglist>(const Color &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Color &amp;</type>
      <name>operator/=</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>a62864ef4c4e25029507088b8d0848fc2</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>Color &amp;</type>
      <name>operator*=</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>a0a66837aa87140f963963a1efa68489a</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getHex</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>a09b8ac4c9ffab88e55186ebc0b25345a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getRGB24</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>ac95a4d960c7a871d713babdf95c78b4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getARGB32</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>a52fc7f748b78eac3e266df3e58cb4ac5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>a80526917d45f7674d1ffdb1df0aba14a</anchor>
      <arglist>(cairo_t *cr) const</arglist>
    </member>
    <member kind="function">
      <type>GdkColor</type>
      <name>getGdkColor</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>aefae4983052184f69c7b07baa8aa350a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>getContrastingBlackOrWhite</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>a49dddd32e110bbfc3c96e159a70eb0f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Color &amp;</type>
      <name>setAlpha</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>a3f482a964b709fc87adfcff9adfa2c35</anchor>
      <arglist>(double alpha_)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>setAlpha</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>a93fb159a478ed610a7a35c4119f44f67</anchor>
      <arglist>(double alpha_) const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>aa14c59ce06c2a70f4683df266e26a261</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>red</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>a2337ea72bc849039f73077d00ab42bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>green</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>a0398a30128909996780fce10e039ac24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>blue</name>
      <anchorfile>classColor.html</anchorfile>
      <anchor>a0a35e5de46315db828b5bd56866d9fea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>anonymous_namespace{transparentoverlaypresentation.cc}::ColorComparer</name>
    <filename>structanonymous__namespace_02transparentoverlaypresentation_8cc_03_1_1ColorComparer.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structanonymous__namespace_02transparentoverlaypresentation_8cc_03_1_1ColorComparer.html</anchorfile>
      <anchor>af4d830501b5e42bcdf6a0188546059ea</anchor>
      <arglist>(Color const &amp;left, Color const &amp;right) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Colormap</name>
    <filename>classColormap.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Colormap &gt;</type>
      <name>Ptr</name>
      <anchorfile>classColormap.html</anchorfile>
      <anchor>ad11469ae94f64aa5dd9eec02d6a50e65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Colormap &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classColormap.html</anchorfile>
      <anchor>ac50e20979215c2fc8e3cec7292bf820e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Colormap &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classColormap.html</anchorfile>
      <anchor>a9981f13cad01c0e16d27c1f0293e6d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Ptr</type>
      <name>clone</name>
      <anchorfile>classColormap.html</anchorfile>
      <anchor>a49ce933aaccba53d75de85a9760b1f04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>classColormap.html</anchorfile>
      <anchor>a1b19253608c830da53cfdf5f27f1b5f3</anchor>
      <arglist>(double alpha)</arglist>
    </member>
    <member kind="function">
      <type>Ptr</type>
      <name>setAlpha</name>
      <anchorfile>classColormap.html</anchorfile>
      <anchor>a71ee90b784230078208e4fcc3d0c922e</anchor>
      <arglist>(double alpha) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colormap::Ptr</type>
      <name>create</name>
      <anchorfile>classColormap.html</anchorfile>
      <anchor>a9966b8a719d851b5e28b6b99ec6d2245</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colormap::Ptr</type>
      <name>createDefault</name>
      <anchorfile>classColormap.html</anchorfile>
      <anchor>afe589913d62741a00d269c5e72c3641b</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colormap::Ptr</type>
      <name>createDefaultInverted</name>
      <anchorfile>classColormap.html</anchorfile>
      <anchor>a88c8e6094d5e4f4251ac694c13e51874</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classColormap.html</anchorfile>
      <anchor>a77fb198e57c46af95e84f548e5853155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Color &gt;</type>
      <name>colors</name>
      <anchorfile>classColormap.html</anchorfile>
      <anchor>a3847bac6a317f36696326e4f7c0d5337</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Colormap</name>
      <anchorfile>classColormap.html</anchorfile>
      <anchor>afbda2916eb43f89f99512e951ca2c7de</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ColormapHelper</name>
    <filename>classColormapHelper.html</filename>
    <base>ColormapHelperBase</base>
    <member kind="function">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>getProperties</name>
      <anchorfile>classColormapHelper.html</anchorfile>
      <anchor>af9a597f3d5702f9b3940c6f3b0923fbf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classColormapHelper.html</anchorfile>
      <anchor>a98be23aa876b37cc9cd8e7050a50266b</anchor>
      <arglist>(int numberOfColors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>createInverted</name>
      <anchorfile>classColormapHelper.html</anchorfile>
      <anchor>ab967d893edae45fa5e71809a09076a3b</anchor>
      <arglist>(int numberOfColors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classColormapHelper.html</anchorfile>
      <anchor>a581fe463895046e6a452c9665cdc5027</anchor>
      <arglist>(Colormap::Ptr const &amp;colormap)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ColormapHelper</name>
      <anchorfile>classColormapHelper.html</anchorfile>
      <anchor>ae541030ada684dfa7e0a216f1e1a4835</anchor>
      <arglist>(Colormap::Ptr const &amp;colormap)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ColormapHelperBase</name>
    <filename>classColormapHelperBase.html</filename>
    <base>ColormapProvider</base>
    <base>Colormappable</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ColormapHelperBase &gt;</type>
      <name>Ptr</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>a8087304640c2f7b25f843c8612e7aa17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColormapHelperBase</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>a63ec49692e50c732fcc4e024b1102fd1</anchor>
      <arglist>(Colormap::Ptr const &amp;colormap)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::map&lt; std::string, std::string &gt;</type>
      <name>getProperties</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>ada34c85b0d1bd9c3634601572561904d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColormap</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>a6a6d03551fdab11d5821b2d3b909d712</anchor>
      <arglist>(Colormap::Ptr colormap) override</arglist>
    </member>
    <member kind="function">
      <type>Colormap::Ptr</type>
      <name>getOriginalColormap</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>a049ca37488f74843a67bca8f2e73dd9b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfColors</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>a40edaee47ece696a93bfff0176183029</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>getMonochromeColor</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>a6809764e5d3b572dc243e06ab60f0ba6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMonochromeColor</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>a5e4db4df4e77e947cd4cbf1f06fde9cd</anchor>
      <arglist>(const Color &amp;c) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransparentBackground</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>ac7831aa122e501fadb460acf7d324819</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableTransparentBackground</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>aa7fbcaafa5d7a6d44db8238185706122</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTransparentBackground</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>a97d03cdad03977108e174f6d67106fe3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Colormap::Ptr</type>
      <name>getColormap</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>a50a4f005cf1d8ca926d36cf0057b8552</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOriginalColormap</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>a7e20c8f57235bcf5fbd19d57848bf33c</anchor>
      <arglist>(Colormap::Ptr colormap)</arglist>
    </member>
    <member kind="variable">
      <type>Colormap::Ptr</type>
      <name>colormap</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>ac21006fadbde96cbd58993ce0e05ca18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Colormap::Ptr</type>
      <name>originalColormap</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>a554722edde464a6024011ddc9a2df8ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>OperationNotSupported</name>
      <anchorfile>classColormapHelperBase.html</anchorfile>
      <anchor>aa18e2ef3643e90b27cd5dc0f258e1f26</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Colormappable</name>
    <filename>classColormappable.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Colormappable &gt;</type>
      <name>Ptr</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>a5a0a12959d518d3f36185b07dc420383</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Colormappable &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>a666c178268f24029f9459dc0eb44f200</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setColormap</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>aa6e4b4bd6dbd16f0da2ba9177a12712a</anchor>
      <arglist>(Colormap::Ptr colormap)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Colormap::Ptr</type>
      <name>getOriginalColormap</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>a16128d0a4c8afa05f8720352bea2a3de</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumberOfColors</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>a16b7176e5ad12c8754b51e583270cea4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Color</type>
      <name>getMonochromeColor</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>a64ff1a16f7e036ab0e212d8e51716059</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMonochromeColor</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>ace95792d04b6d08fc50021a3c737998c</anchor>
      <arglist>(const Color &amp;c)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTransparentBackground</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>a2bf36ff8421d54ca709ef671b10bd4b6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disableTransparentBackground</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>a65f7747cb8c21704aed2bcbb05401f8b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getTransparentBackground</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>ae43e2fc3d049bbeebac2a64128ea0fc3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Color</type>
      <name>getMonochromeColor</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>a64ff1a16f7e036ab0e212d8e51716059</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMonochromeColor</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>ace95792d04b6d08fc50021a3c737998c</anchor>
      <arglist>(const Color &amp;c)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTransparentBackground</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>a2bf36ff8421d54ca709ef671b10bd4b6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disableTransparentBackground</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>a65f7747cb8c21704aed2bcbb05401f8b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getTransparentBackground</name>
      <anchorfile>classColormappable.html</anchorfile>
      <anchor>ae43e2fc3d049bbeebac2a64128ea0fc3</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ColormappableMock</name>
    <filename>classColormappableMock.html</filename>
    <base>Colormappable</base>
    <member kind="function" protection="private">
      <type></type>
      <name>MOCK_METHOD1</name>
      <anchorfile>classColormappableMock.html</anchorfile>
      <anchor>a35f9948846f92d3f277c0f9321959bca</anchor>
      <arglist>(setColormap, void(Colormap::Ptr))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MOCK_METHOD0</name>
      <anchorfile>classColormappableMock.html</anchorfile>
      <anchor>adec8df0fb759a29a190639413539ec6e</anchor>
      <arglist>(getOriginalColormap, Colormap::Ptr())</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MOCK_METHOD0</name>
      <anchorfile>classColormappableMock.html</anchorfile>
      <anchor>ab440d6e838c02570f8aa200ca5329e5e</anchor>
      <arglist>(getNumberOfColors, int())</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MOCK_METHOD0</name>
      <anchorfile>classColormappableMock.html</anchorfile>
      <anchor>aeb8727b1464fc8deef5a7079fa899eae</anchor>
      <arglist>(getMonochromeColor, Color())</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MOCK_METHOD1</name>
      <anchorfile>classColormappableMock.html</anchorfile>
      <anchor>a8e3b7743ce0b06487e55ea7bb15740e2</anchor>
      <arglist>(setMonochromeColor, void(const Color &amp;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MOCK_METHOD0</name>
      <anchorfile>classColormappableMock.html</anchorfile>
      <anchor>a64c83ca80becc32f1f44e62691c8f4c6</anchor>
      <arglist>(setTransparentBackground, void())</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MOCK_METHOD0</name>
      <anchorfile>classColormappableMock.html</anchorfile>
      <anchor>a402a9aed43bd97c765daab41f9a8c0a7</anchor>
      <arglist>(disableTransparentBackground, void())</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MOCK_METHOD0</name>
      <anchorfile>classColormappableMock.html</anchorfile>
      <anchor>a575a73312cd4c2f80460074d49ba154c</anchor>
      <arglist>(getTransparentBackground, bool())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ColormappablePresentationMock</name>
    <filename>classColormappablePresentationMock.html</filename>
    <base>PresentationMock</base>
    <base>ColormappableMock</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ColormappablePresentationMock &gt;</type>
      <name>Ptr</name>
      <anchorfile>classColormappablePresentationMock.html</anchorfile>
      <anchor>af3283a50c8f2b0b0fcc0c63a37de8244</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classColormappablePresentationMock.html</anchorfile>
      <anchor>afa98caee236cf037e0fec77b7b768cd8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::ColormapImpl::ColormapPlugin</name>
    <filename>classScroom_1_1ColormapImpl_1_1ColormapPlugin.html</filename>
    <base>PluginInformationInterface</base>
    <base>PresentationObserver</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ColormapPlugin &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapPlugin.html</anchorfile>
      <anchor>a680f3ce81c9a698b96bca4d6dc7d4d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginName</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapPlugin.html</anchorfile>
      <anchor>aa4e08ba60ce3ea9b67534aa56649a06c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginVersion</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapPlugin.html</anchorfile>
      <anchor>aeadcc9214ffb38923e4362f67baf9152</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCapabilities</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapPlugin.html</anchorfile>
      <anchor>a7912408bf228df940abbb9e088ec4224</anchor>
      <arglist>(ScroomPluginInterface::Ptr host) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>presentationAdded</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapPlugin.html</anchorfile>
      <anchor>a61271333623229dbde60271d010d85e9</anchor>
      <arglist>(PresentationInterface::Ptr p) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>presentationDeleted</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapPlugin.html</anchorfile>
      <anchor>af571d78675a17bb995b359404f2c8e57</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapPlugin.html</anchorfile>
      <anchor>a94d22cfc63715968996cdc76786e4fe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ColormapPlugin</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapPlugin.html</anchorfile>
      <anchor>a8c872cbac26395215205ce23fec1f970</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; PresentationInterface::WeakPtr &gt;</type>
      <name>presentations</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapPlugin.html</anchorfile>
      <anchor>a8f13224902a19538143ddb6b51043d57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::ColormapImpl::ColormapProvider</name>
    <filename>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</filename>
    <base>Viewable</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ColormapProvider &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>a36a98708a2d01da39468d083b972a301</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ColormapProvider</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>a8151612e925a83599593ab6b6ec792fb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColormapProvider</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>aa83bd0eae377fb398c1bea1962f23b6f</anchor>
      <arglist>(const ColormapProvider &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColormapProvider</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>a702fb21f4ce31e1d02f1eb245fb83d88</anchor>
      <arglist>(ColormapProvider &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ColormapProvider</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>ac5c20bf232b30b4927ac5290edb21605</anchor>
      <arglist>(const ColormapProvider &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ColormapProvider</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>a6be673564628ee2250f2db9e59661c58</anchor>
      <arglist>(ColormapProvider &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>a8a22be3d09ddd9be9280baafb3ae5f16</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>a99cd96043befaad09c9c5f291d99949b</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_colormap_selected</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>a0aa045d11bb08833d87520dc5c8e408d</anchor>
      <arglist>(GtkTreeView *tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ColormapProvider::Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>ac9df7b458650ae9e73f876ddc021f637</anchor>
      <arglist>(const PresentationInterface::Ptr &amp;p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ColormapProvider</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>abf0460f75e5e17e3f07ebb54a38b21ca</anchor>
      <arglist>(const Colormappable::Ptr &amp;c)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Colormappable::WeakPtr</type>
      <name>colormappable</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>a009e35740c7f7eb9f4b904ad66d38a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::WeakKeyMap&lt; ViewInterface::WeakPtr, GtkTreeView * &gt;</type>
      <name>views</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>afbe4c3f44be12beabfe6b8226f4f92c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkListStore *</type>
      <name>colormaps</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>aebefe9a835ca9479248dcaf7a27e7e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::Stuff</type>
      <name>registration</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1ColormapProvider.html</anchorfile>
      <anchor>af3f55cb668c41ea73c080e85b6d851f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ColormapProvider</name>
    <filename>classColormapProvider.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ColormapProvider &gt;</type>
      <name>Ptr</name>
      <anchorfile>classColormapProvider.html</anchorfile>
      <anchor>a30da46c914ef6beb4828f47cdf2bda18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Colormap::Ptr</type>
      <name>getColormap</name>
      <anchorfile>classColormapProvider.html</anchorfile>
      <anchor>a575f918f8c9102e76101eec6f95f35fb</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::ColormapImpl::Colormaps</name>
    <filename>classScroom_1_1ColormapImpl_1_1Colormaps.html</filename>
    <member kind="function">
      <type>std::list&lt; Colormap::ConstPtr &gt;</type>
      <name>getColormaps</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1Colormaps.html</anchorfile>
      <anchor>a8c5c895c8e6287914f2b29b2b0f0a1da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colormaps &amp;</type>
      <name>getInstance</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1Colormaps.html</anchorfile>
      <anchor>a41c4cf3edae798dfd0768b0b6ae5fbaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char *</type>
      <name>getColormapDirPath</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1Colormaps.html</anchorfile>
      <anchor>aa5ceb74db33fc9bc3572d846055acc4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colormap::Ptr</type>
      <name>load</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1Colormaps.html</anchorfile>
      <anchor>ae21b1c4368128e09ed4f4dd0c17e0dcc</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Colormaps</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1Colormaps.html</anchorfile>
      <anchor>a5e9de78dce336208aa48febb82ec3fc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; Colormap::ConstPtr &gt;</type>
      <name>colormaps</name>
      <anchorfile>classScroom_1_1ColormapImpl_1_1Colormaps.html</anchorfile>
      <anchor>a61e7008a900b0d7ab417f8c1a609b15e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CommonOperations</name>
    <filename>classCommonOperations.html</filename>
    <base>LayerOperations</base>
    <member kind="function">
      <type>void</type>
      <name>initializeCairo</name>
      <anchorfile>classCommonOperations.html</anchorfile>
      <anchor>a0d94da894eb942470e241fa7d2dc6830</anchor>
      <arglist>(cairo_t *cr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawState</name>
      <anchorfile>classCommonOperations.html</anchorfile>
      <anchor>acdd24da111ccd9c24e45bedea6035385</anchor>
      <arglist>(cairo_t *cr, TileState s, Scroom::Utils::Rectangle&lt; double &gt; viewArea) override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Stuff</type>
      <name>cacheZoom</name>
      <anchorfile>classCommonOperations.html</anchorfile>
      <anchor>aa09eae217c1870d175a491010ce3b9f4</anchor>
      <arglist>(const ConstTile::Ptr &amp;tile, int zoom, Scroom::Utils::Stuff &amp;cache) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classCommonOperations.html</anchorfile>
      <anchor>af173ef0acae113c9b1ae8fa658e8f4be</anchor>
      <arglist>(cairo_t *cr, const ConstTile::Ptr &amp;tile, Scroom::Utils::Rectangle&lt; double &gt; tileArea, Scroom::Utils::Rectangle&lt; double &gt; viewArea, int zoom, Scroom::Utils::Stuff cache) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawPixelValue</name>
      <anchorfile>classCommonOperations.html</anchorfile>
      <anchor>a2cc20679d9f562a298746ad0715ac494</anchor>
      <arglist>(cairo_t *cr, int x, int y, int size, int value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawPixelValue</name>
      <anchorfile>classCommonOperations.html</anchorfile>
      <anchor>a626615dd4e89c057cc19e51a9773ab85</anchor>
      <arglist>(cairo_t *cr, int x, int y, int size, int value, Color const &amp;bgColor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CompressedTile</name>
    <filename>classCompressedTile.html</filename>
    <base>Observable&lt; TileInitialisationObserver &gt;</base>
    <base>Observable&lt; TileLoadingObserver &gt;</base>
    <base>Viewable</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CompressedTile &gt;</type>
      <name>Ptr</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>ac3196cb2700c74cd1cf9fac4b935bf40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Tile::Ptr</type>
      <name>initialize</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a9c6389557145d0df0b1996dc203089da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>registerStrongObserver</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>aa5784d47bed64ad72d9c3ae748a356e2</anchor>
      <arglist>(TileInitialisationObserver::Ptr const &amp;observer)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>registerObserver</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>ad40ea1dd54146b27258bf7f888e3dbc1</anchor>
      <arglist>(TileInitialisationObserver::WeakPtr const &amp;observer)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>registerStrongObserver</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a8fe577eafb7f52066eaa8f03f8438381</anchor>
      <arglist>(TileLoadingObserver::Ptr const &amp;observer)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>registerObserver</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a9444ae88da788c16906ba567ad07c012</anchor>
      <arglist>(TileLoadingObserver::WeakPtr const &amp;observer)</arglist>
    </member>
    <member kind="function">
      <type>Tile::Ptr</type>
      <name>getTileSync</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a84c39301c28edb944aa1dcc38a40239b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTile::Ptr</type>
      <name>getConstTileSync</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a0678ca6eecadd7783482c591fc11fe2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTile::Ptr</type>
      <name>getConstTileAsync</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a8ecffff153ac1595c1f6143eca1455e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportFinished</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>abb93373d26a2155d4fe3f8b235ea8d45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TileState</type>
      <name>getState</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a037333498f97a4c29f0c24b88a483aff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TileViewState &gt;</type>
      <name>getViewState</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a9a3305cbab3738c644239cc4ff2f040b</anchor>
      <arglist>(const ViewInterface::WeakPtr &amp;vi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a95a09596787a0fb4265b6097005a78fa</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a070926227d5e3c868f4710ec2222935f</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a6ebd69edede63de69c82229f16475ce6</anchor>
      <arglist>(int depth, int x, int y, int bpp, const Scroom::MemoryBlobs::PageProvider::Ptr &amp;provider, TileStateInternal state=TSI_UNINITIALIZED)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>depth</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a37619bba68261a7c82f6e78691f3c8fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>x</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a50d7f34fe5962d8ede039ba2ce4a15cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>y</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a3df8d8be2c53fa76777a9703b346aa18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bpp</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>ae0acac9bbd3f7a6b402ba59ab5a2cd05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>observerAdded</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a6dfed630388013d934bda84fe39d20a9</anchor>
      <arglist>(TileInitialisationObserver::Ptr const &amp;observer, Scroom::Bookkeeping::Token const &amp;token) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>observerAdded</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a097a41844c75d21396fb64db3c039c8a</anchor>
      <arglist>(TileLoadingObserver::Ptr const &amp;observer, Scroom::Bookkeeping::Token const &amp;token) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CompressedTile</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a709f5e689dd41c5fee81f6da28ebea2e</anchor>
      <arglist>(int depth, int x, int y, int bpp, const Scroom::MemoryBlobs::PageProvider::Ptr &amp;provider, TileStateInternal state)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>cleanupState</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>abc632784fd3ff47fee0a75393be60772</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstTile::Ptr</type>
      <name>do_load</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a5c520928c3e8faafa0493d77fa7c16d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>notifyObservers</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a56111eeb0baeaf0b8f2d93e4a81ea99d</anchor>
      <arglist>(const ConstTile::Ptr &amp;tile)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TileStateInternal</type>
      <name>state</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a1f5ee2004174ee91290fd429895e8352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Tile::WeakPtr</type>
      <name>tile</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a690dea215c3d52f42c35c7a7d242fc52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstTile::WeakPtr</type>
      <name>constTile</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>af148374ed057295f9e719ee5e7caf105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::MemoryBlobs::PageProvider::Ptr</type>
      <name>provider</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a1dcbcd0e4f85fe9e72a790d30759ebc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::MemoryBlobs::Blob::Ptr</type>
      <name>data</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>aa57cd0c280ebe754da3c7649489db99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>stateData</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>abdcc515dd9b62b94ca90a7672e91d9d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>tileData</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>ab9f3cfcf96b745f1421b4c87737bdf2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ThreadPool::Queue::WeakPtr</type>
      <name>queue</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a98aab628263791d6330cd6ccfa012d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::WeakKeyMap&lt; ViewInterface::WeakPtr, std::weak_ptr&lt; TileViewState &gt; &gt;</type>
      <name>viewStates</name>
      <anchorfile>classCompressedTile.html</anchorfile>
      <anchor>a6e31e3871482ff2d9bffb5be8b44a2de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstTile</name>
    <filename>classConstTile.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConstTile &gt;</type>
      <name>Ptr</name>
      <anchorfile>classConstTile.html</anchorfile>
      <anchor>a851f2f356430d0fff4c703c23a6e07d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ConstTile &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classConstTile.html</anchorfile>
      <anchor>a2196e16036afea02f494893874bb51cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstTile</name>
      <anchorfile>classConstTile.html</anchorfile>
      <anchor>a0a30e8ef4bf85ed4f56398c436c61bdd</anchor>
      <arglist>(int width_, int height_, int bpp_, Scroom::MemoryBlobs::RawPageData::ConstPtr data_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstTile::Ptr</type>
      <name>create</name>
      <anchorfile>classConstTile.html</anchorfile>
      <anchor>a0bee773e41ba11b043df595c9156d599</anchor>
      <arglist>(int width, int height, int bpp, Scroom::MemoryBlobs::RawPageData::ConstPtr data)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>width</name>
      <anchorfile>classConstTile.html</anchorfile>
      <anchor>a1c76a49105f44d4091d359f16bf9bf84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>height</name>
      <anchorfile>classConstTile.html</anchorfile>
      <anchor>a2e291507570bd346d391cb12fed12f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bpp</name>
      <anchorfile>classConstTile.html</anchorfile>
      <anchor>a2baa3b6df07d32ff84a0b774def1da03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scroom::MemoryBlobs::RawPageData::ConstPtr</type>
      <name>data</name>
      <anchorfile>classConstTile.html</anchorfile>
      <anchor>a05039cb054fd3cf7d95bd1b0ac326203</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::Count</name>
    <filename>classScroom_1_1Utils_1_1Count.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Count &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1Count.html</anchorfile>
      <anchor>ae2d86182e6d603758f73e6fe2377d077</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ping</name>
      <anchorfile>classScroom_1_1Utils_1_1Count.html</anchorfile>
      <anchor>a18d30e08085fb10f5bebd8356958defa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc</name>
      <anchorfile>classScroom_1_1Utils_1_1Count.html</anchorfile>
      <anchor>a9ba21299f54d2ef54a46120e4dc8dac8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dec</name>
      <anchorfile>classScroom_1_1Utils_1_1Count.html</anchorfile>
      <anchor>a4a079db4ca94588183b9ed1f3ed930ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Utils_1_1Count.html</anchorfile>
      <anchor>a71903b265cc75a8fcd749c637c3ae060</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>name</name>
      <anchorfile>classScroom_1_1Utils_1_1Count.html</anchorfile>
      <anchor>a8d3de95d8b8afd68680b51470bf196f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classScroom_1_1Utils_1_1Count.html</anchorfile>
      <anchor>aa1ad448bd3712f2bff28ea3a78bde82a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>count</name>
      <anchorfile>classScroom_1_1Utils_1_1Count.html</anchorfile>
      <anchor>a9439ab2035836fe05fb8531f06e6acf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Count</name>
      <anchorfile>classScroom_1_1Utils_1_1Count.html</anchorfile>
      <anchor>a403581e21714915897aadf020ba83a71</anchor>
      <arglist>(std::string name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::Counted</name>
    <filename>classScroom_1_1Utils_1_1Counted.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Counted</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>a81eb6433bbb5f9a12ce1fe1c92da9e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Counted</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>a768ea200f78d7e7186c99551c34e82ec</anchor>
      <arglist>(const Counted &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Counted</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>a1214ca8b981fbb24a2f65c6fd9cf4506</anchor>
      <arglist>(Counted &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>Counted &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>a44e8fa2a3cbfbbd936376c6d1d012781</anchor>
      <arglist>(const Counted &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>Counted &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>a9a07bf5c1095fbd965e6e38981101652</anchor>
      <arglist>(Counted &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Counted</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>a31a7135ed33e12cef2b5470b142b5e33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Count::Ptr</type>
      <name>count_instance</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>a3fea7d8dd19fa44b2b142361c9b1ba86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Count::Ptr</type>
      <name>data</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>af16057349223a15f337abfacf052dd7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Counted&lt; TestCounted &gt;</name>
    <filename>classScroom_1_1Utils_1_1Counted.html</filename>
    <member kind="function">
      <type></type>
      <name>Counted</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>a81eb6433bbb5f9a12ce1fe1c92da9e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Counted</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>a768ea200f78d7e7186c99551c34e82ec</anchor>
      <arglist>(const Counted &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Counted</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>a1214ca8b981fbb24a2f65c6fd9cf4506</anchor>
      <arglist>(Counted &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>Counted &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>a44e8fa2a3cbfbbd936376c6d1d012781</anchor>
      <arglist>(const Counted &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>Counted &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>a9a07bf5c1095fbd965e6e38981101652</anchor>
      <arglist>(Counted &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Counted</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>a31a7135ed33e12cef2b5470b142b5e33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Count::Ptr</type>
      <name>count_instance</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>a3fea7d8dd19fa44b2b142361c9b1ba86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Count::Ptr</type>
      <name>data</name>
      <anchorfile>classScroom_1_1Utils_1_1Counted.html</anchorfile>
      <anchor>af16057349223a15f337abfacf052dd7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::Counter</name>
    <filename>classScroom_1_1Utils_1_1Counter.html</filename>
    <member kind="function">
      <type>void</type>
      <name>registerCount</name>
      <anchorfile>classScroom_1_1Utils_1_1Counter.html</anchorfile>
      <anchor>aff741dd8d34219c5c946587f1828a25d</anchor>
      <arglist>(const Count::Ptr &amp;count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterCount</name>
      <anchorfile>classScroom_1_1Utils_1_1Counter.html</anchorfile>
      <anchor>a3315a84d3e9ba2c1a9feffb9ad6d646c</anchor>
      <arglist>(const Count::Ptr &amp;count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classScroom_1_1Utils_1_1Counter.html</anchorfile>
      <anchor>ad93a85275e69f55081907952db49a61d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Count::Ptr &gt;</type>
      <name>getCounts</name>
      <anchorfile>classScroom_1_1Utils_1_1Counter.html</anchorfile>
      <anchor>aa66450a14eddc101434a5bae16766562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Counter *</type>
      <name>instance</name>
      <anchorfile>classScroom_1_1Utils_1_1Counter.html</anchorfile>
      <anchor>a03663eda498c916f4e9011b88c400b9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Counter</name>
      <anchorfile>classScroom_1_1Utils_1_1Counter.html</anchorfile>
      <anchor>a1e05f69b5240fbab3e7ab351672167f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; Count::Ptr &gt;</type>
      <name>counts</name>
      <anchorfile>classScroom_1_1Utils_1_1Counter.html</anchorfile>
      <anchor>a6e6754ac2721a1b0ba7c1d240f477d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classScroom_1_1Utils_1_1Counter.html</anchorfile>
      <anchor>a98cd003bc28f0eb3232e9a3b50ab00a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>anonymous_namespace{colormaphelpers_test.cc}::Data</name>
    <filename>structanonymous__namespace_02colormaphelpers__test_8cc_03_1_1Data.html</filename>
    <member kind="function">
      <type></type>
      <name>Data</name>
      <anchorfile>structanonymous__namespace_02colormaphelpers__test_8cc_03_1_1Data.html</anchorfile>
      <anchor>ae63841385eea9d5ea9b617ddb60bcad1</anchor>
      <arglist>(int expectedColors_, ColormapHelper::Ptr helper_)</arglist>
    </member>
    <member kind="variable">
      <type>ColormapHelper::Ptr</type>
      <name>helper</name>
      <anchorfile>structanonymous__namespace_02colormaphelpers__test_8cc_03_1_1Data.html</anchorfile>
      <anchor>a35baec4dd38da0289d2d25ce40532c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>expectedColors</name>
      <anchorfile>structanonymous__namespace_02colormaphelpers__test_8cc_03_1_1Data.html</anchorfile>
      <anchor>a860c8ba907be7c4adf12b39e187f7d4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DataFetcher</name>
    <filename>classDataFetcher.html</filename>
    <member kind="function">
      <type></type>
      <name>DataFetcher</name>
      <anchorfile>classDataFetcher.html</anchorfile>
      <anchor>a11717e9488dea08735d632ddf98bde6f</anchor>
      <arglist>(Layer::Ptr layer, int height, int horTileCount, int verTileCount, SourcePresentation::Ptr sp, ThreadPool::WeakQueue::Ptr queue, std::function&lt; void()&gt; on_finished)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classDataFetcher.html</anchorfile>
      <anchor>aa47b487725b70a8a16000ed9e83ad927</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Layer::Ptr</type>
      <name>layer</name>
      <anchorfile>classDataFetcher.html</anchorfile>
      <anchor>a3a341857d909e1be2592d8effe8af5ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>height</name>
      <anchorfile>classDataFetcher.html</anchorfile>
      <anchor>ab03ecb5f32aa7727880ea7faf4c82c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>horTileCount</name>
      <anchorfile>classDataFetcher.html</anchorfile>
      <anchor>abd390d35a37ec358d034dd800105ccfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>verTileCount</name>
      <anchorfile>classDataFetcher.html</anchorfile>
      <anchor>aaee3d602d5bfec28badc8c178041105c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>currentRow</name>
      <anchorfile>classDataFetcher.html</anchorfile>
      <anchor>adf6b12f478232da42096269a6f3f2233</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SourcePresentation::Ptr</type>
      <name>sp</name>
      <anchorfile>classDataFetcher.html</anchorfile>
      <anchor>af7045ef5e1262cb5b94148a295213db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ThreadPool::Ptr</type>
      <name>threadPool</name>
      <anchorfile>classDataFetcher.html</anchorfile>
      <anchor>a45e10065fbb9e73028f6fe866e7507aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ThreadPool::WeakQueue::Ptr</type>
      <name>queue</name>
      <anchorfile>classDataFetcher.html</anchorfile>
      <anchor>a6c8a97c9b2893903ea4472e750d5be30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::function&lt; void()&gt;</type>
      <name>on_finished</name>
      <anchorfile>classDataFetcher.html</anchorfile>
      <anchor>aa0c49fa455a4802c67cdd4078b76ff35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DontDelete</name>
    <filename>classDontDelete.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classDontDelete.html</anchorfile>
      <anchor>a545608d98d7114db056c7540f6c06925</anchor>
      <arglist>(T *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::MemoryBlocks::Detail::anonymous_namespace{swapbasedblockallocator.cc}::DontDelete</name>
    <filename>classScroom_1_1MemoryBlocks_1_1Detail_1_1anonymous__namespace_02swapbasedblockallocator_8cc_03_1_1DontDelete.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Detail_1_1anonymous__namespace_02swapbasedblockallocator_8cc_03_1_1DontDelete.html</anchorfile>
      <anchor>a9c80210aaa07ef6bf5246efca5502bb2</anchor>
      <arglist>(T *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DummyColormapProvider</name>
    <filename>classDummyColormapProvider.html</filename>
    <base>ColormapProvider</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; DummyColormapProvider &gt;</type>
      <name>Ptr</name>
      <anchorfile>classDummyColormapProvider.html</anchorfile>
      <anchor>ad44523954a57163c4b80e8b93012877e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Colormap::Ptr</type>
      <name>getColormap</name>
      <anchorfile>classDummyColormapProvider.html</anchorfile>
      <anchor>a5044c6074a9d5c494846d0584bc98bdc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classDummyColormapProvider.html</anchorfile>
      <anchor>adf88a93181d29006d5772cb1c442dce0</anchor>
      <arglist>(Colormap::Ptr colormap)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DummyColormapProvider</name>
      <anchorfile>classDummyColormapProvider.html</anchorfile>
      <anchor>a9d99e0c941ca65c0ec0605c3372efeab</anchor>
      <arglist>(Colormap::Ptr colormap)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Colormap::Ptr</type>
      <name>colormap</name>
      <anchorfile>classDummyColormapProvider.html</anchorfile>
      <anchor>a96e5902f35a4700a88d0e7101fd8d07b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DummyLayerOperations</name>
    <filename>classDummyLayerOperations.html</filename>
    <base>LayerOperations</base>
    <member kind="function">
      <type>int</type>
      <name>getBpp</name>
      <anchorfile>classDummyLayerOperations.html</anchorfile>
      <anchor>a50c28dd4fa296674b67c0f864ede846c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeCairo</name>
      <anchorfile>classDummyLayerOperations.html</anchorfile>
      <anchor>a93731bbca8deb4ddb05c6222360391cb</anchor>
      <arglist>(cairo_t *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classDummyLayerOperations.html</anchorfile>
      <anchor>a1f8078c6b35f09db9652f7cbd237e4a9</anchor>
      <arglist>(cairo_t *, const ConstTile::Ptr &amp;, Scroom::Utils::Rectangle&lt; double &gt;, Scroom::Utils::Rectangle&lt; double &gt;, int, Scroom::Utils::Stuff) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawState</name>
      <anchorfile>classDummyLayerOperations.html</anchorfile>
      <anchor>ad0fbcde3a5f8bbed41660a61bab5886a</anchor>
      <arglist>(cairo_t *, TileState, Scroom::Utils::Rectangle&lt; double &gt;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classDummyLayerOperations.html</anchorfile>
      <anchor>a1aedf740b74873a84fa3f76b4ae1371d</anchor>
      <arglist>(Tile::Ptr, const ConstTile::Ptr, int, int) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classDummyLayerOperations.html</anchorfile>
      <anchor>abf9cc1c0d79a016cb1f0fcea6e27b070</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DummyPluginInterface</name>
    <filename>classDummyPluginInterface.html</filename>
    <base>ScroomPluginInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; DummyPluginInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classDummyPluginInterface.html</anchorfile>
      <anchor>a38e02b9ad6146de47569d8fb7c56de1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerNewPresentationInterface</name>
      <anchorfile>classDummyPluginInterface.html</anchorfile>
      <anchor>ace909aa5841c55ef746ded394ffe135e</anchor>
      <arglist>(const std::string &amp;, NewPresentationInterface::Ptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerNewAggregateInterface</name>
      <anchorfile>classDummyPluginInterface.html</anchorfile>
      <anchor>a97d6f51787cd9cdb068e4f1ec841ebb3</anchor>
      <arglist>(const std::string &amp;, NewAggregateInterface::Ptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerOpenPresentationInterface</name>
      <anchorfile>classDummyPluginInterface.html</anchorfile>
      <anchor>a5111e34315cddb47537fe91577885f55</anchor>
      <arglist>(const std::string &amp;, OpenPresentationInterface::Ptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerOpenTiledBitmapInterface</name>
      <anchorfile>classDummyPluginInterface.html</anchorfile>
      <anchor>a095597d33db7b64357fb919687493001</anchor>
      <arglist>(const std::string &amp;, std::shared_ptr&lt; Scroom::TiledBitmap::OpenTiledBitmapInterface &gt;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerOpenInterface</name>
      <anchorfile>classDummyPluginInterface.html</anchorfile>
      <anchor>aaf5541ef8d644372cf607b710a3a289c</anchor>
      <arglist>(const std::string &amp;, OpenInterface::Ptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerViewObserver</name>
      <anchorfile>classDummyPluginInterface.html</anchorfile>
      <anchor>ae9fcd179a99ba618e6c88da5c1f27d4d</anchor>
      <arglist>(const std::string &amp;, ViewObserver::Ptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPresentationObserver</name>
      <anchorfile>classDummyPluginInterface.html</anchorfile>
      <anchor>a2651709c5b9711f60d21bd0b7ad02f5e</anchor>
      <arglist>(const std::string &amp;, PresentationObserver::Ptr) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classDummyPluginInterface.html</anchorfile>
      <anchor>aecf933099176dc676b76d843e7fb96c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>view_observers</name>
      <anchorfile>classDummyPluginInterface.html</anchorfile>
      <anchor>acebc412078734464023b1d4d6b9e38dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DummyPresentation</name>
    <filename>classDummyPresentation.html</filename>
    <base>PresentationInterface</base>
    <base>PipetteViewInterface</base>
    <member kind="function">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>getRect</name>
      <anchorfile>classDummyPresentation.html</anchorfile>
      <anchor>a4fe45b78ee5760984f4fffc32b74dc5a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redraw</name>
      <anchorfile>classDummyPresentation.html</anchorfile>
      <anchor>ad73ebf12bc9286f633518d035c8b591d</anchor>
      <arglist>(ViewInterface::Ptr const &amp;, cairo_t *, Scroom::Utils::Rectangle&lt; double &gt;, int) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getProperty</name>
      <anchorfile>classDummyPresentation.html</anchorfile>
      <anchor>a8315fa40328342fcfa7c79a5fdd626f5</anchor>
      <arglist>(const std::string &amp;, std::string &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPropertyDefined</name>
      <anchorfile>classDummyPresentation.html</anchorfile>
      <anchor>a24374328eb042aaed74708faea116c91</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTitle</name>
      <anchorfile>classDummyPresentation.html</anchorfile>
      <anchor>a20515f7367fd13f4f48e3a428bf155e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classDummyPresentation.html</anchorfile>
      <anchor>a1b9a6c6c987707d64598f4887edabeca</anchor>
      <arglist>(ViewInterface::WeakPtr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classDummyPresentation.html</anchorfile>
      <anchor>ab3a801fc3b997e5e845e46792bdace4e</anchor>
      <arglist>(ViewInterface::WeakPtr) override</arglist>
    </member>
    <member kind="function">
      <type>PipetteLayerOperations::PipetteColor</type>
      <name>getPixelAverages</name>
      <anchorfile>classDummyPresentation.html</anchorfile>
      <anchor>a0852a1facf0d3a5a496772b46eec3b92</anchor>
      <arglist>(Scroom::Utils::Rectangle&lt; double &gt;) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PresentationInterface::Ptr</type>
      <name>create</name>
      <anchorfile>classDummyPresentation.html</anchorfile>
      <anchor>ab367b2e1bf10f4711da69c013b04330c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DummyView</name>
    <filename>classDummyView.html</filename>
    <base>ViewInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; DummyView &gt;</type>
      <name>Ptr</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>abd2df7ad8f0a66efc7e7d0a6b3d097e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DummyView</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>ad4e334704e54fe053c39386eee6a1732</anchor>
      <arglist>(PresentationInterface::Ptr presentation_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>a6e8df6736df8f6accabe304c59c8e8e0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>ProgressInterface::Ptr</type>
      <name>getProgressInterface</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>a3ef7fc3dd698d786488ef65434d87ed1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSideWidget</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>a015b1d5fe8deb067513c1138779fbc07</anchor>
      <arglist>(std::string, GtkWidget *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSideWidget</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>af5b415c3ade06422d2bd83c1b7ae02c8</anchor>
      <arglist>(GtkWidget *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToToolbar</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>a995c85544d8bd89644b7a60d9994f19b</anchor>
      <arglist>(GtkToolItem *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromToolbar</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>af6750f48e337d332e74f41d5f8d24b56</anchor>
      <arglist>(GtkToolItem *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSelectionListener</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>a23a77858106dcc556e85b31b4eb0bd1f</anchor>
      <arglist>(SelectionListener::Ptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPostRenderer</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>a5d6a5826039e7b360d49407e57c25b96</anchor>
      <arglist>(PostRenderer::Ptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatusMessage</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>a150f4c84637681e9b12bac93b3ddec34</anchor>
      <arglist>(const std::string &amp;msg) override</arglist>
    </member>
    <member kind="function">
      <type>PresentationInterface::Ptr</type>
      <name>getCurrentPresentation</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>a278f5a5aa8d99ef2d8f46f2106256341</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToolButton</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>a6b8e8006a20701fca9d8b3331b955663</anchor>
      <arglist>(GtkToggleButton *, ToolStateListener::Ptr) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>nextStatusMessage</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>a355e6404319e9e280d42bc22f3a56b68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>createWithPresentation</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>a6ee533e18b061fa8de157931b74a5313</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>createWithoutPresentation</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>af2e44d4049a9c0b8598e4360e0370005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>a43f67248ad5757877dad05cf9851fcd2</anchor>
      <arglist>(PresentationInterface::Ptr presentation_)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>reg_sel</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>acdf969d9cd4c89f8b1a6556464c3561d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>reg_post</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>abcbf193ea059d46ff4639574a9c6662c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>tool_btn</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>ac2d5d38e2626056dc9694cd23a25ad97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PresentationInterface::Ptr</type>
      <name>presentation</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>acf0b109e9d57ed4ad45b23c237a095ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>aaea23fa3eb8ef719221ce067829bfc6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::condition_variable</type>
      <name>cond</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>a99c69b20e83f22bd9de3dfabe7f479fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; std::string &gt;</type>
      <name>statusMessages</name>
      <anchorfile>classDummyView.html</anchorfile>
      <anchor>afb91ded345798c089a755e4c6163c1e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>equal_to</name>
    <filename>classequal__to.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::Detail::ErrorSignalHandler</name>
    <filename>classScroom_1_1Utils_1_1Detail_1_1ErrorSignalHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>ErrorSignalHandler</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1ErrorSignalHandler.html</anchorfile>
      <anchor>addb97e3cba7cb31af54d189a261d948a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>handler</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1ErrorSignalHandler.html</anchorfile>
      <anchor>ae869ccdbf76fd4fcc1439cc4e288630e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static volatile sig_atomic_t</type>
      <name>isHandlerActive</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1ErrorSignalHandler.html</anchorfile>
      <anchor>a483fd983c60c44d6de7d5261c16aea27</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>abort</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1ErrorSignalHandler.html</anchorfile>
      <anchor>ac54f53dc342019e8db34f4aa581a5792</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Example</name>
    <filename>classExample.html</filename>
    <base>PluginInformationInterface</base>
    <base>NewPresentationInterface</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Example &gt;</type>
      <name>Ptr</name>
      <anchorfile>classExample.html</anchorfile>
      <anchor>a8814c38d3478f6b11c1f059b09b45aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginName</name>
      <anchorfile>classExample.html</anchorfile>
      <anchor>af6df01bf92a795965dec6d1d52985aeb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginVersion</name>
      <anchorfile>classExample.html</anchorfile>
      <anchor>a4841c3271b865ef3555fa335a788e956</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCapabilities</name>
      <anchorfile>classExample.html</anchorfile>
      <anchor>aaaf605c078df980a4d5c63861be18622</anchor>
      <arglist>(ScroomPluginInterface::Ptr host) override</arglist>
    </member>
    <member kind="function">
      <type>PresentationInterface::Ptr</type>
      <name>createNew</name>
      <anchorfile>classExample.html</anchorfile>
      <anchor>ae7079d74d3c532d6fc97296151f58f9c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classExample.html</anchorfile>
      <anchor>a9c24aa1ca9d488eb7ecaa28e5997fa30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Example</name>
      <anchorfile>classExample.html</anchorfile>
      <anchor>ac225d7f8630ce282247964f3d8406090</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExamplePresentation</name>
    <filename>classExamplePresentation.html</filename>
    <base>PresentationInterface</base>
    <member kind="function">
      <type></type>
      <name>ExamplePresentation</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>a4c2139db43d28ba5652668a12b7c7b5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExamplePresentation</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>af6c905a0edac8a660a13087374b8795d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExamplePresentation</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>a6d542569cdae61fd07ee0db51240a991</anchor>
      <arglist>(const ExamplePresentation &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExamplePresentation</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>ae4a92281d1d2971fdaaf47c92b1d0db0</anchor>
      <arglist>(ExamplePresentation &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ExamplePresentation</type>
      <name>operator=</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>a105ebf2026f59dc65c6dcea20aed20ce</anchor>
      <arglist>(const ExamplePresentation &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ExamplePresentation</type>
      <name>operator=</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>a818c924dbbdac6646330105f1c1e9742</anchor>
      <arglist>(ExamplePresentation &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>getRect</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>a68e1a740bb987322cdcfad6beb4f99be</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>acf58a047e0572c99aa3c63fd1f4dca92</anchor>
      <arglist>(ViewInterface::WeakPtr viewInterface) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redraw</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>a6070bbfe0dfeb6571cade958362df7bb</anchor>
      <arglist>(ViewInterface::Ptr const &amp;vi, cairo_t *cr, Scroom::Utils::Rectangle&lt; double &gt; presentationArea, int zoom) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>a6fb2031f8c1d1dbf7346a5099f792409</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getProperty</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>ac5f3c4bd5674b8f5f437dff8f2d974f5</anchor>
      <arglist>(const std::string &amp;name, std::string &amp;value) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPropertyDefined</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>a62c93b1980cb8f73d025156e602cb0f1</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTitle</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>aaa8f79b37c0a4bdb2c63f168d339cb9b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillPattern</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>a814f6109cfd268b115c24ae46fa6b2b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cairo_pattern_t *</type>
      <name>pattern</name>
      <anchorfile>classExamplePresentation.html</anchorfile>
      <anchor>a1c2f41affc4eb182c3a10599a415bb75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; Scroom::Utils::Point&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01Scroom_1_1Utils_1_1Point_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01Scroom_1_1Utils_1_1Point_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a8abdbb532885960f9ed84742198c2af8</anchor>
      <arglist>(const Scroom::Utils::Point&lt; T &gt; &amp;p, FormatContext &amp;ctx) -&gt; decltype(ctx.out())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; Scroom::Utils::Rectangle&lt; T &gt; &gt;</name>
    <filename>structfmt_1_1formatter_3_01Scroom_1_1Utils_1_1Rectangle_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>structfmt_1_1formatter_3_01Scroom_1_1Utils_1_1Rectangle_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a3cbe3a76b8597bf84f9c3ed51408d452</anchor>
      <arglist>(const Scroom::Utils::Rectangle&lt; T &gt; &amp;r, FormatContext &amp;ctx) -&gt; decltype(ctx.out())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Freezable</name>
    <filename>classFreezable.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a9cd9c3a69b75b2fde59867b9b660770a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Freezable&lt; T &gt;</type>
      <name>Me</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>aa5b36d182f3da0282655c956e0f31f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Freezable</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>ad7885398b1e23a3c3cee458e9d408153</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Freezable</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a4df627a9ffc2d52d4c15dc846c006ae1</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>get</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>ab8af0d7957ffe3a39c4296603439ad4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a0cfabe97ddc222ff9a9c8b18f8370de1</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a20df0a6c13d95fe5028c999d2954e4cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a5ce3259c932d8d2a5cf4cbae89de1ab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_locked</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a49f2e02263d58a44ba5456b8d509bf85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const value_type &amp;</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>aaf816075cea5bdf80a0abcee12320efa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Me &amp;</type>
      <name>operator=</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>aca1c1016967d2e0870c76500537564da</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>operator*</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a3844d5b812c04148ced1ff84bd068282</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>accfb9292f63e4754a0429204587bdbd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Me &amp;</type>
      <name>operator+=</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>ac96f3d85f93d70f3bff78652e9f0c5f7</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>Me &amp;</type>
      <name>operator-=</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a4cf0db2285653d5c21b97bcd6a73926e</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a2ad0ae99f7ab7bdf64ae8c745c692105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>locked</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a6410fa6c522e2cbf5132a95c5ccf666d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Freezable&lt; Scroom::Utils::Point&lt; double &gt; &gt;</name>
    <filename>classFreezable.html</filename>
    <member kind="typedef">
      <type>Scroom::Utils::Point&lt; double &gt;</type>
      <name>value_type</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a9cd9c3a69b75b2fde59867b9b660770a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Freezable&lt; Scroom::Utils::Point&lt; double &gt; &gt;</type>
      <name>Me</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>aa5b36d182f3da0282655c956e0f31f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Freezable</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>ad7885398b1e23a3c3cee458e9d408153</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Freezable</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a4df627a9ffc2d52d4c15dc846c006ae1</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>get</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>ab8af0d7957ffe3a39c4296603439ad4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a0cfabe97ddc222ff9a9c8b18f8370de1</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a20df0a6c13d95fe5028c999d2954e4cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a5ce3259c932d8d2a5cf4cbae89de1ab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_locked</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a49f2e02263d58a44ba5456b8d509bf85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const value_type &amp;</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>aaf816075cea5bdf80a0abcee12320efa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Me &amp;</type>
      <name>operator=</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>aca1c1016967d2e0870c76500537564da</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>operator*</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a3844d5b812c04148ced1ff84bd068282</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>accfb9292f63e4754a0429204587bdbd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Me &amp;</type>
      <name>operator+=</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>ac96f3d85f93d70f3bff78652e9f0c5f7</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>Me &amp;</type>
      <name>operator-=</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a4cf0db2285653d5c21b97bcd6a73926e</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a2ad0ae99f7ab7bdf64ae8c745c692105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>locked</name>
      <anchorfile>classFreezable.html</anchorfile>
      <anchor>a6410fa6c522e2cbf5132a95c5ccf666d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Detail::ThreadPool::FunctionAdditor</name>
    <filename>classScroom_1_1Detail_1_1ThreadPool_1_1FunctionAdditor.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addBefore</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1FunctionAdditor.html</anchorfile>
      <anchor>a97d46fb8faadc4f22d9555a13b969d11</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAfter</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1FunctionAdditor.html</anchorfile>
      <anchor>aafbc6ad7c86ff4a23e824d7a4f7b9f38</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>FunctionAdditor &amp;</type>
      <name>operator+</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1FunctionAdditor.html</anchorfile>
      <anchor>a76d5a1dfe6ad1a84c61e54b6ecf831c1</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>FunctionAdditor &amp;</type>
      <name>operator+=</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1FunctionAdditor.html</anchorfile>
      <anchor>a6ce4c8e799d1a0cad10d2b03dd8088c0</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1FunctionAdditor.html</anchorfile>
      <anchor>a2d032cef037f552e01a588a9b28fa816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; boost::function&lt; void()&gt; &gt;</type>
      <name>functions</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1FunctionAdditor.html</anchorfile>
      <anchor>a7b0d7fe9ff38d853146d5392b4a83d34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Detail::ThreadPool::FunctionMultiplier</name>
    <filename>classScroom_1_1Detail_1_1ThreadPool_1_1FunctionMultiplier.html</filename>
    <member kind="function">
      <type></type>
      <name>FunctionMultiplier</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1FunctionMultiplier.html</anchorfile>
      <anchor>aeaf1a941a351b3e7be35a988a7cf60a4</anchor>
      <arglist>(boost::function&lt; void()&gt; f_, unsigned int i_)</arglist>
    </member>
    <member kind="function">
      <type>FunctionMultiplier &amp;</type>
      <name>operator*</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1FunctionMultiplier.html</anchorfile>
      <anchor>aa92aa2d359bb34feb35b91d7fa381ea8</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1FunctionMultiplier.html</anchorfile>
      <anchor>a6cca3693ac58c642d4130d785383597d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::function&lt; void()&gt;</type>
      <name>f</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1FunctionMultiplier.html</anchorfile>
      <anchor>ae91dc833ceb27c932412d1f94212e479</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>i</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1FunctionMultiplier.html</anchorfile>
      <anchor>ad08c46e754a93b1bebfa4a28dd4891c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GObjectUnref</name>
    <filename>classGObjectUnref.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classGObjectUnref.html</anchorfile>
      <anchor>a5549063fd31d40dae70ff99a457f70f3</anchor>
      <arglist>(T *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GtkFileFilterInfoDeleter</name>
    <filename>classGtkFileFilterInfoDeleter.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classGtkFileFilterInfoDeleter.html</anchorfile>
      <anchor>a6ee96e26ed65d1800a4ca976158f32f5</anchor>
      <arglist>(GtkFileFilterInfo *f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GtkFileFilterListDestroyer</name>
    <filename>classGtkFileFilterListDestroyer.html</filename>
    <member kind="function">
      <type></type>
      <name>GtkFileFilterListDestroyer</name>
      <anchorfile>classGtkFileFilterListDestroyer.html</anchorfile>
      <anchor>a77947f21592b1cf557e4b490114c5a38</anchor>
      <arglist>(std::list&lt; GtkFileFilter * &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GtkFileFilterListDestroyer</name>
      <anchorfile>classGtkFileFilterListDestroyer.html</anchorfile>
      <anchor>a5e6ff564d21e761f6fd3305e509e2fed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GtkFileFilterListDestroyer</name>
      <anchorfile>classGtkFileFilterListDestroyer.html</anchorfile>
      <anchor>a68a627726ae30ef1c91f1c82bf302c30</anchor>
      <arglist>(const GtkFileFilterListDestroyer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GtkFileFilterListDestroyer</name>
      <anchorfile>classGtkFileFilterListDestroyer.html</anchorfile>
      <anchor>ad533c517085e3505e4f3f2bc0b9253d6</anchor>
      <arglist>(GtkFileFilterListDestroyer &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>GtkFileFilterListDestroyer</type>
      <name>operator=</name>
      <anchorfile>classGtkFileFilterListDestroyer.html</anchorfile>
      <anchor>a8b415a606d83083198486cc8a70d9b5d</anchor>
      <arglist>(const GtkFileFilterListDestroyer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>GtkFileFilterListDestroyer</type>
      <name>operator=</name>
      <anchorfile>classGtkFileFilterListDestroyer.html</anchorfile>
      <anchor>a5cb86511bf0c2ab8562824ecea7423ab</anchor>
      <arglist>(GtkFileFilterListDestroyer &amp;&amp;)=delete</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; GtkFileFilter * &gt; &amp;</type>
      <name>filters</name>
      <anchorfile>classGtkFileFilterListDestroyer.html</anchorfile>
      <anchor>a443ad79b3a30f4f95d4ef5cb536c9ec5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::GtkTestHelpers::GtkMainLoop</name>
    <filename>classScroom_1_1GtkTestHelpers_1_1GtkMainLoop.html</filename>
    <member kind="function">
      <type></type>
      <name>GtkMainLoop</name>
      <anchorfile>classScroom_1_1GtkTestHelpers_1_1GtkMainLoop.html</anchorfile>
      <anchor>a8d5f8419160d3849f1186bbe9e2a26e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GtkMainLoop</name>
      <anchorfile>classScroom_1_1GtkTestHelpers_1_1GtkMainLoop.html</anchorfile>
      <anchor>af3b1a90c0b46e81f21b02351207cdfee</anchor>
      <arglist>(const GtkMainLoop &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>GtkMainLoop &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1GtkTestHelpers_1_1GtkMainLoop.html</anchorfile>
      <anchor>a27f19de707ca0ffdd4c84f7ba8d8bf71</anchor>
      <arglist>(const GtkMainLoop &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GtkMainLoop</name>
      <anchorfile>classScroom_1_1GtkTestHelpers_1_1GtkMainLoop.html</anchorfile>
      <anchor>a8ef76b54ba2c63f4e0ce6564f00974ef</anchor>
      <arglist>(GtkMainLoop &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>GtkMainLoop &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1GtkTestHelpers_1_1GtkMainLoop.html</anchorfile>
      <anchor>aa6960ffab003f7aac8fcbd32f53c96c4</anchor>
      <arglist>(GtkMainLoop &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GtkMainLoop</name>
      <anchorfile>classScroom_1_1GtkTestHelpers_1_1GtkMainLoop.html</anchorfile>
      <anchor>a6d98d37078eac344c1a88e41d54ae7e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>run_gtk</name>
      <anchorfile>classScroom_1_1GtkTestHelpers_1_1GtkMainLoop.html</anchorfile>
      <anchor>af0ad2fbd72c61ebfa16fd6619f45eeaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::thread</type>
      <name>gtk_thread</name>
      <anchorfile>classScroom_1_1GtkTestHelpers_1_1GtkMainLoop.html</anchorfile>
      <anchor>a09807b7809e9a948158df503fca5a686</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hash</name>
    <filename>classhash.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>hash_map</name>
    <filename>classhash__map.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>hash_map&lt; Key, Val, hash&lt; Key &gt;, equal_to&lt; Val &gt; &gt;</name>
    <filename>classhash__map_3_01Key_00_01Val_00_01hash_3_01Key_01_4_00_01equal__to_3_01Val_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>HorizontalDrawStrategy</name>
    <filename>classHorizontalDrawStrategy.html</filename>
    <base>RulerDrawStrategy</base>
    <member kind="function">
      <type>double</type>
      <name>getMajorTickLength</name>
      <anchorfile>classHorizontalDrawStrategy.html</anchorfile>
      <anchor>a83df0b6bd51072291adbf30a5aec5694</anchor>
      <arglist>(double percentage) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDrawAreaSize</name>
      <anchorfile>classHorizontalDrawStrategy.html</anchorfile>
      <anchor>a5194809d2e6eaaae87e3c0f5eed8f070</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawOutline</name>
      <anchorfile>classHorizontalDrawStrategy.html</anchorfile>
      <anchor>a8b7409e7a2c96de1a5fe6fdb2d62435d</anchor>
      <arglist>(cairo_t *cr, double lineWidth) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTickLine</name>
      <anchorfile>classHorizontalDrawStrategy.html</anchorfile>
      <anchor>acc63ffbfa6d4dbcfcc11b1e1ecac7318</anchor>
      <arglist>(cairo_t *cr, double linePosition, double lineWidth, double lineLength) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTickText</name>
      <anchorfile>classHorizontalDrawStrategy.html</anchorfile>
      <anchor>a9e9201354fc44a0b6f296e7f74138cea</anchor>
      <arglist>(cairo_t *cr, const std::string &amp;label, double linePosition, double labelOffset, double labelAlign, double lineLength) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RulerDrawStrategy::Ptr</type>
      <name>create</name>
      <anchorfile>classHorizontalDrawStrategy.html</anchorfile>
      <anchor>a72d3b0cbcee1d7997cfc22173f7c43c3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Interface</name>
    <filename>classInterface.html</filename>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>classInterface.html</anchorfile>
      <anchor>ae0e5b08ef260a27c1aabb8adc4570ef5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>classInterface.html</anchorfile>
      <anchor>a768192e4a826ff9f279fc3ffb939784c</anchor>
      <arglist>(const Interface &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Interface &amp;</type>
      <name>operator=</name>
      <anchorfile>classInterface.html</anchorfile>
      <anchor>a0648afc0b8209ac03a75187d83fcf3cb</anchor>
      <arglist>(const Interface &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>classInterface.html</anchorfile>
      <anchor>ae98ba8f8aab4beea20934edd14178f9b</anchor>
      <arglist>(const Interface &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Interface &amp;</type>
      <name>operator=</name>
      <anchorfile>classInterface.html</anchorfile>
      <anchor>ad18fc6c2e3da21517e65253f5f3f2e64</anchor>
      <arglist>(const Interface &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Interface</name>
      <anchorfile>classInterface.html</anchorfile>
      <anchor>a7c171febd7287540790a9b7d0382cd61</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InvalidatingCounter</name>
    <filename>classInvalidatingCounter.html</filename>
    <base>BaseCounter</base>
    <member kind="function">
      <type></type>
      <name>InvalidatingCounter</name>
      <anchorfile>classInvalidatingCounter.html</anchorfile>
      <anchor>ad4701e5811c0140aa1787cf5db4a8fca</anchor>
      <arglist>(const std::string &amp;name, unsigned int secs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classInvalidatingCounter.html</anchorfile>
      <anchor>af997e7c09c92f5eba341ee4386cdd65a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Invalidator</name>
    <filename>classInvalidator.html</filename>
    <member kind="function">
      <type></type>
      <name>Invalidator</name>
      <anchorfile>classInvalidator.html</anchorfile>
      <anchor>aa1f05d6d2a006d7944d6fa9075d4ad08</anchor>
      <arglist>(unsigned int secs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classInvalidator.html</anchorfile>
      <anchor>a3f8333ef5f4eb05504b885b1ca45ef15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>secs</name>
      <anchorfile>classInvalidator.html</anchorfile>
      <anchor>accb02aa33dde4c6bdee0fd3aefecbf44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>started</name>
      <anchorfile>classInvalidator.html</anchorfile>
      <anchor>aa74093879fc51ea913917fbe38c6edcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>struct timespec</type>
      <name>t</name>
      <anchorfile>classInvalidator.html</anchorfile>
      <anchor>a867ce607877ecc72a97c79385c0cc7a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ITweakSelection</name>
    <filename>classITweakSelection.html</filename>
    <base>Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ITweakSelection &gt;</type>
      <name>Ptr</name>
      <anchorfile>classITweakSelection.html</anchorfile>
      <anchor>ad1632853981c27a9fe5bd385ea652aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scroom::Utils::Point&lt; double &gt;</type>
      <name>Point</name>
      <anchorfile>classITweakSelection.html</anchorfile>
      <anchor>a71dc24033cd4f01f9b681d6378e2c447</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Selection</type>
      <name>tweakSelection</name>
      <anchorfile>classITweakSelection.html</anchorfile>
      <anchor>a66526e93a452f5f02cad88d486d3869a</anchor>
      <arglist>(Selection selection) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAspectRatio</name>
      <anchorfile>classITweakSelection.html</anchorfile>
      <anchor>a854971a73838978bd02044dcfad729cb</anchor>
      <arglist>(Point aspectRatio_)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ThreadPool::Job</name>
    <filename>structThreadPool_1_1Job.html</filename>
    <member kind="function">
      <type></type>
      <name>Job</name>
      <anchorfile>structThreadPool_1_1Job.html</anchorfile>
      <anchor>a0f279a25370d7c4af55a90baed744f38</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Job</name>
      <anchorfile>structThreadPool_1_1Job.html</anchorfile>
      <anchor>a8d34176468a7051b195dce4fad19e04f</anchor>
      <arglist>(boost::function&lt; void()&gt; fn, const WeakQueue::Ptr &amp;queue)</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; Scroom::Detail::ThreadPool::QueueImpl &gt;</type>
      <name>queue</name>
      <anchorfile>structThreadPool_1_1Job.html</anchorfile>
      <anchor>a0d840c12561a22a21802fee7c3286ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::function&lt; void()&gt;</type>
      <name>fn</name>
      <anchorfile>structThreadPool_1_1Job.html</anchorfile>
      <anchor>a658aeaa8ac34c28832cdb8f0c080e75f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Layer</name>
    <filename>classLayer.html</filename>
    <base>Viewable</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Layer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a4f07f871f3d1e7b153553a4ffa435656</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHorTileCount</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>aa95b82451c1bf40bfc09200d4c1336ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVerTileCount</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>ad3ca3869b234ba456c3add5bd67e4860</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CompressedTile::Ptr</type>
      <name>getTile</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a7428a55d293b5d3a0c3a1da17bbb19c4</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>CompressedTileLine &amp;</type>
      <name>getTileLine</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>af90b35813138ca6b6881f78ab67cea33</anchor>
      <arglist>(int j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fetchData</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a3d2253a27e5b42cde01f15c85959580c</anchor>
      <arglist>(SourcePresentation::Ptr sp, const ThreadPool::WeakQueue::Ptr &amp;queue, std::function&lt; void()&gt; on_finished)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWidth</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>ac96bf85488cb3fb1f1e4f078f1d7c767</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeight</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a93762cbd22847abe210805c546329e51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a7496892cad703e085e3e0145026f1c42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Rectangle&lt; int &gt;</type>
      <name>getRect</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a9a9ccf7e5749b9f6bfa0de956fcac772</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>registerObserver</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a48dc1b9f287e3552fc501292ee16ac36</anchor>
      <arglist>(const TileInitialisationObserver::Ptr &amp;observer)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::MemoryBlobs::PageProvider::Ptr</type>
      <name>getPageProvider</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a193fccd8bdd01f7d86b364cf6cecd042</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>afd25e081ea14b44723ccbf3bb1510b35</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a0e1a9f997012b05c921c35c66677c347</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a8f3623d32725dbc8537779fb7f682e46</anchor>
      <arglist>(int depth, int layerWidth, int layerHeight, int bpp, Scroom::MemoryBlobs::PageProvider::Ptr provider)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>ad91888355ff587ff45d585488dc21132</anchor>
      <arglist>(int layerWidth, int layerHeight, int bpp)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Layer</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a461f24acc6b9fac1f007516bcd380c25</anchor>
      <arglist>(int depth, int layerWidth, int layerHeight, int bpp, Scroom::MemoryBlobs::PageProvider::Ptr provider)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>depth</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a1f53ce854eed0215bbe94d3b23e6bc25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>width</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a724d3020ddbe5f9280caa325541e70a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>height</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a6a0bc24033339368a0ca9747485f0053</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>horTileCount</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a09a8f2e20d2c509376948e9e8be89a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>verTileCount</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a8f270463756cb7dc9897564b3bff23d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CompressedTileGrid</type>
      <name>tiles</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>acd8097c5fc4b8523de8e2e64478df49c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CompressedTile::Ptr</type>
      <name>outOfBounds</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a6276fa23dbc72e1813dea0ce909fbc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CompressedTileLine</type>
      <name>lineOutOfBounds</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>a293b3e4be5e6edc8c3b83718f8c7ee33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::MemoryBlobs::PageProvider::Ptr</type>
      <name>pageProvider</name>
      <anchorfile>classLayer.html</anchorfile>
      <anchor>ad3ce25fb2fef0a59b6520ed131d31d15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LayerCoordinator</name>
    <filename>classLayerCoordinator.html</filename>
    <base>TileInitialisationObserver</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; LayerCoordinator &gt;</type>
      <name>Ptr</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>a823decb4693994ec45f4b9e6f70194ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LayerCoordinator</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>add0a7d30d6b05046a5c925779e7b2a9a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LayerCoordinator</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>a3eafcda521a02dab43ce39423336214f</anchor>
      <arglist>(const LayerCoordinator &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LayerCoordinator</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>a9e3bb81ad4b4ef95cbb27dc6b3f6e109</anchor>
      <arglist>(LayerCoordinator &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>LayerCoordinator</type>
      <name>operator=</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>a218c9484e747b15ad2e9893bf9eba2dd</anchor>
      <arglist>(const LayerCoordinator &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>LayerCoordinator</type>
      <name>operator=</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>a69900a72e012376f8f1de903f285ef30</anchor>
      <arglist>(LayerCoordinator &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSourceTile</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>a3eba96fa471fb77c58d984a72417a153</anchor>
      <arglist>(int x, int y, const CompressedTile::Ptr &amp;tile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tileFinished</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>aaed9f19d2d0be309e22c373551c27f9b</anchor>
      <arglist>(const CompressedTile::Ptr &amp;tile) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>a2ced2ea05b51b8480e4a359156eff623</anchor>
      <arglist>(CompressedTile::Ptr targetTile, LayerOperations::Ptr lo)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>LayerCoordinator</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>ad0f7940315165ccb0d889a98d1775591</anchor>
      <arglist>(CompressedTile::Ptr targetTile, LayerOperations::Ptr lo)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reduceSourceTile</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>abf1c504acb49c1f0bf7084b8490634ec</anchor>
      <arglist>(const CompressedTile::Ptr &amp;tile, ConstTile::Ptr const &amp;tileData)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CompressedTile::Ptr</type>
      <name>targetTile</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>a62cf504f112d2bcefde5f28cc8fbea0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Tile::Ptr</type>
      <name>targetTileData</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>a1999356ab8aa0850573f166cc67dd6e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; CompressedTile::Ptr, std::pair&lt; int, int &gt; &gt;</type>
      <name>sourceTiles</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>af1b904debfc7f722212d35fe6aab2d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::StuffList</type>
      <name>registrations</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>a7d1b586609c84e7de24885ffb9219399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LayerOperations::Ptr</type>
      <name>lo</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>a448c520cd5af1ff7a9544fa1d1e763e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>a04183febf1f176686720204536cbc029</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>unfinishedSourceTiles</name>
      <anchorfile>classLayerCoordinator.html</anchorfile>
      <anchor>a10c173554219cf48f19946bbd1474316</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LayerOperations</name>
    <filename>classLayerOperations.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; LayerOperations &gt;</type>
      <name>Ptr</name>
      <anchorfile>classLayerOperations.html</anchorfile>
      <anchor>acd692e175a787ed6ff190cccd850aef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getBpp</name>
      <anchorfile>classLayerOperations.html</anchorfile>
      <anchor>aa9bf1c736113d22bf58ec523cd163505</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeCairo</name>
      <anchorfile>classLayerOperations.html</anchorfile>
      <anchor>a464745addca585c466e4ff3ec871ad51</anchor>
      <arglist>(cairo_t *cr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classLayerOperations.html</anchorfile>
      <anchor>a565a8c1884189f68b348be51fabd280d</anchor>
      <arglist>(cairo_t *cr, const ConstTile::Ptr &amp;tile, Scroom::Utils::Rectangle&lt; double &gt; tileArea, Scroom::Utils::Rectangle&lt; double &gt; viewArea, int zoom, Scroom::Utils::Stuff cache)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawState</name>
      <anchorfile>classLayerOperations.html</anchorfile>
      <anchor>ab0ea05d6bd0fb7aecd041c17ad0b6862</anchor>
      <arglist>(cairo_t *cr, TileState s, Scroom::Utils::Rectangle&lt; double &gt; viewArea)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Scroom::Utils::Stuff</type>
      <name>cache</name>
      <anchorfile>classLayerOperations.html</anchorfile>
      <anchor>aa1f918f99b5e282a6614f252c18696e5</anchor>
      <arglist>(const ConstTile::Ptr &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Scroom::Utils::Stuff</type>
      <name>cacheZoom</name>
      <anchorfile>classLayerOperations.html</anchorfile>
      <anchor>a9a7b5921452d57a924583895293f9acd</anchor>
      <arglist>(const ConstTile::Ptr &amp;, int, Scroom::Utils::Stuff &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reduce</name>
      <anchorfile>classLayerOperations.html</anchorfile>
      <anchor>a9625370e3f406c8c0c53b3d156e849f5</anchor>
      <arglist>(Tile::Ptr target, ConstTile::Ptr source, int x, int y)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::TiledBitmap::LayerSpecForBitmapper</name>
    <filename>classScroom_1_1TiledBitmap_1_1LayerSpecForBitmapper.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; LayerSpecForBitmapper &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1TiledBitmap_1_1LayerSpecForBitmapper.html</anchorfile>
      <anchor>ac8da31481854fe24c4b99f4deaeda807</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerFunction</name>
      <anchorfile>classScroom_1_1TiledBitmap_1_1LayerSpecForBitmapper.html</anchorfile>
      <anchor>ab86831a7bcb5d2bf0be3de2b563d8db4</anchor>
      <arglist>(const LayerSpecForBitmapFunc &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>LayerSpecResult</type>
      <name>get</name>
      <anchorfile>classScroom_1_1TiledBitmap_1_1LayerSpecForBitmapper.html</anchorfile>
      <anchor>afde462d3792a41077b95c32be89c1976</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>instance</name>
      <anchorfile>classScroom_1_1TiledBitmap_1_1LayerSpecForBitmapper.html</anchorfile>
      <anchor>aa906af0d0cf6a5d36c992c70cb083afa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>LayerSpecForBitmapper</name>
      <anchorfile>classScroom_1_1TiledBitmap_1_1LayerSpecForBitmapper.html</anchorfile>
      <anchor>a57fe04d709876ca9546f0ab8daafad13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; LayerSpecForBitmapFunc &gt;</type>
      <name>functions</name>
      <anchorfile>classScroom_1_1TiledBitmap_1_1LayerSpecForBitmapper.html</anchorfile>
      <anchor>a2c08615ff21468fc4af3444b933f2dcc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Bookkeeping::Detail::LValue</name>
    <filename>classScroom_1_1Bookkeeping_1_1Detail_1_1LValue.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename ValueType&lt; V &gt;::Ptr</type>
      <name>VTPtr</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1LValue.html</anchorfile>
      <anchor>a481b63c7f7c922b184a3ec99b084fa1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LValue</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1LValue.html</anchorfile>
      <anchor>a469dd5a710a051e3c1fc3bf9296d35d6</anchor>
      <arglist>(VTPtr pv_)</arglist>
    </member>
    <member kind="function">
      <type>LValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1LValue.html</anchorfile>
      <anchor>a1e185cb05ed97af290057d7de8b9e3b2</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator V</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1LValue.html</anchorfile>
      <anchor>a6dbd75ee5eb35f21ac14e9fdee297897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VTPtr</type>
      <name>pv</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1LValue.html</anchorfile>
      <anchor>a95f43ba20c6873b5fa44c15339aefdca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Bookkeeping::Map</name>
    <filename>classScroom_1_1Bookkeeping_1_1Map.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Scroom::Bookkeeping::MapBase</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Map&lt; K, V &gt; &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Map.html</anchorfile>
      <anchor>a3d0544524850dba27a6b52b06e130dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Map.html</anchorfile>
      <anchor>ab1c85f32de69734c55e5835bcaa6e419</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; ObserverWeak, typename Registration::Ptr &gt;</name>
    <filename>classScroom_1_1Bookkeeping_1_1Map.html</filename>
    <base>MapBase&lt; ObserverWeak, typename Registration::Ptr &gt;</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Map&lt; ObserverWeak, typename Registration::Ptr &gt; &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Map.html</anchorfile>
      <anchor>a3d0544524850dba27a6b52b06e130dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Map.html</anchorfile>
      <anchor>ab1c85f32de69734c55e5835bcaa6e419</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Bookkeeping::MapBase</name>
    <filename>classScroom_1_1Bookkeeping_1_1MapBase.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="function">
      <type>Token</type>
      <name>reserve</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>ab1637319528a07f46e90ad35b4bb699b</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>Token</type>
      <name>reReserve</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>a35d6bda7d3d5521f753cea7fdef31368</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>a0197110a02411fa82928491fb00aac7d</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>ab3b50309f8246a3e4acc7ae5cc98a584</anchor>
      <arglist>(const K &amp;k, const WeakToken &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Detail::LValue&lt; V &gt;</type>
      <name>at</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>a95cb93662641b37130f3f230da348440</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>a3ce4badd74451cca2b795635fd7e98c0</anchor>
      <arglist>(const K &amp;k, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>get</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>a1c00174b9d2e744dff954408dcc0b17a</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; K &gt;</type>
      <name>keys</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>affd434e799aa471bed9b93cad7695afd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; V &gt;</type>
      <name>values</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>af53f87156861f71a05069d94d82dd224</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>typename Detail::MapType&lt; K, V &gt;::Type</type>
      <name>MapType</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>a9773acc8a00acfd89d58831ed025ee77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MapType</type>
      <name>map</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>a331ed4a8412e4f923b8161f22cf8a374</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>ae8edc99a660eb89925a7b7de5b6ec760</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapBase&lt; ObserverWeak, typename Registration::Ptr &gt;</name>
    <filename>classScroom_1_1Bookkeeping_1_1MapBase.html</filename>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="function">
      <type>Token</type>
      <name>reserve</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>ab1637319528a07f46e90ad35b4bb699b</anchor>
      <arglist>(const ObserverWeak &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>Token</type>
      <name>reReserve</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>a35d6bda7d3d5521f753cea7fdef31368</anchor>
      <arglist>(const ObserverWeak &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>a0197110a02411fa82928491fb00aac7d</anchor>
      <arglist>(const ObserverWeak &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>ab3b50309f8246a3e4acc7ae5cc98a584</anchor>
      <arglist>(const ObserverWeak &amp;k, const WeakToken &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Detail::LValue&lt; typename Registration::Ptr &gt;</type>
      <name>at</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>a95cb93662641b37130f3f230da348440</anchor>
      <arglist>(const ObserverWeak &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>a3ce4badd74451cca2b795635fd7e98c0</anchor>
      <arglist>(const ObserverWeak &amp;k, const typename Registration::Ptr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>typename Registration::Ptr</type>
      <name>get</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>a1c00174b9d2e744dff954408dcc0b17a</anchor>
      <arglist>(const ObserverWeak &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; ObserverWeak &gt;</type>
      <name>keys</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>affd434e799aa471bed9b93cad7695afd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; typename Registration::Ptr &gt;</type>
      <name>values</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>af53f87156861f71a05069d94d82dd224</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>typename Detail::MapType&lt; ObserverWeak, typename Registration::Ptr &gt;::Type</type>
      <name>MapType</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>a9773acc8a00acfd89d58831ed025ee77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MapType</type>
      <name>map</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>a331ed4a8412e4f923b8161f22cf8a374</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1MapBase.html</anchorfile>
      <anchor>ae8edc99a660eb89925a7b7de5b6ec760</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Bookkeeping::Detail::MapTokenImpl</name>
    <filename>classScroom_1_1Bookkeeping_1_1Detail_1_1MapTokenImpl.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Scroom::Bookkeeping::Detail::TokenImpl</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MapTokenImpl&lt; K, V &gt; &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1MapTokenImpl.html</anchorfile>
      <anchor>afc0ddb25d4d329c5afbe7cc609eb28e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MapTokenImpl</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1MapTokenImpl.html</anchorfile>
      <anchor>a1d59cefa36d2d34bb168f3593187e2db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scroom::Bookkeeping::Token</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1MapTokenImpl.html</anchorfile>
      <anchor>a19e218c5bd3aa322a77cbf28b9778ff8</anchor>
      <arglist>(std::shared_ptr&lt; Scroom::Bookkeeping::MapBase&lt; K, V &gt;&gt; map, const K &amp;k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MapTokenImpl</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1MapTokenImpl.html</anchorfile>
      <anchor>a9ca2a197e19bd5a42aa4363ed548a472</anchor>
      <arglist>(std::shared_ptr&lt; Scroom::Bookkeeping::MapBase&lt; K, V &gt;&gt; map_, K k_)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MapTokenImpl</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1MapTokenImpl.html</anchorfile>
      <anchor>ab3c12894c693bfaf6854755e8beeadba</anchor>
      <arglist>(const MapTokenImpl &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MapTokenImpl</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1MapTokenImpl.html</anchorfile>
      <anchor>aa34bf74e2484e07fbc0a18da70e980d2</anchor>
      <arglist>(MapTokenImpl &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MapTokenImpl</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1MapTokenImpl.html</anchorfile>
      <anchor>ae73445f2bceacab28458e6388de9f292</anchor>
      <arglist>(const MapTokenImpl &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MapTokenImpl</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1MapTokenImpl.html</anchorfile>
      <anchor>a84fc1e0dd7bebed9fe19168a908fb6c4</anchor>
      <arglist>(MapTokenImpl &amp;&amp;)=delete</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::weak_ptr&lt; Scroom::Bookkeeping::MapBase&lt; K, V &gt; &gt;</type>
      <name>map</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1MapTokenImpl.html</anchorfile>
      <anchor>af40ed99a0504271dd80b24e5554a9909</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WeakToken</type>
      <name>t</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1MapTokenImpl.html</anchorfile>
      <anchor>a296eaa4df7c9cbf673734b297da4764b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>K</type>
      <name>k</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1MapTokenImpl.html</anchorfile>
      <anchor>a1305c2195f377199b67526ba345d5e17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Scroom::Bookkeeping::Detail::MapType</name>
    <filename>structScroom_1_1Bookkeeping_1_1Detail_1_1MapType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename std::map&lt; K, std::weak_ptr&lt; Detail::ValueType&lt; V &gt; &gt;&gt;</type>
      <name>Type</name>
      <anchorfile>structScroom_1_1Bookkeeping_1_1Detail_1_1MapType.html</anchorfile>
      <anchor>abecb275bfe803f39e9287b4e41696a09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MapType&lt; ObserverWeak, typename Registration::Ptr &gt;</name>
    <filename>structScroom_1_1Bookkeeping_1_1Detail_1_1MapType.html</filename>
    <member kind="typedef">
      <type>typename std::map&lt; ObserverWeak, std::weak_ptr&lt; Detail::ValueType&lt; typename Registration::Ptr &gt; &gt;&gt;</type>
      <name>Type</name>
      <anchorfile>structScroom_1_1Bookkeeping_1_1Detail_1_1MapType.html</anchorfile>
      <anchor>abecb275bfe803f39e9287b4e41696a09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Scroom::Bookkeeping::Detail::MapType&lt; std::weak_ptr&lt; K &gt;, V &gt;</name>
    <filename>structScroom_1_1Bookkeeping_1_1Detail_1_1MapType_3_01std_1_1weak__ptr_3_01K_01_4_00_01V_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Scroom::Utils::WeakKeyMap&lt; std::weak_ptr&lt; K &gt;, std::weak_ptr&lt; Detail::ValueType&lt; V &gt; &gt;&gt;</type>
      <name>Type</name>
      <anchorfile>structScroom_1_1Bookkeeping_1_1Detail_1_1MapType_3_01std_1_1weak__ptr_3_01K_01_4_00_01V_01_4.html</anchorfile>
      <anchor>a3d0f863318e27ea3df83024618498eeb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::MemoryBlobs::PageProvider::MarkPageFree</name>
    <filename>classScroom_1_1MemoryBlobs_1_1PageProvider_1_1MarkPageFree.html</filename>
    <member kind="function">
      <type></type>
      <name>MarkPageFree</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider_1_1MarkPageFree.html</anchorfile>
      <anchor>ae4f58feb0240e4745ea4f6a161be1475</anchor>
      <arglist>(PageProvider::Ptr provider)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider_1_1MarkPageFree.html</anchorfile>
      <anchor>aebf91e32d7d89fb008a65c31f606a108</anchor>
      <arglist>(Scroom::MemoryBlocks::Page *page)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PageProvider::Ptr</type>
      <name>provider</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider_1_1MarkPageFree.html</anchorfile>
      <anchor>ae67b49a017e72da463871321c46c3c30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Measure</name>
    <filename>classMeasure.html</filename>
    <base>PluginInformationInterface</base>
    <base>ViewObserver</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Measure &gt;</type>
      <name>Ptr</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>a3903e731055021db9622584e319fa8f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginName</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>ac9d396614c76196e1eaf0a97ddc49882</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginVersion</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>afdf8a4560120c9d1b73a4f8ec2641b3c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCapabilities</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>aad7ff6db490577a6f385c9c396e3daba</anchor>
      <arglist>(ScroomPluginInterface::Ptr host) override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>viewAdded</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>a76f201de0da18b6b2727a96e07252196</anchor>
      <arglist>(ViewInterface::Ptr v) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>a11a1285a1dfd1a41545b556e8b57a2b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Measure</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>a9736b4daffc3bac4581c322adbebfe1f</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeasureHandler</name>
    <filename>classMeasureHandler.html</filename>
    <base>ToolStateListener</base>
    <base>PostRenderer</base>
    <base>SelectionListener</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MeasureHandler &gt;</type>
      <name>Ptr</name>
      <anchorfile>classMeasureHandler.html</anchorfile>
      <anchor>aeeae68327c4b2a564dd31ccd7d96c4c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classMeasureHandler.html</anchorfile>
      <anchor>aa5da72693cd934cc1a4e2d6aa6991df8</anchor>
      <arglist>(ViewInterface::Ptr const &amp;vi, cairo_t *cr, Scroom::Utils::Rectangle&lt; double &gt; presentationArea, int zoom) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onSelectionStart</name>
      <anchorfile>classMeasureHandler.html</anchorfile>
      <anchor>aa1dbb6501a860d9e9cc7a17234fd8033</anchor>
      <arglist>(Selection p, ViewInterface::Ptr view) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onSelectionUpdate</name>
      <anchorfile>classMeasureHandler.html</anchorfile>
      <anchor>a05c308179492e7d55ecf641ab30893b3</anchor>
      <arglist>(Selection s, ViewInterface::Ptr view) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onSelectionEnd</name>
      <anchorfile>classMeasureHandler.html</anchorfile>
      <anchor>a2b7304f7764588c6b3c85d93bb6e2c9a</anchor>
      <arglist>(Selection s, ViewInterface::Ptr view) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onEnable</name>
      <anchorfile>classMeasureHandler.html</anchorfile>
      <anchor>a29501e258fc030a770c0b5dbbd3c5174</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onDisable</name>
      <anchorfile>classMeasureHandler.html</anchorfile>
      <anchor>abd056938bc1f92183e1a7ca54f033ab5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classMeasureHandler.html</anchorfile>
      <anchor>a8b0eece69453b6b02885a7975c9c08f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>displayMeasurement</name>
      <anchorfile>classMeasureHandler.html</anchorfile>
      <anchor>aa30dd1737fe173472b6aca30692eab84</anchor>
      <arglist>(const ViewInterface::Ptr &amp;view)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>drawCross</name>
      <anchorfile>classMeasureHandler.html</anchorfile>
      <anchor>aa15c75da849a11f21e03d8af8a608e2f</anchor>
      <arglist>(cairo_t *cr, Scroom::Utils::Point&lt; double &gt; p)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::optional&lt; Selection &gt;</type>
      <name>selection</name>
      <anchorfile>classMeasureHandler.html</anchorfile>
      <anchor>a048b8f2085ffc7f409140ad5289f1df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>enabled</name>
      <anchorfile>classMeasureHandler.html</anchorfile>
      <anchor>ad1f0ab100e7270bb54688bb8e071cfc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Metadata</name>
    <filename>classMetadata.html</filename>
    <base>PluginInformationInterface</base>
    <base>ViewObserver</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Metadata &gt;</type>
      <name>Ptr</name>
      <anchorfile>classMetadata.html</anchorfile>
      <anchor>af19f89afb7c98f6bf348192a0a801107</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginName</name>
      <anchorfile>classMetadata.html</anchorfile>
      <anchor>a00dd045a1367250cee72781ee7ae097b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginVersion</name>
      <anchorfile>classMetadata.html</anchorfile>
      <anchor>add8621a67632d30bd982c02f8ea27cc8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCapabilities</name>
      <anchorfile>classMetadata.html</anchorfile>
      <anchor>ab095c91fd21188c05b969c8cdafbf98b</anchor>
      <arglist>(ScroomPluginInterface::Ptr host) override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>viewAdded</name>
      <anchorfile>classMetadata.html</anchorfile>
      <anchor>aa72fe849c13ba718f14644f1eb60c7e8</anchor>
      <arglist>(ViewInterface::Ptr v) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classMetadata.html</anchorfile>
      <anchor>a442b2398bb289c6a71a8d5ced8576ba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Metadata</name>
      <anchorfile>classMetadata.html</anchorfile>
      <anchor>ae849560667461008cb72e83919c20be0</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Scroom::Metadata::anonymous_namespace{showmetadata.cc}::MetaDataWindowData</name>
    <filename>structScroom_1_1Metadata_1_1anonymous__namespace_02showmetadata_8cc_03_1_1MetaDataWindowData.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>title</name>
      <anchorfile>structScroom_1_1Metadata_1_1anonymous__namespace_02showmetadata_8cc_03_1_1MetaDataWindowData.html</anchorfile>
      <anchor>a52cde22d38318913db11aa5a28318978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Metadata</type>
      <name>data</name>
      <anchorfile>structScroom_1_1Metadata_1_1anonymous__namespace_02showmetadata_8cc_03_1_1MetaDataWindowData.html</anchorfile>
      <anchor>ad9310f6ff27a36b0a59943291287775c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MonochromeColormapHelper</name>
    <filename>classMonochromeColormapHelper.html</filename>
    <base>ColormapHelperBase</base>
    <member kind="function">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>getProperties</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>a0e7bf289b349479185d1fd20e9673ecd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>getMonochromeColor</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>a5e9b44b1984a9d5e4cf028900c4d975a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMonochromeColor</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>a81ae81cca702b13aca63d07013f37ab1</anchor>
      <arglist>(const Color &amp;c) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransparentBackground</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>a5ed464af7f8f5dadc9d2cd7989dd626f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableTransparentBackground</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>a8ca9ddcea676c30f085ae9aa94dc1299</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTransparentBackground</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>ad3976ddb1a9075f70ef51142c3ad96fc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>a3d60bf2ef52a480ef936f98ad5f84a3b</anchor>
      <arglist>(int numberOfColors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>createInverted</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>ace01cfb15ef9889abb675f74e51a0db1</anchor>
      <arglist>(int numberOfColors)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MonochromeColormapHelper</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>a02c5a240a533b6db0f061129d33c3667</anchor>
      <arglist>(int numberOfColors, bool inverted)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>regenerateColormap</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>a9a984da597fe959f697633a592b4530b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static Colormap::Ptr</type>
      <name>generateInitialColormap</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>aa877583213c557c5c0c54a8da6700ec6</anchor>
      <arglist>(int numberOfColors, bool inverted)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numberOfColors</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>a22800a9f435551e61e8fc20cf889997a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>inverted</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>aecd373be59f8a1cb2ee22f2a73ac5d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Color</type>
      <name>blackish</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>a8fa1230073c5c69150346be374976bb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Color</type>
      <name>whitish</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>ae1561b1293e79049b7d0f83119bccaf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>transparentBackground</name>
      <anchorfile>classMonochromeColormapHelper.html</anchorfile>
      <anchor>aa54b09eb5b74f13bb333f5211893240e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NewAggregateInterface</name>
    <filename>classNewAggregateInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; NewAggregateInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classNewAggregateInterface.html</anchorfile>
      <anchor>aa3e9e614b7a11c145e17f32725c8ec4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Aggregate::Ptr</type>
      <name>createNew</name>
      <anchorfile>classNewAggregateInterface.html</anchorfile>
      <anchor>ae5d18707212807d6a427c8d6b945ea84</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NewPresentationInterface</name>
    <filename>classNewPresentationInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; NewPresentationInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classNewPresentationInterface.html</anchorfile>
      <anchor>a8481dd888fcca68a5017c6e6156f8a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PresentationInterface::Ptr</type>
      <name>createNew</name>
      <anchorfile>classNewPresentationInterface.html</anchorfile>
      <anchor>a213093b39c2e431b9a487dff16011e2f</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::Observable</name>
    <filename>classScroom_1_1Utils_1_1Observable.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>Observer</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>af3e1005371eb41f254a9e330e1c20a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Observable&lt; T &gt; &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>af3ccb47d74ec555f42cc66a5356b808e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a0985c831266bda7104445a9f0babee03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a4f0d66bf65eaa61b77987c2b47e38ac1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a9a64dcee35b761f9096c802c9fc2139b</anchor>
      <arglist>(const Observable &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aaf6401fbf84e5e0fae0071f3ef083852</anchor>
      <arglist>(Observable &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Observable</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a4a1120fb34ca9873cb4f7236628e1dc6</anchor>
      <arglist>(const Observable &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Observable</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a18d957956960766feef1a4ab10ecda1a</anchor>
      <arglist>(Observable &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>registerStrongObserver</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>ac8eb66519da1d1f30aaaa8a46b82def4</anchor>
      <arglist>(Observer const &amp;observer)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>registerObserver</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>af513d91b5b1ca025d34f428208512c45</anchor>
      <arglist>(ObserverWeak const &amp;observer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::list&lt; Observer &gt;</type>
      <name>getObservers</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>ae215a3f722f5894dd8fdc1cb9b190c0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>observerAdded</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>acef811808cd92423e56ca29abd5ef880</anchor>
      <arglist>(Observer const &amp;observer, Scroom::Bookkeeping::Token const &amp;token)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::weak_ptr&lt; T &gt;</type>
      <name>ObserverWeak</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a3aba7a30e5965d2862e5a07ce5482b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Detail::Registration&lt; T &gt;</type>
      <name>Registration</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aebd85f42cb1237848725431cf4363562</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unregisterObserver</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a799c4980f27a38fff285c25fe4690e37</anchor>
      <arglist>(ObserverWeak const &amp;observer)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Bookkeeping::Map&lt; ObserverWeak, typename Registration::Ptr &gt;::Ptr</type>
      <name>registrationMap</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aab2cdbbc592ce8b952fb179f606d84d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Detail::Registration&lt; T &gt;</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aefb9970412fa0c96e8bafc25f1a52dad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Observable&lt; TestObserver &gt;</name>
    <filename>classScroom_1_1Utils_1_1Observable.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TestObserver &gt;</type>
      <name>Observer</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>af3e1005371eb41f254a9e330e1c20a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Observable&lt; TestObserver &gt; &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>af3ccb47d74ec555f42cc66a5356b808e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a0985c831266bda7104445a9f0babee03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a9a64dcee35b761f9096c802c9fc2139b</anchor>
      <arglist>(const Observable &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aaf6401fbf84e5e0fae0071f3ef083852</anchor>
      <arglist>(Observable &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a4f0d66bf65eaa61b77987c2b47e38ac1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Observable</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a4a1120fb34ca9873cb4f7236628e1dc6</anchor>
      <arglist>(const Observable &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Observable</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a18d957956960766feef1a4ab10ecda1a</anchor>
      <arglist>(Observable &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>registerStrongObserver</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>ac8eb66519da1d1f30aaaa8a46b82def4</anchor>
      <arglist>(Observer const &amp;observer)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>registerObserver</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>af513d91b5b1ca025d34f428208512c45</anchor>
      <arglist>(ObserverWeak const &amp;observer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::list&lt; Observer &gt;</type>
      <name>getObservers</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>ae215a3f722f5894dd8fdc1cb9b190c0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>observerAdded</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>acef811808cd92423e56ca29abd5ef880</anchor>
      <arglist>(Observer const &amp;observer, Scroom::Bookkeeping::Token const &amp;token)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::weak_ptr&lt; TestObserver &gt;</type>
      <name>ObserverWeak</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a3aba7a30e5965d2862e5a07ce5482b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Detail::Registration&lt; TestObserver &gt;</type>
      <name>Registration</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aebd85f42cb1237848725431cf4363562</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unregisterObserver</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a799c4980f27a38fff285c25fe4690e37</anchor>
      <arglist>(ObserverWeak const &amp;observer)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Bookkeeping::Map&lt; ObserverWeak, typename Registration::Ptr &gt;::Ptr</type>
      <name>registrationMap</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aab2cdbbc592ce8b952fb179f606d84d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Detail::Registration&lt; T &gt;</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aefb9970412fa0c96e8bafc25f1a52dad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Observable&lt; TileInitialisationObserver &gt;</name>
    <filename>classScroom_1_1Utils_1_1Observable.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TileInitialisationObserver &gt;</type>
      <name>Observer</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>af3e1005371eb41f254a9e330e1c20a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Observable&lt; TileInitialisationObserver &gt; &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>af3ccb47d74ec555f42cc66a5356b808e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a0985c831266bda7104445a9f0babee03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a9a64dcee35b761f9096c802c9fc2139b</anchor>
      <arglist>(const Observable &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aaf6401fbf84e5e0fae0071f3ef083852</anchor>
      <arglist>(Observable &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a4f0d66bf65eaa61b77987c2b47e38ac1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Observable</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a4a1120fb34ca9873cb4f7236628e1dc6</anchor>
      <arglist>(const Observable &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Observable</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a18d957956960766feef1a4ab10ecda1a</anchor>
      <arglist>(Observable &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>registerStrongObserver</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>ac8eb66519da1d1f30aaaa8a46b82def4</anchor>
      <arglist>(Observer const &amp;observer)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>registerObserver</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>af513d91b5b1ca025d34f428208512c45</anchor>
      <arglist>(ObserverWeak const &amp;observer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::list&lt; Observer &gt;</type>
      <name>getObservers</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>ae215a3f722f5894dd8fdc1cb9b190c0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>observerAdded</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>acef811808cd92423e56ca29abd5ef880</anchor>
      <arglist>(Observer const &amp;observer, Scroom::Bookkeeping::Token const &amp;token)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::weak_ptr&lt; TileInitialisationObserver &gt;</type>
      <name>ObserverWeak</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a3aba7a30e5965d2862e5a07ce5482b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Detail::Registration&lt; TileInitialisationObserver &gt;</type>
      <name>Registration</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aebd85f42cb1237848725431cf4363562</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unregisterObserver</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a799c4980f27a38fff285c25fe4690e37</anchor>
      <arglist>(ObserverWeak const &amp;observer)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Bookkeeping::Map&lt; ObserverWeak, typename Registration::Ptr &gt;::Ptr</type>
      <name>registrationMap</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aab2cdbbc592ce8b952fb179f606d84d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Detail::Registration&lt; T &gt;</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aefb9970412fa0c96e8bafc25f1a52dad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Observable&lt; TileLoadingObserver &gt;</name>
    <filename>classScroom_1_1Utils_1_1Observable.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TileLoadingObserver &gt;</type>
      <name>Observer</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>af3e1005371eb41f254a9e330e1c20a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Observable&lt; TileLoadingObserver &gt; &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>af3ccb47d74ec555f42cc66a5356b808e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a0985c831266bda7104445a9f0babee03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a9a64dcee35b761f9096c802c9fc2139b</anchor>
      <arglist>(const Observable &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aaf6401fbf84e5e0fae0071f3ef083852</anchor>
      <arglist>(Observable &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a4f0d66bf65eaa61b77987c2b47e38ac1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Observable</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a4a1120fb34ca9873cb4f7236628e1dc6</anchor>
      <arglist>(const Observable &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Observable</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a18d957956960766feef1a4ab10ecda1a</anchor>
      <arglist>(Observable &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>registerStrongObserver</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>ac8eb66519da1d1f30aaaa8a46b82def4</anchor>
      <arglist>(Observer const &amp;observer)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>registerObserver</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>af513d91b5b1ca025d34f428208512c45</anchor>
      <arglist>(ObserverWeak const &amp;observer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::list&lt; Observer &gt;</type>
      <name>getObservers</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>ae215a3f722f5894dd8fdc1cb9b190c0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>observerAdded</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>acef811808cd92423e56ca29abd5ef880</anchor>
      <arglist>(Observer const &amp;observer, Scroom::Bookkeeping::Token const &amp;token)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::weak_ptr&lt; TileLoadingObserver &gt;</type>
      <name>ObserverWeak</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a3aba7a30e5965d2862e5a07ce5482b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Detail::Registration&lt; TileLoadingObserver &gt;</type>
      <name>Registration</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aebd85f42cb1237848725431cf4363562</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unregisterObserver</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>a799c4980f27a38fff285c25fe4690e37</anchor>
      <arglist>(ObserverWeak const &amp;observer)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Bookkeeping::Map&lt; ObserverWeak, typename Registration::Ptr &gt;::Ptr</type>
      <name>registrationMap</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aab2cdbbc592ce8b952fb179f606d84d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Detail::Registration&lt; T &gt;</name>
      <anchorfile>classScroom_1_1Utils_1_1Observable.html</anchorfile>
      <anchor>aefb9970412fa0c96e8bafc25f1a52dad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::on_scope_exit</name>
    <filename>classScroom_1_1Utils_1_1on__scope__exit.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>on_scope_exit</name>
      <anchorfile>classScroom_1_1Utils_1_1on__scope__exit.html</anchorfile>
      <anchor>ac75b878547646ddb12b25edf21631813</anchor>
      <arglist>(F f_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>on_scope_exit</name>
      <anchorfile>classScroom_1_1Utils_1_1on__scope__exit.html</anchorfile>
      <anchor>af560fbe1b9ff31f33151c122ad187394</anchor>
      <arglist>(const on_scope_exit &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>on_scope_exit</name>
      <anchorfile>classScroom_1_1Utils_1_1on__scope__exit.html</anchorfile>
      <anchor>aa67ba65cbaf10e510c101f2c04ac861d</anchor>
      <arglist>(on_scope_exit &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>on_scope_exit &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1on__scope__exit.html</anchorfile>
      <anchor>a964a675612038ab19b336f75b2744f31</anchor>
      <arglist>(const on_scope_exit &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>on_scope_exit &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1on__scope__exit.html</anchorfile>
      <anchor>a394e24ad50471a310fd0d5f8769462f2</anchor>
      <arglist>(on_scope_exit &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~on_scope_exit</name>
      <anchorfile>classScroom_1_1Utils_1_1on__scope__exit.html</anchorfile>
      <anchor>af6c3417f141eeaff9fdd7ae17ce64f65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>F</type>
      <name>f</name>
      <anchorfile>classScroom_1_1Utils_1_1on__scope__exit.html</anchorfile>
      <anchor>a8a55437f37f2013585251ae098167b05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenInterface</name>
    <filename>classOpenInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; OpenInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classOpenInterface.html</anchorfile>
      <anchor>aa855b651b0ec2766850aa2076c026eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; GtkFileFilter * &gt;</type>
      <name>getFilters</name>
      <anchorfile>classOpenInterface.html</anchorfile>
      <anchor>a11d97b3a6013fe9fab0e5f8d806ebe35</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>open</name>
      <anchorfile>classOpenInterface.html</anchorfile>
      <anchor>acc41b90a365026768de499f4a67fa680</anchor>
      <arglist>(const std::string &amp;fileName, ScroomInterface::Ptr const &amp;scroomInterface)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenPresentationInterface</name>
    <filename>classOpenPresentationInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; OpenPresentationInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classOpenPresentationInterface.html</anchorfile>
      <anchor>afec27529710258aaf7ff40e47d706069</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; GtkFileFilter * &gt;</type>
      <name>getFilters</name>
      <anchorfile>classOpenPresentationInterface.html</anchorfile>
      <anchor>a5ff9689dbf1828a0b4b9b5ce44ab5cc4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PresentationInterface::Ptr</type>
      <name>open</name>
      <anchorfile>classOpenPresentationInterface.html</anchorfile>
      <anchor>a872e39b66965a75b19e0a62f1f1268b1</anchor>
      <arglist>(const std::string &amp;fileName)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>anonymous_namespace{tiledbitmappresentation.cc}::OpenTiledBitmapAsPresentation</name>
    <filename>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1OpenTiledBitmapAsPresentation.html</filename>
    <base>OpenPresentationInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; OpenTiledBitmapAsPresentation &gt;</type>
      <name>Ptr</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1OpenTiledBitmapAsPresentation.html</anchorfile>
      <anchor>a43c61cae9c0f9cb6f11954e631acf2cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; GtkFileFilter * &gt;</type>
      <name>getFilters</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1OpenTiledBitmapAsPresentation.html</anchorfile>
      <anchor>a7cca2ad2faca646b3661cd88c1b62d5d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>PresentationInterface::Ptr</type>
      <name>open</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1OpenTiledBitmapAsPresentation.html</anchorfile>
      <anchor>a9330592b5fabc337ad248f8c73914a6b</anchor>
      <arglist>(const std::string &amp;fileName) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1OpenTiledBitmapAsPresentation.html</anchorfile>
      <anchor>ae96a9f48a94916bfcaa5d5fd33d42903</anchor>
      <arglist>(OpenTiledBitmapInterface::Ptr openTiledBitmapInterface_)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>OpenTiledBitmapAsPresentation</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1OpenTiledBitmapAsPresentation.html</anchorfile>
      <anchor>ad28ed7bbdbc7671672e6a0c3a71e566c</anchor>
      <arglist>(OpenTiledBitmapInterface::Ptr openTiledBitmapInterface_)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OpenTiledBitmapInterface::Ptr</type>
      <name>openTiledBitmapInterface</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1OpenTiledBitmapAsPresentation.html</anchorfile>
      <anchor>a7fd965cfdb8b2ab9cd659c925adf8429</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::TiledBitmap::OpenTiledBitmapInterface</name>
    <filename>classScroom_1_1TiledBitmap_1_1OpenTiledBitmapInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; OpenTiledBitmapInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1TiledBitmap_1_1OpenTiledBitmapInterface.html</anchorfile>
      <anchor>abe10db589b5b4b114f3f39be50679900</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::list&lt; GtkFileFilter * &gt;</type>
      <name>getFilters</name>
      <anchorfile>classScroom_1_1TiledBitmap_1_1OpenTiledBitmapInterface.html</anchorfile>
      <anchor>a7e677444b73e1d48ebb8084bcca2ffb5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::tuple&lt; BitmapMetaData, Layer::Ptr, ReloadFunction &gt;</type>
      <name>open</name>
      <anchorfile>classScroom_1_1TiledBitmap_1_1OpenTiledBitmapInterface.html</anchorfile>
      <anchor>aca1a9b1db87b0e2e4dd85354d11a0d5a</anchor>
      <arglist>(const std::string &amp;fileName)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Operations</name>
    <filename>classOperations.html</filename>
    <base>CommonOperations</base>
    <member kind="function">
      <type></type>
      <name>Operations</name>
      <anchorfile>classOperations.html</anchorfile>
      <anchor>a00588e0f6844ee39e3123548103cc70f</anchor>
      <arglist>(ColormapProvider::Ptr colormapProvider, int bpp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBpp</name>
      <anchorfile>classOperations.html</anchorfile>
      <anchor>a4462fade86a602b5b0cf30d26297529d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Stuff</type>
      <name>cache</name>
      <anchorfile>classOperations.html</anchorfile>
      <anchor>a5af5625d003303e5a1ffbe01d5467e1a</anchor>
      <arglist>(const ConstTile::Ptr &amp;tile) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classOperations.html</anchorfile>
      <anchor>a73dcd1eeb37bf3995740cdb456e786f2</anchor>
      <arglist>(Tile::Ptr target, ConstTile::Ptr source, int x, int y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classOperations.html</anchorfile>
      <anchor>ac19af1189a115005d637b95aea38267b</anchor>
      <arglist>(cairo_t *cr, const ConstTile::Ptr &amp;tile, Scroom::Utils::Rectangle&lt; double &gt; tileArea, Scroom::Utils::Rectangle&lt; double &gt; viewArea, int zoom, Scroom::Utils::Stuff cache) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classOperations.html</anchorfile>
      <anchor>a59ca763acb5f4fc36330ad8add4f55ff</anchor>
      <arglist>(ColormapProvider::Ptr colormapProvider, int bpp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ColormapProvider::Ptr</type>
      <name>colormapProvider</name>
      <anchorfile>classOperations.html</anchorfile>
      <anchor>a1ffd2f17ff874be97ba19210bd181ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned</type>
      <name>bpp</name>
      <anchorfile>classOperations.html</anchorfile>
      <anchor>a18069b958a4e6e23bb9f0784f4ee3f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned</type>
      <name>pixelsPerByte</name>
      <anchorfile>classOperations.html</anchorfile>
      <anchor>a5e1cd956bde8c261d575edfee004662f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned</type>
      <name>pixelOffset</name>
      <anchorfile>classOperations.html</anchorfile>
      <anchor>a4dfbdbd5254e8ee2ddcc984a3d46c3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned</type>
      <name>pixelMask</name>
      <anchorfile>classOperations.html</anchorfile>
      <anchor>a1a3f174d2ffb190f4faf08377b1d5178</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Operations1bpp</name>
    <filename>classOperations1bpp.html</filename>
    <base>CommonOperations</base>
    <member kind="function">
      <type></type>
      <name>Operations1bpp</name>
      <anchorfile>classOperations1bpp.html</anchorfile>
      <anchor>a753db29551de75e812dafb732415e008</anchor>
      <arglist>(ColormapProvider::Ptr colormapProvider)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBpp</name>
      <anchorfile>classOperations1bpp.html</anchorfile>
      <anchor>a9e4be143e521211ab7177d518ca93f5e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Stuff</type>
      <name>cache</name>
      <anchorfile>classOperations1bpp.html</anchorfile>
      <anchor>ae0382af873f87b3d6ef0fe118086ff8c</anchor>
      <arglist>(const ConstTile::Ptr &amp;tile) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classOperations1bpp.html</anchorfile>
      <anchor>a5ba5db3abe729f43c00ec4686bd0af42</anchor>
      <arglist>(Tile::Ptr target, ConstTile::Ptr source, int x, int y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classOperations1bpp.html</anchorfile>
      <anchor>a5eb9524566683ba1c7c4465270f79de5</anchor>
      <arglist>(cairo_t *cr, const ConstTile::Ptr &amp;tile, Scroom::Utils::Rectangle&lt; double &gt; tileArea, Scroom::Utils::Rectangle&lt; double &gt; viewArea, int zoom, Scroom::Utils::Stuff cache) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classOperations1bpp.html</anchorfile>
      <anchor>afaa1689d2298ae130a8584077380ef77</anchor>
      <arglist>(ColormapProvider::Ptr colormapProvider)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ColormapProvider::Ptr</type>
      <name>colormapProvider</name>
      <anchorfile>classOperations1bpp.html</anchorfile>
      <anchor>a2f6152ca1bc8c162cbe6651bca230e07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Operations1bppClipped</name>
    <filename>classOperations1bppClipped.html</filename>
    <base>CommonOperations</base>
    <member kind="function">
      <type></type>
      <name>Operations1bppClipped</name>
      <anchorfile>classOperations1bppClipped.html</anchorfile>
      <anchor>adcc45059dbc366aaa15b045f76f53384</anchor>
      <arglist>(ColormapProvider::Ptr colormapProvider)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBpp</name>
      <anchorfile>classOperations1bppClipped.html</anchorfile>
      <anchor>a8ccd4b7d9e37341e52f65be4fd9d345b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Stuff</type>
      <name>cacheZoom</name>
      <anchorfile>classOperations1bppClipped.html</anchorfile>
      <anchor>a8593f8ce06871d1700705ad300f2999f</anchor>
      <arglist>(const ConstTile::Ptr &amp;tile, int zoom, Scroom::Utils::Stuff &amp;cache) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classOperations1bppClipped.html</anchorfile>
      <anchor>aad87b20681c65154a094480eb7197302</anchor>
      <arglist>(Tile::Ptr target, ConstTile::Ptr source, int x, int y) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classOperations1bppClipped.html</anchorfile>
      <anchor>a54692714742361f507a6299a1502b533</anchor>
      <arglist>(ColormapProvider::Ptr colormapProvider)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ColormapProvider::Ptr</type>
      <name>colormapProvider</name>
      <anchorfile>classOperations1bppClipped.html</anchorfile>
      <anchor>a272902f3b9f2fb46ad34f91f535aeea9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Operations24bpp</name>
    <filename>classOperations24bpp.html</filename>
    <base>PipetteCommonOperationsRGB</base>
    <member kind="function">
      <type></type>
      <name>Operations24bpp</name>
      <anchorfile>classOperations24bpp.html</anchorfile>
      <anchor>a3a16af1f5fc66b2f35f8e7667ccb3a8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBpp</name>
      <anchorfile>classOperations24bpp.html</anchorfile>
      <anchor>a9cfec7016e2fef4b5423ded4949a93f0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Stuff</type>
      <name>cache</name>
      <anchorfile>classOperations24bpp.html</anchorfile>
      <anchor>aa56c1b3c07df175b80167d3f2df7c655</anchor>
      <arglist>(const ConstTile::Ptr &amp;tile) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classOperations24bpp.html</anchorfile>
      <anchor>a5d3e372510b5c3db3d71796d78012233</anchor>
      <arglist>(Tile::Ptr target, ConstTile::Ptr source, int x, int y) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classOperations24bpp.html</anchorfile>
      <anchor>a040d7cb9f01db55dd7ba668ff6fdf215</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Operations8bpp</name>
    <filename>classOperations8bpp.html</filename>
    <base>CommonOperations</base>
    <member kind="function">
      <type></type>
      <name>Operations8bpp</name>
      <anchorfile>classOperations8bpp.html</anchorfile>
      <anchor>a4c350b5ba00b6cd050974fc94573cf08</anchor>
      <arglist>(ColormapProvider::Ptr colormapProvider)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBpp</name>
      <anchorfile>classOperations8bpp.html</anchorfile>
      <anchor>a8776034d62533c8d8166e106f8cb79d6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Stuff</type>
      <name>cache</name>
      <anchorfile>classOperations8bpp.html</anchorfile>
      <anchor>a93fc14c28a67cc03900d517f5f510d19</anchor>
      <arglist>(const ConstTile::Ptr &amp;tile) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classOperations8bpp.html</anchorfile>
      <anchor>adea563af827d21311b22def80c9925b3</anchor>
      <arglist>(Tile::Ptr target, ConstTile::Ptr source, int x, int y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classOperations8bpp.html</anchorfile>
      <anchor>a28875a6199ba6136a09fdc58c12a7d1b</anchor>
      <arglist>(cairo_t *cr, const ConstTile::Ptr &amp;tile, Scroom::Utils::Rectangle&lt; double &gt; tileArea, Scroom::Utils::Rectangle&lt; double &gt; viewArea, int zoom, Scroom::Utils::Stuff cache) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classOperations8bpp.html</anchorfile>
      <anchor>af89b28e8f1a6fbe0cf8d0835d4db795a</anchor>
      <arglist>(ColormapProvider::Ptr colormapProvider)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ColormapProvider::Ptr</type>
      <name>colormapProvider</name>
      <anchorfile>classOperations8bpp.html</anchorfile>
      <anchor>a06a172102387709ede6598db6557fb78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OperationsCMYK16</name>
    <filename>classOperationsCMYK16.html</filename>
    <base>PipetteCommonOperationsCMYK</base>
    <member kind="function">
      <type></type>
      <name>OperationsCMYK16</name>
      <anchorfile>classOperationsCMYK16.html</anchorfile>
      <anchor>ab0facecd39b0ed9dfcebbca8a6da7811</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBpp</name>
      <anchorfile>classOperationsCMYK16.html</anchorfile>
      <anchor>ad3b247fb587bce93d52152b0e7b3fc84</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Stuff</type>
      <name>cache</name>
      <anchorfile>classOperationsCMYK16.html</anchorfile>
      <anchor>ae930b2b893fbc80d4a5c71d4f5581319</anchor>
      <arglist>(const ConstTile::Ptr &amp;tile) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classOperationsCMYK16.html</anchorfile>
      <anchor>a420801ec399c7b360821cf74f6549a76</anchor>
      <arglist>(Tile::Ptr target, ConstTile::Ptr source, int x, int y) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classOperationsCMYK16.html</anchorfile>
      <anchor>ae8ef4df2467f4d476e274069a7f3124a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OperationsCMYK32</name>
    <filename>classOperationsCMYK32.html</filename>
    <base>PipetteCommonOperationsCMYK</base>
    <member kind="function">
      <type></type>
      <name>OperationsCMYK32</name>
      <anchorfile>classOperationsCMYK32.html</anchorfile>
      <anchor>afdc3539bd4460a60ca9d2aaa3647b266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBpp</name>
      <anchorfile>classOperationsCMYK32.html</anchorfile>
      <anchor>ad279dff988d02c4b08f1b06f6a115ed9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Stuff</type>
      <name>cache</name>
      <anchorfile>classOperationsCMYK32.html</anchorfile>
      <anchor>add38fba581e07e34c685cd248f831485</anchor>
      <arglist>(const ConstTile::Ptr &amp;tile) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classOperationsCMYK32.html</anchorfile>
      <anchor>a728a1c33c1293ccd169e7dcd5cae1ff6</anchor>
      <arglist>(Tile::Ptr target, ConstTile::Ptr source, int x, int y) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classOperationsCMYK32.html</anchorfile>
      <anchor>af8f9ac296dabdbb18392d623e2be35d5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OperationsCMYK4</name>
    <filename>classOperationsCMYK4.html</filename>
    <base>PipetteCommonOperationsCMYK</base>
    <member kind="function">
      <type></type>
      <name>OperationsCMYK4</name>
      <anchorfile>classOperationsCMYK4.html</anchorfile>
      <anchor>ade8c4ed1a9a6fc48f8d148fea174a626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBpp</name>
      <anchorfile>classOperationsCMYK4.html</anchorfile>
      <anchor>a6d966f8782083e14e019b8de58a17f45</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Stuff</type>
      <name>cache</name>
      <anchorfile>classOperationsCMYK4.html</anchorfile>
      <anchor>acc2f2f023013b1a8015f1b9958649abb</anchor>
      <arglist>(const ConstTile::Ptr &amp;tile) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classOperationsCMYK4.html</anchorfile>
      <anchor>a1d89285690cb70240609fb94b5d457f4</anchor>
      <arglist>(Tile::Ptr target, ConstTile::Ptr source, int x, int y) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classOperationsCMYK4.html</anchorfile>
      <anchor>a5c42cfba9bd5a0b9211c903a606c1c3d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OperationsCMYK8</name>
    <filename>classOperationsCMYK8.html</filename>
    <base>PipetteCommonOperationsCMYK</base>
    <member kind="function">
      <type></type>
      <name>OperationsCMYK8</name>
      <anchorfile>classOperationsCMYK8.html</anchorfile>
      <anchor>af4820d4f04719b4a69345fcdd20c3ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBpp</name>
      <anchorfile>classOperationsCMYK8.html</anchorfile>
      <anchor>a13995c2ab4d3a716611daa51d803f35a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Stuff</type>
      <name>cache</name>
      <anchorfile>classOperationsCMYK8.html</anchorfile>
      <anchor>aadd39806ab59df1eb6b6356f9ea26dd1</anchor>
      <arglist>(const ConstTile::Ptr &amp;tile) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classOperationsCMYK8.html</anchorfile>
      <anchor>a11efd39b75c1a7cb4a0ef734ed61eb5a</anchor>
      <arglist>(Tile::Ptr target, ConstTile::Ptr source, int x, int y) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classOperationsCMYK8.html</anchorfile>
      <anchor>afddb0d2799e315acde82b39e8077dc4f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OperationsColormapped</name>
    <filename>classOperationsColormapped.html</filename>
    <base>Operations</base>
    <member kind="function">
      <type></type>
      <name>OperationsColormapped</name>
      <anchorfile>classOperationsColormapped.html</anchorfile>
      <anchor>ad28f529ff07160827c9f9b40d6a6a272</anchor>
      <arglist>(ColormapProvider::Ptr colormapProvider, int bpp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBpp</name>
      <anchorfile>classOperationsColormapped.html</anchorfile>
      <anchor>a0586580a22925a7f487ab22563c0f69c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Stuff</type>
      <name>cache</name>
      <anchorfile>classOperationsColormapped.html</anchorfile>
      <anchor>a2618c2fdccb2457de6866ad6507bd994</anchor>
      <arglist>(const ConstTile::Ptr &amp;tile) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classOperationsColormapped.html</anchorfile>
      <anchor>aea7260f788d6a42d86f5bda4ebe793ed</anchor>
      <arglist>(Tile::Ptr target, ConstTile::Ptr source, int x, int y) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classOperationsColormapped.html</anchorfile>
      <anchor>a0b0991af5a7714e81ac4ea1845dc3910</anchor>
      <arglist>(ColormapProvider::Ptr colormapProvider, int bpp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::optional_cleanup</name>
    <filename>classScroom_1_1Utils_1_1optional__cleanup.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>optional_cleanup</name>
      <anchorfile>classScroom_1_1Utils_1_1optional__cleanup.html</anchorfile>
      <anchor>ac3ed31ad4e469e24c331ae316b19cd70</anchor>
      <arglist>(F f_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_cleanup</name>
      <anchorfile>classScroom_1_1Utils_1_1optional__cleanup.html</anchorfile>
      <anchor>a981f96f0183cce9f34c95e2edc2afef9</anchor>
      <arglist>(const optional_cleanup &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>optional_cleanup</name>
      <anchorfile>classScroom_1_1Utils_1_1optional__cleanup.html</anchorfile>
      <anchor>ac0cf71366bff1c217daad0ccf26e5a7a</anchor>
      <arglist>(optional_cleanup &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>optional_cleanup &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1optional__cleanup.html</anchorfile>
      <anchor>a45b252e093ee9f0cda2efd5c94987a90</anchor>
      <arglist>(const optional_cleanup &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>optional_cleanup &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1optional__cleanup.html</anchorfile>
      <anchor>a389d6a577c4cca269a288b483a6ce549</anchor>
      <arglist>(optional_cleanup &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~optional_cleanup</name>
      <anchorfile>classScroom_1_1Utils_1_1optional__cleanup.html</anchorfile>
      <anchor>aa76d3f80e9d77391f66a49a797357d4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>classScroom_1_1Utils_1_1optional__cleanup.html</anchorfile>
      <anchor>ac3448bed3c1c6a91a321f258790ec6ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>cleanup</name>
      <anchorfile>classScroom_1_1Utils_1_1optional__cleanup.html</anchorfile>
      <anchor>a41bd4b2072ec8e6e1aab175445728352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>F</type>
      <name>f</name>
      <anchorfile>classScroom_1_1Utils_1_1optional__cleanup.html</anchorfile>
      <anchor>a3b59d13e589a2c0c6175c47ce32a82a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::MemoryBlocks::Page</name>
    <filename>classScroom_1_1MemoryBlocks_1_1Page.html</filename>
    <member kind="function">
      <type></type>
      <name>Page</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Page.html</anchorfile>
      <anchor>a19efc806c908bdfff5f88166aa103881</anchor>
      <arglist>(std::shared_ptr&lt; BlockInterface &gt; bi, size_t id)</arglist>
    </member>
    <member kind="function">
      <type>RawPageData::Ptr</type>
      <name>get</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Page.html</anchorfile>
      <anchor>a38455f2de5f3ef96d5089330db28847f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; BlockInterface &gt;</type>
      <name>bi</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Page.html</anchorfile>
      <anchor>a0bcb4f3885e803b421c7be3ae7235099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>id</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Page.html</anchorfile>
      <anchor>a52df8a5f5f00d12186baff2714f4acb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::MemoryBlobs::PageProvider</name>
    <filename>classScroom_1_1MemoryBlobs_1_1PageProvider.html</filename>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <class kind="class">Scroom::MemoryBlobs::PageProvider::MarkPageFree</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PageProvider &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider.html</anchorfile>
      <anchor>adcc52b82243849b774333b72aaf57528</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Page::Ptr</type>
      <name>getFreePage</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider.html</anchorfile>
      <anchor>a584ecafc325a189ded3be00b95f6ed0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getPageSize</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider.html</anchorfile>
      <anchor>a165710ceb377679e7e681efd32341526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider.html</anchorfile>
      <anchor>a1b4d5f7c0692f14a3a9062cc24034dd4</anchor>
      <arglist>(size_t blockCount, size_t blockSize)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>PageProvider</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider.html</anchorfile>
      <anchor>aaadea74fd603076780c869a3ce350370</anchor>
      <arglist>(size_t blockCount, size_t blockSize)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>markPageFree</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider.html</anchorfile>
      <anchor>a1bfc687e8c4b818a6c1ebd2f2dbeb27c</anchor>
      <arglist>(Scroom::MemoryBlocks::Page *page)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>blockCount</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider.html</anchorfile>
      <anchor>ab1363e6ae6618dd6ca0bfadd8fbb5648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>blockSize</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider.html</anchorfile>
      <anchor>a79ae98b3cf75b8717c890a6db16c3f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::MemoryBlocks::BlockFactoryInterface::Ptr</type>
      <name>blockFactoryInterface</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider.html</anchorfile>
      <anchor>a84a5b200bf3acb067e7560acbb6721d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::MemoryBlocks::PageList</type>
      <name>allPages</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider.html</anchorfile>
      <anchor>aa289e790e99b7129d997d9e88e865149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; Scroom::MemoryBlocks::Page * &gt;</type>
      <name>freePages</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider.html</anchorfile>
      <anchor>aca46cb9c8e2f791083a3c950cfd8e837</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider.html</anchorfile>
      <anchor>aefed44d5018fe4612476f4cba7a2ac6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MarkPageFree</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1PageProvider.html</anchorfile>
      <anchor>ab1000bd633c88866959e36760b5b0f0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Pipette</name>
    <filename>classPipette.html</filename>
    <base>PluginInformationInterface</base>
    <base>ViewObserver</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Pipette &gt;</type>
      <name>Ptr</name>
      <anchorfile>classPipette.html</anchorfile>
      <anchor>a0cfa52e2c954e0b02a50166bf9950f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginName</name>
      <anchorfile>classPipette.html</anchorfile>
      <anchor>a4d680cdd2ba8c71e5294400799c7248b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginVersion</name>
      <anchorfile>classPipette.html</anchorfile>
      <anchor>a4889b0d68ebe699eef590609c66c94ec</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCapabilities</name>
      <anchorfile>classPipette.html</anchorfile>
      <anchor>a917df908eb6f66cfee5e46ce9b786b07</anchor>
      <arglist>(ScroomPluginInterface::Ptr host) override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Bookkeeping::Token</type>
      <name>viewAdded</name>
      <anchorfile>classPipette.html</anchorfile>
      <anchor>a95fcccb9ce30c8a42011d2a445f4a29a</anchor>
      <arglist>(ViewInterface::Ptr v) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classPipette.html</anchorfile>
      <anchor>a575ca1a1f36e9cb7029461964b3c460b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Pipette</name>
      <anchorfile>classPipette.html</anchorfile>
      <anchor>ae5195e52e89159e96a620c2522003f13</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PipetteCommonOperationsCMYK</name>
    <filename>classPipetteCommonOperationsCMYK.html</filename>
    <base>PipetteLayerOperations</base>
    <base>CommonOperations</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PipetteCommonOperationsCMYK &gt;</type>
      <name>Ptr</name>
      <anchorfile>classPipetteCommonOperationsCMYK.html</anchorfile>
      <anchor>a6fceda38e8fb49e2ea9038c9c44380a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PipetteCommonOperationsCMYK</name>
      <anchorfile>classPipetteCommonOperationsCMYK.html</anchorfile>
      <anchor>a7cbc1f263cbfd217852f892716eb4f42</anchor>
      <arglist>(int bps_)</arglist>
    </member>
    <member kind="function">
      <type>PipetteLayerOperations::PipetteColor</type>
      <name>sumPixelValues</name>
      <anchorfile>classPipetteCommonOperationsCMYK.html</anchorfile>
      <anchor>a8d1f4d3f571c58e5933510a4ac3d6f83</anchor>
      <arglist>(Scroom::Utils::Rectangle&lt; int &gt; area, const ConstTile::Ptr &amp;tile) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bps</name>
      <anchorfile>classPipetteCommonOperationsCMYK.html</anchorfile>
      <anchor>a3fdc4e0f0a9f0a47e2e6522aa710f331</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PipetteCommonOperationsRGB</name>
    <filename>classPipetteCommonOperationsRGB.html</filename>
    <base>PipetteLayerOperations</base>
    <base>CommonOperations</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PipetteCommonOperationsRGB &gt;</type>
      <name>Ptr</name>
      <anchorfile>classPipetteCommonOperationsRGB.html</anchorfile>
      <anchor>a0ee099e5da84a82e061dc0b274a08d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PipetteCommonOperationsRGB</name>
      <anchorfile>classPipetteCommonOperationsRGB.html</anchorfile>
      <anchor>a3b72a9899c04fefe9ddf89bf5fdf842a</anchor>
      <arglist>(int bps_)</arglist>
    </member>
    <member kind="function">
      <type>PipetteLayerOperations::PipetteColor</type>
      <name>sumPixelValues</name>
      <anchorfile>classPipetteCommonOperationsRGB.html</anchorfile>
      <anchor>ac82368ae6a784e62a04fd51d6039f5b0</anchor>
      <arglist>(Scroom::Utils::Rectangle&lt; int &gt; area, const ConstTile::Ptr &amp;tile) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bps</name>
      <anchorfile>classPipetteCommonOperationsRGB.html</anchorfile>
      <anchor>a55e94b30e388c51824d5c0e6dfb12c27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PipetteHandler</name>
    <filename>classPipetteHandler.html</filename>
    <base>ToolStateListener</base>
    <base>PostRenderer</base>
    <base>SelectionListener</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PipetteHandler &gt;</type>
      <name>Ptr</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>a0c50ae44e602765e74ce057865f3db4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>a72c43cd2b5680c7de374b8d8c7ca47d2</anchor>
      <arglist>(ViewInterface::Ptr const &amp;vi, cairo_t *cr, Scroom::Utils::Rectangle&lt; double &gt; presentationArea, int zoom) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSelectionType</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>a0016d253047c595bb418a1808bed8f50</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onSelectionStart</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>a83127b359f0bc663eb3ed7ed4be286de</anchor>
      <arglist>(Selection p, ViewInterface::Ptr view) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onSelectionUpdate</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>a079047dae2cd3534bda3745e40c5d793</anchor>
      <arglist>(Selection s, ViewInterface::Ptr view) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onSelectionEnd</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>acd17e052163c801ed556c06d8bb29f59</anchor>
      <arglist>(Selection s, ViewInterface::Ptr view) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onEnable</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>a8fbf1d3f0feb4577461a1b5c27f64f09</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onDisable</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>acbb45a3128b6fc05e24cffb1889655b0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeValues</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>ac4ac7ffa0a4d50b2da677b623cd2f479</anchor>
      <arglist>(const ViewInterface::Ptr &amp;view, Scroom::Utils::Rectangle&lt; double &gt; sel_rect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>displayValues</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>a42c4ca305b76971d68cc5dc8301472ff</anchor>
      <arglist>(const ViewInterface::Ptr &amp;view, Scroom::Utils::Rectangle&lt; double &gt; rect, const PipetteLayerOperations::PipetteColor &amp;colors)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; Selection &gt;</type>
      <name>getSelection</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>adfdbf6d43fe0e61c6cd8ab5d4cfc197f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>a11062537f643a30532187314e629bd6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>ad47cebd908f64cc79b6e7834e22a3a58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::optional&lt; Selection &gt;</type>
      <name>selection</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>a8b98c2f7e4bfd37c719a8e66950a8caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>enabled</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>a2ce9973151e38a38fe910c230028c12d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::atomic_flag</type>
      <name>wasDisabled</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>aea8c9cbc3fb7450069b71411a092a91f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::mutex</type>
      <name>jobMutex</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>a35d850d0a6c9e5030c754c561f6208c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ThreadPool::Queue::Ptr</type>
      <name>currentJob</name>
      <anchorfile>classPipetteHandler.html</anchorfile>
      <anchor>a3a17e4d4570e25c39b84967a38085576</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PipetteLayerOperations</name>
    <filename>classPipetteLayerOperations.html</filename>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PipetteLayerOperations &gt;</type>
      <name>Ptr</name>
      <anchorfile>classPipetteLayerOperations.html</anchorfile>
      <anchor>ac7104a41229264a0427f09343390e465</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; std::string, double &gt; &gt;</type>
      <name>PipetteColor</name>
      <anchorfile>classPipetteLayerOperations.html</anchorfile>
      <anchor>ac2e1230385d4439b30668e66df245485</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PipetteColor</type>
      <name>sumPixelValues</name>
      <anchorfile>classPipetteLayerOperations.html</anchorfile>
      <anchor>aee26db1f5b34dd33f33fe0533aee2502</anchor>
      <arglist>(Scroom::Utils::Rectangle&lt; int &gt; area, const std::shared_ptr&lt; ConstTile &gt; &amp;tile)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PipetteViewInterface</name>
    <filename>classPipetteViewInterface.html</filename>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PipetteViewInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classPipetteViewInterface.html</anchorfile>
      <anchor>a3c16a32beb8d86af534df376e7eed620</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PipetteLayerOperations::PipetteColor</type>
      <name>getPixelAverages</name>
      <anchorfile>classPipetteViewInterface.html</anchorfile>
      <anchor>a9576c32986111d0352816cf4ea08bf5f</anchor>
      <arglist>(Scroom::Utils::Rectangle&lt; double &gt; area)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PluginInformation</name>
    <filename>structPluginInformation.html</filename>
    <member kind="function">
      <type></type>
      <name>PluginInformation</name>
      <anchorfile>structPluginInformation.html</anchorfile>
      <anchor>a6c1a588783640e3a6e845486e675182e</anchor>
      <arglist>(GModule *plugin_, PluginInformationInterface::Ptr pluginInformation_)</arglist>
    </member>
    <member kind="variable">
      <type>GModule *</type>
      <name>plugin</name>
      <anchorfile>structPluginInformation.html</anchorfile>
      <anchor>a568ac6d1dc9bc3c9404040319c7832ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PluginInformationInterface::Ptr</type>
      <name>pluginInformation</name>
      <anchorfile>structPluginInformation.html</anchorfile>
      <anchor>aa4bf302f000e3ec4d2ec13b9085c47e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluginInformationInterface</name>
    <filename>classPluginInformationInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PluginInformationInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classPluginInformationInterface.html</anchorfile>
      <anchor>a1a526f1bccb65c6919c634c0924dd8f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluginInformationInterface</name>
      <anchorfile>classPluginInformationInterface.html</anchorfile>
      <anchor>a828dd45df53bb5a7a5be4214bc5d4812</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getPluginName</name>
      <anchorfile>classPluginInformationInterface.html</anchorfile>
      <anchor>a1ab5cb80b6411a8ed84e81bac21c89a8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getPluginVersion</name>
      <anchorfile>classPluginInformationInterface.html</anchorfile>
      <anchor>a7abb4ce14ed37b3363a9748b6780d7c9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerCapabilities</name>
      <anchorfile>classPluginInformationInterface.html</anchorfile>
      <anchor>a18663b4d0919580d5502bb4a682a9eae</anchor>
      <arglist>(ScroomPluginInterface::Ptr host)=0</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>pluginApiVersion</name>
      <anchorfile>classPluginInformationInterface.html</anchorfile>
      <anchor>ad03455957b757e3ce85e1ceae4bd5270</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluginManager</name>
    <filename>classPluginManager.html</filename>
    <base>WorkInterface</base>
    <base>ScroomPluginInterface</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PluginManager &gt;</type>
      <name>Ptr</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a3a770de73160b6662c9acd2528921bb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doWork</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a9c6140acf2872b4fa9e495276d8b2cb5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addHook</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a096467c81f951782e079674caabe5e64</anchor>
      <arglist>(bool devMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerNewPresentationInterface</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a554d3e6ccd260dc621cf12197918cfd8</anchor>
      <arglist>(const std::string &amp;identifier, NewPresentationInterface::Ptr newPresentationInterface) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerNewAggregateInterface</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>af32ab5718f0ac539cf597ecb3de21b4c</anchor>
      <arglist>(const std::string &amp;identifier, NewAggregateInterface::Ptr newAggregateInterface) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerOpenPresentationInterface</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>aefafd32717c2c4fc20cfb96c0e72e4a5</anchor>
      <arglist>(const std::string &amp;extension, OpenPresentationInterface::Ptr openPresentationInterface) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerOpenTiledBitmapInterface</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a2ab2ec623858af363b6563e53d88f015</anchor>
      <arglist>(const std::string &amp;identifier, std::shared_ptr&lt; Scroom::TiledBitmap::OpenTiledBitmapInterface &gt; openTiledBitmapInterface) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerOpenInterface</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a7d144c1ae243e5bc15cab34153d7a74d</anchor>
      <arglist>(const std::string &amp;extension, OpenInterface::Ptr openInterface) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerViewObserver</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a08141144c8b5b63151e1d0b21a9ad75c</anchor>
      <arglist>(const std::string &amp;identifier, ViewObserver::Ptr observer) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPresentationObserver</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a7ee86475f71296198047616bae6accc8</anchor>
      <arglist>(const std::string &amp;identifier, PresentationObserver::Ptr observer) override</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; NewPresentationInterface::Ptr, std::string &gt; &amp;</type>
      <name>getNewPresentationInterfaces</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>aa3972425235fe0db723e7395d0f86f10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, NewAggregateInterface::Ptr &gt; &amp;</type>
      <name>getNewAggregateInterfaces</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a7a46729c367506d6201c6d884c9e800d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; OpenPresentationInterface::Ptr, std::string &gt; &amp;</type>
      <name>getOpenPresentationInterfaces</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a59802793100493df7b2ae292a958472e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; Scroom::TiledBitmap::OpenTiledBitmapInterface::Ptr, std::string &gt; &amp;</type>
      <name>getOpenTiledBitmapInterfaces</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a83046790cb2ca80fe59b231c3d18c683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; OpenInterface::Ptr, std::string &gt; &amp;</type>
      <name>getOpenInterfaces</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a9d5db8f6473be2d9d05a97942a3d57e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; ViewObserver::Ptr, std::string &gt; &amp;</type>
      <name>getViewObservers</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a1b02efb22572cf849d9051c01091b308</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; PresentationObserver::Ptr, std::string &gt; &amp;</type>
      <name>getPresentationObservers</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a43a425bcd06b13804f8c51f718819f4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a42259127148f59da7062e406e6aa6bd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluginManager::Ptr</type>
      <name>getInstance</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a724cc4d4d92c9273606c91909b508ebd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration" protection="private">
      <type></type>
      <name>PluginManagerState</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>abd85725b4ba73b52f19bd7f1b99ffc92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FINDING_DIRECTORIES</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>abd85725b4ba73b52f19bd7f1b99ffc92a470bf73cff79da2cb15f1d8d0a499699</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SCANNING_DIRECTORIES</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>abd85725b4ba73b52f19bd7f1b99ffc92a7c315ecbc2715aae97aa8dfe992a4482</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>LOADING_FILES</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>abd85725b4ba73b52f19bd7f1b99ffc92afdb83fdc2e9c459eef00366fafee44f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>DONE</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>abd85725b4ba73b52f19bd7f1b99ffc92abc74eeada87fa2ed42d01e33f8fe06d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>FINDING_DIRECTORIES</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>abd85725b4ba73b52f19bd7f1b99ffc92a470bf73cff79da2cb15f1d8d0a499699</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SCANNING_DIRECTORIES</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>abd85725b4ba73b52f19bd7f1b99ffc92a7c315ecbc2715aae97aa8dfe992a4482</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>LOADING_FILES</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>abd85725b4ba73b52f19bd7f1b99ffc92afdb83fdc2e9c459eef00366fafee44f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>DONE</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>abd85725b4ba73b52f19bd7f1b99ffc92abc74eeada87fa2ed42d01e33f8fe06d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setStatusBarMessage</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>ab656e5a2e62b9935d7f56ce3245d140d</anchor>
      <arglist>(const char *message)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>PluginManager</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a5a54013db8f56f15e342e177f8efe8d3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>devMode</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a3087e1afe6a7075bc0a3a14da3acf602</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PluginManagerState</type>
      <name>state</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a2763ae9dcbfc777da6f78ea5561b37af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; std::string &gt;</type>
      <name>dirs</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a15f829b11a018ca1baff4f688365750e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; std::string &gt;::iterator</type>
      <name>currentDir</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a3b2e6ce9b04fd017139d55c6e9d14316</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; std::string &gt;</type>
      <name>files</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>ade61fdd8a3e26fa79caec56e84d139a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; std::string &gt;::iterator</type>
      <name>currentFile</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a9e1c4f54af5e9442556a07833c0bbb14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; PluginInformation &gt;</type>
      <name>pluginInformationList</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>acabf9384e7e55bc1a60c5ec48c75b18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; NewPresentationInterface::Ptr, std::string &gt;</type>
      <name>newPresentationInterfaces</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a224c510adcb84b33159057136434bb01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, NewAggregateInterface::Ptr &gt;</type>
      <name>newAggregateInterfaces</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a8d8901a66366343aaebf664cbacc0082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; OpenPresentationInterface::Ptr, std::string &gt;</type>
      <name>openPresentationInterfaces</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a75128e3a71a506eecd513589d7c64f39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; Scroom::TiledBitmap::OpenTiledBitmapInterface::Ptr, std::string &gt;</type>
      <name>openTiledBitmapInterfaces</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>ae5e6bfdf18115de846d0727865825cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; OpenInterface::Ptr, std::string &gt;</type>
      <name>openInterfaces</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>af66c76d2960a85eef1a317ffbab3e362</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; ViewObserver::Ptr, std::string &gt;</type>
      <name>viewObservers</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a443a0a386e81233a7501b08d438a3ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; PresentationObserver::Ptr, std::string &gt;</type>
      <name>presentationObservers</name>
      <anchorfile>classPluginManager.html</anchorfile>
      <anchor>a6a8012fbd78a70a4bd13a4511c8e5251</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::Point</name>
    <filename>classScroom_1_1Utils_1_1Point.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>abc746dfcb215ff78d5f6574cc9517da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>ab7ec1167a14f0508e5565116978285d3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>af13b433f220ac3a094464460f31a54ec</anchor>
      <arglist>(value_type xy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a3895bd735a06d13718a39b3d96fcc0d8</anchor>
      <arglist>(value_type x_, value_type y_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a2875e9cb8b19a3cf92ec9d76b21c6471</anchor>
      <arglist>(Point&lt; U &gt; other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a47ccfe39feb58999b13d8c5cadfe984b</anchor>
      <arglist>(const GdkPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>ae7e39f5567d2664b506e6ea0d13e8294</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>aef60f080f6aad1266fd2efad4164df4e</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>ac6cf589a1b25ad62c17ac9c753124f1f</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a4bc729d40c511a32e22b59798a0f345e</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a9d0aa86651f6e1fb271b51c9c7d8eb6c</anchor>
      <arglist>(value_type other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>ac929d3720492316e30463c0ac78e2d9a</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a27062e32175ad5332d2679426b5959bb</anchor>
      <arglist>(value_type other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>aa0ce056c545c0f7a486c10d9ff1458bf</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt;</type>
      <name>operator-</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a9c9606bfe3197996dc78ef36548e98e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>magnitude</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>adff07f0c17215b6804a9415fd7118df4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; U &gt;</type>
      <name>to</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a725de6d557d3a949ed737080514c9526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GdkPoint</type>
      <name>toGdkPoint</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a699d121fe6cd8fff7af5cf71835daaca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>x</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>aef05138a3536382db393d698c80a48ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>y</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a8f69c38e2593833b1901ef73e935d820</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Point&lt; double &gt;</name>
    <filename>classScroom_1_1Utils_1_1Point.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>abc746dfcb215ff78d5f6574cc9517da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>ab7ec1167a14f0508e5565116978285d3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>af13b433f220ac3a094464460f31a54ec</anchor>
      <arglist>(value_type xy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a3895bd735a06d13718a39b3d96fcc0d8</anchor>
      <arglist>(value_type x_, value_type y_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a2875e9cb8b19a3cf92ec9d76b21c6471</anchor>
      <arglist>(Point&lt; U &gt; other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a47ccfe39feb58999b13d8c5cadfe984b</anchor>
      <arglist>(const GdkPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>ae7e39f5567d2664b506e6ea0d13e8294</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>aef60f080f6aad1266fd2efad4164df4e</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>ac6cf589a1b25ad62c17ac9c753124f1f</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a4bc729d40c511a32e22b59798a0f345e</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a9d0aa86651f6e1fb271b51c9c7d8eb6c</anchor>
      <arglist>(value_type other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>ac929d3720492316e30463c0ac78e2d9a</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a27062e32175ad5332d2679426b5959bb</anchor>
      <arglist>(value_type other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>aa0ce056c545c0f7a486c10d9ff1458bf</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt;</type>
      <name>operator-</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a9c9606bfe3197996dc78ef36548e98e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>magnitude</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>adff07f0c17215b6804a9415fd7118df4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; U &gt;</type>
      <name>to</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a725de6d557d3a949ed737080514c9526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GdkPoint</type>
      <name>toGdkPoint</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a699d121fe6cd8fff7af5cf71835daaca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>x</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>aef05138a3536382db393d698c80a48ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>y</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a8f69c38e2593833b1901ef73e935d820</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Point&lt; int &gt;</name>
    <filename>classScroom_1_1Utils_1_1Point.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>value_type</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>abc746dfcb215ff78d5f6574cc9517da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>ab7ec1167a14f0508e5565116978285d3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>af13b433f220ac3a094464460f31a54ec</anchor>
      <arglist>(value_type xy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a3895bd735a06d13718a39b3d96fcc0d8</anchor>
      <arglist>(value_type x_, value_type y_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a2875e9cb8b19a3cf92ec9d76b21c6471</anchor>
      <arglist>(Point&lt; U &gt; other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a47ccfe39feb58999b13d8c5cadfe984b</anchor>
      <arglist>(const GdkPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>ae7e39f5567d2664b506e6ea0d13e8294</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>aef60f080f6aad1266fd2efad4164df4e</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>ac6cf589a1b25ad62c17ac9c753124f1f</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a4bc729d40c511a32e22b59798a0f345e</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a9d0aa86651f6e1fb271b51c9c7d8eb6c</anchor>
      <arglist>(value_type other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>ac929d3720492316e30463c0ac78e2d9a</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a27062e32175ad5332d2679426b5959bb</anchor>
      <arglist>(value_type other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>aa0ce056c545c0f7a486c10d9ff1458bf</anchor>
      <arglist>(const Point&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; value_type &gt;</type>
      <name>operator-</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a9c9606bfe3197996dc78ef36548e98e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>magnitude</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>adff07f0c17215b6804a9415fd7118df4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; U &gt;</type>
      <name>to</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a725de6d557d3a949ed737080514c9526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GdkPoint</type>
      <name>toGdkPoint</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a699d121fe6cd8fff7af5cf71835daaca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>x</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>aef05138a3536382db393d698c80a48ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>y</name>
      <anchorfile>classScroom_1_1Utils_1_1Point.html</anchorfile>
      <anchor>a8f69c38e2593833b1901ef73e935d820</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PostRenderer</name>
    <filename>classPostRenderer.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PostRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classPostRenderer.html</anchorfile>
      <anchor>ade50df379d110fe12320a49405d89723</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classPostRenderer.html</anchorfile>
      <anchor>a3915bf497e6d8438c86cb9fedeb65e5e</anchor>
      <arglist>(std::shared_ptr&lt; ViewInterface &gt; const &amp;vi, cairo_t *cr, Scroom::Utils::Rectangle&lt; double &gt; presentationArea, int zoom)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PresentationBase</name>
    <filename>classPresentationBase.html</filename>
    <base>PresentationInterface</base>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classPresentationBase.html</anchorfile>
      <anchor>ae964144f0e8da9e7d7067f3d8183a8e4</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classPresentationBase.html</anchorfile>
      <anchor>a81cfe78e3adf5a1fecc307e2284578fc</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>observerAdded</name>
      <anchorfile>classPresentationBase.html</anchorfile>
      <anchor>ae9ba8f45a97f1a153503e98d91bff99a</anchor>
      <arglist>(Viewable::Ptr const &amp;viewable, Scroom::Bookkeeping::Token const &amp;t) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>viewAdded</name>
      <anchorfile>classPresentationBase.html</anchorfile>
      <anchor>a6fb7ff38c91cb2d7f282af6c2411854d</anchor>
      <arglist>(ViewInterface::WeakPtr vi)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>viewRemoved</name>
      <anchorfile>classPresentationBase.html</anchorfile>
      <anchor>a5d262f7a57550c1fc87b53fede0783c2</anchor>
      <arglist>(ViewInterface::WeakPtr vi)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Scroom::Utils::WeakKeySet&lt; ViewInterface::WeakPtr &gt;</type>
      <name>getViews</name>
      <anchorfile>classPresentationBase.html</anchorfile>
      <anchor>ae86a0264caf526cc2f8ae1dc370d4b6b</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PresentationBaseSimple</name>
    <filename>classPresentationBaseSimple.html</filename>
    <base>PresentationBase</base>
    <member kind="function" protection="private">
      <type>void</type>
      <name>viewAdded</name>
      <anchorfile>classPresentationBaseSimple.html</anchorfile>
      <anchor>acc7596cc19ef003de8cbc2621a3c8933</anchor>
      <arglist>(ViewInterface::WeakPtr vi) final</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>viewRemoved</name>
      <anchorfile>classPresentationBaseSimple.html</anchorfile>
      <anchor>afb96f4b10b0382c581d3aaff70e5e8c4</anchor>
      <arglist>(ViewInterface::WeakPtr vi) final</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Scroom::Utils::WeakKeySet&lt; ViewInterface::WeakPtr &gt;</type>
      <name>getViews</name>
      <anchorfile>classPresentationBaseSimple.html</anchorfile>
      <anchor>a0cf1e3a382291071ee7e46ed2b92424e</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::WeakKeySet&lt; ViewInterface::WeakPtr &gt;</type>
      <name>views</name>
      <anchorfile>classPresentationBaseSimple.html</anchorfile>
      <anchor>a606850aed5ddd17fb71fd745cd844a02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SizeDeterminer::PresentationData</name>
    <filename>classSizeDeterminer_1_1PresentationData.html</filename>
    <member kind="function">
      <type></type>
      <name>PresentationData</name>
      <anchorfile>classSizeDeterminer_1_1PresentationData.html</anchorfile>
      <anchor>a2fb410405a6b4a50ca23f406c1ddfd59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PresentationData</name>
      <anchorfile>classSizeDeterminer_1_1PresentationData.html</anchorfile>
      <anchor>aae206b1f145072118ae2a8ff45a16fec</anchor>
      <arglist>(ResizablePresentationInterface::Ptr resizablePresentationInterface)</arglist>
    </member>
    <member kind="variable">
      <type>const ResizablePresentationInterface::Ptr</type>
      <name>resizablePresentationInterface</name>
      <anchorfile>classSizeDeterminer_1_1PresentationData.html</anchorfile>
      <anchor>aa68a783a7f88dbf9c6f6705f9c61f85a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scroom::Utils::WeakKeySet&lt; ViewInterface::WeakPtr &gt;</type>
      <name>views</name>
      <anchorfile>classSizeDeterminer_1_1PresentationData.html</anchorfile>
      <anchor>a79426d22ad20ff0a001cd57335fb6ac3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PresentationInterface</name>
    <filename>classPresentationInterface.html</filename>
    <base>Viewable</base>
    <base>Scroom::Utils::Observable</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PresentationInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classPresentationInterface.html</anchorfile>
      <anchor>a86fed59a32467f97507308d9b67bfa5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; PresentationInterface &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classPresentationInterface.html</anchorfile>
      <anchor>a99c96cabbea0617d151dac65561685d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>getRect</name>
      <anchorfile>classPresentationInterface.html</anchorfile>
      <anchor>a4ff8352b5804eb4518099016face846b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>redraw</name>
      <anchorfile>classPresentationInterface.html</anchorfile>
      <anchor>a60bc0b48811cb281c9e8da99805b6b66</anchor>
      <arglist>(ViewInterface::Ptr const &amp;vi, cairo_t *cr, Scroom::Utils::Rectangle&lt; double &gt; presentationArea, int zoom)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getProperty</name>
      <anchorfile>classPresentationInterface.html</anchorfile>
      <anchor>ae454b7a8f8886fe4001700b2fbb83b19</anchor>
      <arglist>(const std::string &amp;name, std::string &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isPropertyDefined</name>
      <anchorfile>classPresentationInterface.html</anchorfile>
      <anchor>afe9df45f557e0c770b93904152ab38f3</anchor>
      <arglist>(const std::string &amp;name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getTitle</name>
      <anchorfile>classPresentationInterface.html</anchorfile>
      <anchor>a91974d576458480d37d40c1dbc006d82</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Scroom::Utils::Point&lt; double &gt;</type>
      <name>getAspectRatio</name>
      <anchorfile>classPresentationInterface.html</anchorfile>
      <anchor>a29ca008cd80d5a7ea8683dafe8ba4114</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>anonymous_namespace{determine-size-test.cc}::PresentationInterfaceStub</name>
    <filename>classanonymous__namespace_02determine-size-test_8cc_03_1_1PresentationInterfaceStub.html</filename>
    <base>PresentationInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PresentationInterfaceStub &gt;</type>
      <name>Ptr</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1PresentationInterfaceStub.html</anchorfile>
      <anchor>aaf5b95fb759a671489a58b7658ae0760</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>getRect</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1PresentationInterfaceStub.html</anchorfile>
      <anchor>a938caa365061d89464e6669695e11a19</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redraw</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1PresentationInterfaceStub.html</anchorfile>
      <anchor>acfa7a753616d43f1d68cfd757dea85f3</anchor>
      <arglist>(ViewInterface::Ptr const &amp;, cairo_t *, Scroom::Utils::Rectangle&lt; double &gt;, int) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getProperty</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1PresentationInterfaceStub.html</anchorfile>
      <anchor>a9ad61ecc5596c313af7b9016895f7a1d</anchor>
      <arglist>(const std::string &amp;, std::string &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPropertyDefined</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1PresentationInterfaceStub.html</anchorfile>
      <anchor>ac308b39bd4e5aa0a65218273c8fadaa7</anchor>
      <arglist>(const std::string &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTitle</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1PresentationInterfaceStub.html</anchorfile>
      <anchor>aff310924a0d1cc5bd9f01bde9cce9bb8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1PresentationInterfaceStub.html</anchorfile>
      <anchor>ae4b55000387144da660447b62e4ed951</anchor>
      <arglist>(ViewInterface::WeakPtr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1PresentationInterfaceStub.html</anchorfile>
      <anchor>a2ec968155ae17b3fed110ce529f83872</anchor>
      <arglist>(ViewInterface::WeakPtr) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1PresentationInterfaceStub.html</anchorfile>
      <anchor>a62564c3de576dab5b6804488e372b028</anchor>
      <arglist>(Scroom::Utils::Rectangle&lt; double &gt; const &amp;rect)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PresentationInterfaceStub</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1PresentationInterfaceStub.html</anchorfile>
      <anchor>ae568e12f6f8160b2c82bff1ce3f57281</anchor>
      <arglist>(Scroom::Utils::Rectangle&lt; double &gt; const &amp;rect_)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>rect</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1PresentationInterfaceStub.html</anchorfile>
      <anchor>a07d0e676dbf84be7a9385d8014ece4b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PresentationMock</name>
    <filename>classPresentationMock.html</filename>
    <base>PresentationInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PresentationMock &gt;</type>
      <name>Ptr</name>
      <anchorfile>classPresentationMock.html</anchorfile>
      <anchor>abd1ae5f81c417ecc3e1ac555f5ea7730</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOCK_METHOD1</name>
      <anchorfile>classPresentationMock.html</anchorfile>
      <anchor>a55041e671a3c79b4d3f7a49ddfef19dc</anchor>
      <arglist>(open, void(ViewInterface::WeakPtr))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOCK_METHOD1</name>
      <anchorfile>classPresentationMock.html</anchorfile>
      <anchor>a4b8591caafc32620f58f7088854a46e9</anchor>
      <arglist>(close, void(ViewInterface::WeakPtr))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOCK_METHOD0</name>
      <anchorfile>classPresentationMock.html</anchorfile>
      <anchor>a8fbededd840a0bbc96b9e7619d25aa73</anchor>
      <arglist>(getRect, Scroom::Utils::Rectangle&lt; double &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOCK_METHOD4</name>
      <anchorfile>classPresentationMock.html</anchorfile>
      <anchor>ae38798936872f184b323e655ef3e2e33</anchor>
      <arglist>(redraw, void(ViewInterface::Ptr const &amp;, cairo_t *, Scroom::Utils::Rectangle&lt; double &gt;, int))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOCK_METHOD2</name>
      <anchorfile>classPresentationMock.html</anchorfile>
      <anchor>a106a625e9c3c8f2fc2981c2b9f7645bd</anchor>
      <arglist>(getProperty, bool(const std::string &amp;, std::string &amp;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOCK_METHOD1</name>
      <anchorfile>classPresentationMock.html</anchorfile>
      <anchor>a43a80dfde397a1197f0baa6d04d1190b</anchor>
      <arglist>(isPropertyDefined, bool(const std::string &amp;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MOCK_METHOD0</name>
      <anchorfile>classPresentationMock.html</anchorfile>
      <anchor>a8c7a23ff5fb6b9f3e9cfdeb47270844f</anchor>
      <arglist>(getTitle, std::string())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classPresentationMock.html</anchorfile>
      <anchor>a6dc71447b992d1c06a045ae2e9515d46</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PresentationObserver</name>
    <filename>classPresentationObserver.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PresentationObserver &gt;</type>
      <name>Ptr</name>
      <anchorfile>classPresentationObserver.html</anchorfile>
      <anchor>a9d0a215afe58446e6400204e83acbb89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>presentationAdded</name>
      <anchorfile>classPresentationObserver.html</anchorfile>
      <anchor>a2c8ab2b2ac2d09cb32f5dbc8e336b49b</anchor>
      <arglist>(PresentationInterface::Ptr p)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>presentationDeleted</name>
      <anchorfile>classPresentationObserver.html</anchorfile>
      <anchor>a271bf1d898ed04da85ea0022ec341b2b</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadPool::PrivateData</name>
    <filename>classThreadPool_1_1PrivateData.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PrivateData &gt;</type>
      <name>Ptr</name>
      <anchorfile>classThreadPool_1_1PrivateData.html</anchorfile>
      <anchor>a7dff617a17772376bbaaf77319d51af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classThreadPool_1_1PrivateData.html</anchorfile>
      <anchor>a143d1a1ad9f30812e5bd8ca4fa10ed6b</anchor>
      <arglist>(bool completeAllJobsBeforeDestruction)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>jobcount</name>
      <anchorfile>classThreadPool_1_1PrivateData.html</anchorfile>
      <anchor>afdaddae62259f51ff00c2ebd83534644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classThreadPool_1_1PrivateData.html</anchorfile>
      <anchor>abf7feba8d6958a00098773baf0329143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alive</name>
      <anchorfile>classThreadPool_1_1PrivateData.html</anchorfile>
      <anchor>a9710d6d924eb7597b8e18dcd3edb0d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::condition_variable</type>
      <name>cond</name>
      <anchorfile>classThreadPool_1_1PrivateData.html</anchorfile>
      <anchor>a4b4ebb6865a7ea1da71d48a2c4e78743</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; int, std::queue&lt; Job &gt; &gt;</type>
      <name>jobs</name>
      <anchorfile>classThreadPool_1_1PrivateData.html</anchorfile>
      <anchor>a7621072df71077e9d8dd3f2417bd7526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>completeAllJobsBeforeDestruction</name>
      <anchorfile>classThreadPool_1_1PrivateData.html</anchorfile>
      <anchor>ad582c5ec33d97e087f5a0fd1f9b7b26b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Queue::Ptr</type>
      <name>defaultQueue</name>
      <anchorfile>classThreadPool_1_1PrivateData.html</anchorfile>
      <anchor>a68e087d3440145b266445230d0d3246a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>PrivateData</name>
      <anchorfile>classThreadPool_1_1PrivateData.html</anchorfile>
      <anchor>a4b6dd0e750c2115b87ec80585ad5620e</anchor>
      <arglist>(bool completeAllJobsBeforeDestruction)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProgressBarManager</name>
    <filename>classProgressBarManager.html</filename>
    <base>ProgressInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ProgressBarManager &gt;</type>
      <name>Ptr</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>aa7bc57cd571c2def0c942469e97afac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProgressBarManager</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>a322fe1dd1c888ea54ca8624a9dc8eebd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProgressBarManager</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>a5260ed3ce8fc472ec01aacc2a91de868</anchor>
      <arglist>(const ProgressBarManager &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProgressBarManager</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>aa65b8a41c27e522c591eb23e7cfbee07</anchor>
      <arglist>(ProgressBarManager &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ProgressBarManager</type>
      <name>operator=</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>af223344f8db79fdd7d1f9e1bc9216114</anchor>
      <arglist>(const ProgressBarManager &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ProgressBarManager</type>
      <name>operator=</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>a6ad7bf9ab3543a36e19847a76709e72a</anchor>
      <arglist>(ProgressBarManager &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProgressBar</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>a66baf2da99859dd40170d16aacc3bd45</anchor>
      <arglist>(GtkProgressBar *progressBar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdle</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>adb5d737d44f0857ff90e01d0d50e5ca3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaiting</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>ac1120c5ead54be8e91323aac4ba7030b</anchor>
      <arglist>(double progress=0.0) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorking</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>a3551f251d08142bfab6d6ec5dec375b4</anchor>
      <arglist>(double progress) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinished</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>af3649287310dc857bcced3ed6884e94e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>aa5d7f1aa8a62957e244a007e07b83ed3</anchor>
      <arglist>(GtkProgressBar *progressBar=nullptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ProgressBarManager</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>a62ef3bb495090cd50b31d9ca8484a730</anchor>
      <arglist>(GtkProgressBar *progressBar)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>stopWaiting</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>a6ea99e5fd8b5d5a277cea203795a76b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>startWaiting</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>ad63456851b6577a5f0f7c9fd5c029004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkProgressBar *</type>
      <name>progressBar</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>af8e9edea18804010f56e323040947a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isWaiting</name>
      <anchorfile>classProgressBarManager.html</anchorfile>
      <anchor>aa8776fd68aaef3e42e9d306d85f4246b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>anonymous_namespace{progressbarmanager.cc}::ProgressBarPulser</name>
    <filename>classanonymous__namespace_02progressbarmanager_8cc_03_1_1ProgressBarPulser.html</filename>
    <base>WorkInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ProgressBarPulser &gt;</type>
      <name>Ptr</name>
      <anchorfile>classanonymous__namespace_02progressbarmanager_8cc_03_1_1ProgressBarPulser.html</anchorfile>
      <anchor>a8fa6271ddc0a3a33f4a421f97bfb5955</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classanonymous__namespace_02progressbarmanager_8cc_03_1_1ProgressBarPulser.html</anchorfile>
      <anchor>aad54614ed90f3e52212e6c0d0b17efb4</anchor>
      <arglist>(GtkProgressBar *progressBar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classanonymous__namespace_02progressbarmanager_8cc_03_1_1ProgressBarPulser.html</anchorfile>
      <anchor>a83dccb85bda99fc62494ef8fc2ec1cf5</anchor>
      <arglist>(GtkProgressBar *progressBar)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doWork</name>
      <anchorfile>classanonymous__namespace_02progressbarmanager_8cc_03_1_1ProgressBarPulser.html</anchorfile>
      <anchor>a7f11b760761fc08a19745651a1ce1652</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classanonymous__namespace_02progressbarmanager_8cc_03_1_1ProgressBarPulser.html</anchorfile>
      <anchor>acd26066fb6597628139e2de1fe7f039b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; GtkProgressBar * &gt;</type>
      <name>progressbars</name>
      <anchorfile>classanonymous__namespace_02progressbarmanager_8cc_03_1_1ProgressBarPulser.html</anchorfile>
      <anchor>ade8ae8487168e30faf5e39e07479911f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; GtkProgressBar * &gt;::iterator</type>
      <name>current</name>
      <anchorfile>classanonymous__namespace_02progressbarmanager_8cc_03_1_1ProgressBarPulser.html</anchorfile>
      <anchor>a34b6021e6edf6d15b438a4680bd28903</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProgressInterface</name>
    <filename>classProgressInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ProgressInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classProgressInterface.html</anchorfile>
      <anchor>af8844a48f0d86dab4363bbcc3f62a66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ProgressInterface &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classProgressInterface.html</anchorfile>
      <anchor>a3ee307c192349e83f9b227c46b3ee0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setIdle</name>
      <anchorfile>classProgressInterface.html</anchorfile>
      <anchor>ac8c5f2885eb3c2e0e9f95bf1995ef18b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setWaiting</name>
      <anchorfile>classProgressInterface.html</anchorfile>
      <anchor>aeedab48efa102344ee3e7080c3237b9f</anchor>
      <arglist>(double progress=0.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setWorking</name>
      <anchorfile>classProgressInterface.html</anchorfile>
      <anchor>a7dea5a7069270275fa36de3f150beb13</anchor>
      <arglist>(double progress)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setFinished</name>
      <anchorfile>classProgressInterface.html</anchorfile>
      <anchor>a105f361cdc153bc96d0b9c7d304979f1</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::ProgressInterfaceBroadcaster</name>
    <filename>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster.html</filename>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <base>ProgressInterface</base>
    <class kind="class">Scroom::Utils::ProgressInterfaceBroadcaster::Unsubscriber</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ProgressInterfaceBroadcaster &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster.html</anchorfile>
      <anchor>a5ae91493c56413424c947fe284db4875</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Stuff</type>
      <name>subscribe</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster.html</anchorfile>
      <anchor>aa36b7d041aee399a8130ee04423489ce</anchor>
      <arglist>(ProgressInterface::Ptr const &amp;child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdle</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster.html</anchorfile>
      <anchor>af32d2f249b8b44c962c58bd8af682026</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaiting</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster.html</anchorfile>
      <anchor>a008bf0598859d539e2f58649cc714f79</anchor>
      <arglist>(double progress=0.0) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorking</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster.html</anchorfile>
      <anchor>a0f578cd77f580023e3f271b94f6d2395</anchor>
      <arglist>(double progress) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinished</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster.html</anchorfile>
      <anchor>aca4e32e938c350ed3e33c68f6ee318a2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster.html</anchorfile>
      <anchor>aaa1d8f4539ec2cd5c188d8083124b7b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ProgressInterfaceBroadcaster</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster.html</anchorfile>
      <anchor>af94375c60eb938679da09e2e9e354ea3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unsubscribe</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster.html</anchorfile>
      <anchor>afe897ed6a24532a0040d457c5c136c26</anchor>
      <arglist>(ProgressInterface::Ptr const &amp;child)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster.html</anchorfile>
      <anchor>af771bbdb0d2735058923f696228d64b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; ProgressInterface::Ptr &gt;</type>
      <name>children</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster.html</anchorfile>
      <anchor>a8bbb0a41a69c55996a60d1c37995b0ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Detail::ProgressStore::Ptr</type>
      <name>store</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster.html</anchorfile>
      <anchor>a6b581e58126f2e7187a9a0eddd37de87</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Unsubscriber</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster.html</anchorfile>
      <anchor>a3af67e076c888109e056186ec11361bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::ProgressInterfaceFromProgressStateInterface</name>
    <filename>classScroom_1_1Utils_1_1ProgressInterfaceFromProgressStateInterface.html</filename>
    <base>ProgressInterface</base>
    <base protection="protected">Scroom::Utils::ProgressStateInterface</base>
    <member kind="function">
      <type>void</type>
      <name>setIdle</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceFromProgressStateInterface.html</anchorfile>
      <anchor>a199cc65a7c191d584fae796780d73419</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaiting</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceFromProgressStateInterface.html</anchorfile>
      <anchor>a10cf3208f6ea867cf0b4fa5fa8e2e7a6</anchor>
      <arglist>(double progress=0.0) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorking</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceFromProgressStateInterface.html</anchorfile>
      <anchor>af7d449b011c4c18ac2cf954be6f5ef13</anchor>
      <arglist>(double progress) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinished</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceFromProgressStateInterface.html</anchorfile>
      <anchor>a5cfd6df11a5b527e4b5d3e59b4ca67c3</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::ProgressInterfaceFromProgressStateInterfaceForwarder</name>
    <filename>classScroom_1_1Utils_1_1ProgressInterfaceFromProgressStateInterfaceForwarder.html</filename>
    <base>Scroom::Utils::ProgressInterfaceFromProgressStateInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ProgressInterfaceFromProgressStateInterfaceForwarder &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceFromProgressStateInterfaceForwarder.html</anchorfile>
      <anchor>aa62758547e0cae8d0e43242510790cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceFromProgressStateInterfaceForwarder.html</anchorfile>
      <anchor>ab13540633f3e1094f7e21683c785e7fc</anchor>
      <arglist>(ProgressStateInterface::Ptr child)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setProgress</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceFromProgressStateInterfaceForwarder.html</anchorfile>
      <anchor>aaf7261e22518449e971f0909cb302bd2</anchor>
      <arglist>(State s, double progress=0.0) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ProgressInterfaceFromProgressStateInterfaceForwarder</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceFromProgressStateInterfaceForwarder.html</anchorfile>
      <anchor>a43308c2f7bccf17e1411de9640ab6d7b</anchor>
      <arglist>(ProgressStateInterface::Ptr child)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProgressStateInterface::Ptr</type>
      <name>child</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceFromProgressStateInterfaceForwarder.html</anchorfile>
      <anchor>aff4296671b34373d0950c70f1cba53d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::ProgressInterfaceMultiplexer</name>
    <filename>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer.html</filename>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <class kind="class">Scroom::Utils::ProgressInterfaceMultiplexer::Child</class>
    <class kind="class">Scroom::Utils::ProgressInterfaceMultiplexer::ChildData</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ProgressInterfaceMultiplexer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer.html</anchorfile>
      <anchor>aaec2cfb6bb1186246757aa41302dc3a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ProgressInterface::Ptr</type>
      <name>createProgressInterface</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer.html</anchorfile>
      <anchor>abf4d144440d5115f8adbfc297f0f18b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer.html</anchorfile>
      <anchor>a36ef552823d604df0ddd3c4b47b401ef</anchor>
      <arglist>(ProgressInterface::Ptr parent)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ProgressInterfaceMultiplexer</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer.html</anchorfile>
      <anchor>a7dcdc1f00f2cfc4feb6189fc4959578c</anchor>
      <arglist>(ProgressInterface::Ptr parent)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateProgressState</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer.html</anchorfile>
      <anchor>a2c403c381ff811e48d747e288722b093</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unsubscribe</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer.html</anchorfile>
      <anchor>a7927826b7163a2e6833811922694beb5</anchor>
      <arglist>(const ChildData::Ptr &amp;data)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer.html</anchorfile>
      <anchor>a6d0578459fe55169a004d3d85d2c0f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProgressStateInterface::Ptr</type>
      <name>parent</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer.html</anchorfile>
      <anchor>ab8791ddb2fcfeb586005eda0b8ef80bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; ChildData::Ptr &gt;</type>
      <name>children</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer.html</anchorfile>
      <anchor>a448b314d5b780bdf2513acdc82684af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Child</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceMultiplexer.html</anchorfile>
      <anchor>a4f6c67d075695c1970e4189cf9b223e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProgressInterfaceMultiplexer_Fixture</name>
    <filename>classProgressInterfaceMultiplexer__Fixture.html</filename>
    <member kind="function">
      <type></type>
      <name>ProgressInterfaceMultiplexer_Fixture</name>
      <anchorfile>classProgressInterfaceMultiplexer__Fixture.html</anchorfile>
      <anchor>a8a052f9f53b726a0714768ae6c268fe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ProgressStateInterfaceStub::Ptr</type>
      <name>stub</name>
      <anchorfile>classProgressInterfaceMultiplexer__Fixture.html</anchorfile>
      <anchor>a9376acc860813ac70f3ec7410e8f73f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ProgressInterface::Ptr</type>
      <name>p1</name>
      <anchorfile>classProgressInterfaceMultiplexer__Fixture.html</anchorfile>
      <anchor>ac5262a614d07797a356694e7c1286e35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ProgressInterface::Ptr</type>
      <name>p2</name>
      <anchorfile>classProgressInterfaceMultiplexer__Fixture.html</anchorfile>
      <anchor>a66ded5410789436a6d24e2dac39b1ce3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProgressInterfaceStub</name>
    <filename>classProgressInterfaceStub.html</filename>
    <base>ProgressInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ProgressInterfaceStub &gt;</type>
      <name>Ptr</name>
      <anchorfile>classProgressInterfaceStub.html</anchorfile>
      <anchor>ae6a976f10751c3280f787ddcf6e8b7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinished</name>
      <anchorfile>classProgressInterfaceStub.html</anchorfile>
      <anchor>ae4570297be050ee80ed1e5bda6bac039</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdle</name>
      <anchorfile>classProgressInterfaceStub.html</anchorfile>
      <anchor>a56d5bcfd94ab0c7c67715bc1e9a977c1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaiting</name>
      <anchorfile>classProgressInterfaceStub.html</anchorfile>
      <anchor>ab8e8094aca5f6609f8375ebe03975a48</anchor>
      <arglist>(double) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorking</name>
      <anchorfile>classProgressInterfaceStub.html</anchorfile>
      <anchor>a5b776198edc5c1d248677cd6356b6ee7</anchor>
      <arglist>(double) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinished</name>
      <anchorfile>classProgressInterfaceStub.html</anchorfile>
      <anchor>a9bff9160843458331739a751a9960b48</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classProgressInterfaceStub.html</anchorfile>
      <anchor>a8455ae8a048c97af23e450495f0046cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ProgressInterfaceStub</name>
      <anchorfile>classProgressInterfaceStub.html</anchorfile>
      <anchor>a4fcab7cb8bf9668a473c02cfaac0c3c6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>finished</name>
      <anchorfile>classProgressInterfaceStub.html</anchorfile>
      <anchor>afbd3d81be8c8afe1eff4a489867db1de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::ProgressStateInterface</name>
    <filename>classScroom_1_1Utils_1_1ProgressStateInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterface.html</anchorfile>
      <anchor>af17b9367dd613c97f7a56479638aff55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDLE</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterface.html</anchorfile>
      <anchor>af17b9367dd613c97f7a56479638aff55a29ba88dd2ae83eeacb34c4a021c5afd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAITING</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterface.html</anchorfile>
      <anchor>af17b9367dd613c97f7a56479638aff55a15ae6d5362ebc47965ad0d4ba88d51ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WORKING</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterface.html</anchorfile>
      <anchor>af17b9367dd613c97f7a56479638aff55a6bf9ea9a6fc8476222da7bd57e772ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FINISHED</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterface.html</anchorfile>
      <anchor>af17b9367dd613c97f7a56479638aff55a86e7ecba927eb4cb9ecc2ed920a95a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ProgressStateInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterface.html</anchorfile>
      <anchor>a269fd1e0c351f34c92c7d5506f2b8930</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ProgressStateInterface &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterface.html</anchorfile>
      <anchor>a536802c8a1f16403cb37125ae15654b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDLE</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterface.html</anchorfile>
      <anchor>af17b9367dd613c97f7a56479638aff55a29ba88dd2ae83eeacb34c4a021c5afd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WAITING</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterface.html</anchorfile>
      <anchor>af17b9367dd613c97f7a56479638aff55a15ae6d5362ebc47965ad0d4ba88d51ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WORKING</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterface.html</anchorfile>
      <anchor>af17b9367dd613c97f7a56479638aff55a6bf9ea9a6fc8476222da7bd57e772ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FINISHED</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterface.html</anchorfile>
      <anchor>af17b9367dd613c97f7a56479638aff55a86e7ecba927eb4cb9ecc2ed920a95a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setProgress</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterface.html</anchorfile>
      <anchor>acef4ad435b9653f03e9e0d32b93f95e1</anchor>
      <arglist>(State s, double progress=0.0)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::ProgressStateInterfaceFromProgressInterface</name>
    <filename>classScroom_1_1Utils_1_1ProgressStateInterfaceFromProgressInterface.html</filename>
    <base>Scroom::Utils::ProgressStateInterface</base>
    <base protection="protected">ProgressInterface</base>
    <member kind="function">
      <type>void</type>
      <name>setProgress</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterfaceFromProgressInterface.html</anchorfile>
      <anchor>af263c3d2d3507c4540cac0a763434431</anchor>
      <arglist>(State s, double progress=0.0) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::ProgressStateInterfaceFromProgressInterfaceForwarder</name>
    <filename>classScroom_1_1Utils_1_1ProgressStateInterfaceFromProgressInterfaceForwarder.html</filename>
    <base>Scroom::Utils::ProgressStateInterfaceFromProgressInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ProgressStateInterfaceFromProgressInterfaceForwarder &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterfaceFromProgressInterfaceForwarder.html</anchorfile>
      <anchor>aac3edbb086cc85c3ca4b6bef28c6234f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterfaceFromProgressInterfaceForwarder.html</anchorfile>
      <anchor>a73d73bf699dfcbbdf08487617cd0a463</anchor>
      <arglist>(ProgressInterface::Ptr child)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setIdle</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterfaceFromProgressInterfaceForwarder.html</anchorfile>
      <anchor>a99a7bc58650a589e3cc9c977bb5e942a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWaiting</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterfaceFromProgressInterfaceForwarder.html</anchorfile>
      <anchor>a844215244bacf106ed20f04324ff2e12</anchor>
      <arglist>(double progress=0.0) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWorking</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterfaceFromProgressInterfaceForwarder.html</anchorfile>
      <anchor>ad08ee75b4c3bcaafdab3ac37052849ec</anchor>
      <arglist>(double progress) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setFinished</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterfaceFromProgressInterfaceForwarder.html</anchorfile>
      <anchor>a228001de22752ec2787c3cf53ba27243</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ProgressStateInterfaceFromProgressInterfaceForwarder</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterfaceFromProgressInterfaceForwarder.html</anchorfile>
      <anchor>ad8e13d42f18a22c6f04c7f09180aeb70</anchor>
      <arglist>(ProgressInterface::Ptr child)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProgressInterface::Ptr</type>
      <name>child</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressStateInterfaceFromProgressInterfaceForwarder.html</anchorfile>
      <anchor>a4f043e7c33002d226ed7c16b3b51018b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProgressStateInterfaceStub</name>
    <filename>classProgressStateInterfaceStub.html</filename>
    <base>Scroom::Utils::ProgressStateInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ProgressStateInterfaceStub &gt;</type>
      <name>Ptr</name>
      <anchorfile>classProgressStateInterfaceStub.html</anchorfile>
      <anchor>a8f897f766bf067bfac45ee35dfeb95fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProgress</name>
      <anchorfile>classProgressStateInterfaceStub.html</anchorfile>
      <anchor>a05220b292c1b12a8b63ace07f873c20c</anchor>
      <arglist>(State s, double d) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classProgressStateInterfaceStub.html</anchorfile>
      <anchor>a8ac3ae70ed83e77e922fdb83d89554d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state</name>
      <anchorfile>classProgressStateInterfaceStub.html</anchorfile>
      <anchor>a4270a4f6e65d0a844201509d50b97a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>progress</name>
      <anchorfile>classProgressStateInterfaceStub.html</anchorfile>
      <anchor>a1689f4becf084a505e76a39784e973d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ProgressStateInterfaceStub</name>
      <anchorfile>classProgressStateInterfaceStub.html</anchorfile>
      <anchor>a932bf7c16f10af4c932ef9f30063e26c</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::Detail::ProgressStore</name>
    <filename>classScroom_1_1Utils_1_1Detail_1_1ProgressStore.html</filename>
    <base>Scroom::Utils::ProgressInterfaceFromProgressStateInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ProgressStore &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1ProgressStore.html</anchorfile>
      <anchor>a5d63ec60c306ef949c038748d691b223</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1ProgressStore.html</anchorfile>
      <anchor>a5f154d6e450e69dd0ef22a2f0f64e383</anchor>
      <arglist>(ProgressInterface::Ptr const &amp;i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1ProgressStore.html</anchorfile>
      <anchor>ad64f01bbb18a7b887d33584e5f1ac94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setProgress</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1ProgressStore.html</anchorfile>
      <anchor>a0dab9f15bb924303175b98434df5d5b6</anchor>
      <arglist>(State s, double progress=0.0) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ProgressStore</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1ProgressStore.html</anchorfile>
      <anchor>a92600a11ce6cac32b386b18af4773d7a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>State</type>
      <name>state</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1ProgressStore.html</anchorfile>
      <anchor>a434ec03c3570c3434a8e32c4765fdd98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>progress</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1ProgressStore.html</anchorfile>
      <anchor>ab9e44318cf3c333e7a1ba8a2233f1f61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadPool::Queue</name>
    <filename>classThreadPool_1_1Queue.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Queue &gt;</type>
      <name>Ptr</name>
      <anchorfile>classThreadPool_1_1Queue.html</anchorfile>
      <anchor>a3096b6f6bf4aab440b938d7c5632a402</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Queue &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classThreadPool_1_1Queue.html</anchorfile>
      <anchor>ad426620d1b761c124a4aca7175cde034</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Queue</name>
      <anchorfile>classThreadPool_1_1Queue.html</anchorfile>
      <anchor>a2c6be4f191a8b6390e39583b0f085149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Scroom::Detail::ThreadPool::QueueImpl &gt;</type>
      <name>get</name>
      <anchorfile>classThreadPool_1_1Queue.html</anchorfile>
      <anchor>a507f0fcc6f3edf7565652eea7a925430</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; WeakQueue &gt;</type>
      <name>getWeak</name>
      <anchorfile>classThreadPool_1_1Queue.html</anchorfile>
      <anchor>a475a6a4ef37c8aa9ff22cb2cecc59d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classThreadPool_1_1Queue.html</anchorfile>
      <anchor>ae48cfe05b7bb72f1990557d64ef57acf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>createAsync</name>
      <anchorfile>classThreadPool_1_1Queue.html</anchorfile>
      <anchor>a60a5cfe128cc80c5d5fbbd6494fb62e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Queue</name>
      <anchorfile>classThreadPool_1_1Queue.html</anchorfile>
      <anchor>a0ea02c66235d2f8bd6da128248d8b55f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Queue</name>
      <anchorfile>classThreadPool_1_1Queue.html</anchorfile>
      <anchor>ab4b8dee0d10fe3f6f58d4ee4775903fc</anchor>
      <arglist>(const Queue &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Queue</name>
      <anchorfile>classThreadPool_1_1Queue.html</anchorfile>
      <anchor>aea78a048117e0a301bbb43f98e1fba73</anchor>
      <arglist>(Queue &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Queue &amp;</type>
      <name>operator=</name>
      <anchorfile>classThreadPool_1_1Queue.html</anchorfile>
      <anchor>a747bf700325f1884644bfd77363af4dd</anchor>
      <arglist>(const Queue &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Queue &amp;</type>
      <name>operator=</name>
      <anchorfile>classThreadPool_1_1Queue.html</anchorfile>
      <anchor>a363cc6f75314ecc3d08d55dd8162621a</anchor>
      <arglist>(Queue &amp;&amp;)=delete</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; WeakQueue &gt;</type>
      <name>weak</name>
      <anchorfile>classThreadPool_1_1Queue.html</anchorfile>
      <anchor>a78c61eff732a77a1ca300bb560a86d4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Detail::ThreadPool::QueueImpl</name>
    <filename>classScroom_1_1Detail_1_1ThreadPool_1_1QueueImpl.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; QueueImpl &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueImpl.html</anchorfile>
      <anchor>ae661fe0412325b7bf8b472615249f30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jobStarted</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueImpl.html</anchorfile>
      <anchor>a7a137b16279026734113bc682a60f158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jobFinished</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueImpl.html</anchorfile>
      <anchor>a18af3e0ebc591ee3079fc85be46f4b32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deletingQueue</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueImpl.html</anchorfile>
      <anchor>a0ba3013ca14c6fbf310043ca25257be0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCount</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueImpl.html</anchorfile>
      <anchor>a611c132c0e80a2b09478a0a1bdf04510</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueImpl.html</anchorfile>
      <anchor>a64cd8f0962b85d3e5e8078849ced2aad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>QueueImpl</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueImpl.html</anchorfile>
      <anchor>a7a5b44d88afe52565c4b1760ab0792b6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueImpl.html</anchorfile>
      <anchor>a15aaebdf361598615f8de607a39ec95e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::condition_variable</type>
      <name>cond</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueImpl.html</anchorfile>
      <anchor>a7f2a699ce69277a03cf911bd1e034f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>count</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueImpl.html</anchorfile>
      <anchor>a0ad75834f2e5797eed8bfc5d116be201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isDeleted</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueImpl.html</anchorfile>
      <anchor>ab0f47c9ecd94519e775b5c556c054a06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QueueJumper</name>
    <filename>classQueueJumper.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; QueueJumper &gt;</type>
      <name>Ptr</name>
      <anchorfile>classQueueJumper.html</anchorfile>
      <anchor>a5d08c9e804fa1c203893435a7e053d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setWork</name>
      <anchorfile>classQueueJumper.html</anchorfile>
      <anchor>a5dbf1296ec716e239f34b7eed4343ca2</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classQueueJumper.html</anchorfile>
      <anchor>a66bc37b1160a29de9f47ebc0766f2b47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classQueueJumper.html</anchorfile>
      <anchor>a5b17c2980aa09df97b92423481e24dc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>QueueJumper</name>
      <anchorfile>classQueueJumper.html</anchorfile>
      <anchor>a81c278d92787fd90e1690a6f0dea7ef9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classQueueJumper.html</anchorfile>
      <anchor>aac5382e9016830f9eee55b9f32215782</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>inQueue</name>
      <anchorfile>classQueueJumper.html</anchorfile>
      <anchor>a9e5a773c17b4649f07c61b22751f6ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classQueueJumper.html</anchorfile>
      <anchor>a26605a27165f871fd14e586fa3c80b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::function&lt; void()&gt;</type>
      <name>fn</name>
      <anchorfile>classQueueJumper.html</anchorfile>
      <anchor>af34fdb126ea4078e80dde8038a95c564</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Detail::ThreadPool::QueueLock</name>
    <filename>classScroom_1_1Detail_1_1ThreadPool_1_1QueueLock.html</filename>
    <member kind="function">
      <type></type>
      <name>QueueLock</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueLock.html</anchorfile>
      <anchor>a37dc7dcb649e1a402c699a7a1b1a52b1</anchor>
      <arglist>(QueueImpl::Ptr queue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QueueLock</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueLock.html</anchorfile>
      <anchor>ac07acc5db76afb4a91ef0ff9930ba432</anchor>
      <arglist>(const QueueLock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QueueLock</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueLock.html</anchorfile>
      <anchor>a22e5cbbae789baa47267ceaa3179e17f</anchor>
      <arglist>(QueueLock &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>QueueLock &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueLock.html</anchorfile>
      <anchor>a03efd86aa62735cf3e762ce2797f4176</anchor>
      <arglist>(const QueueLock &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>QueueLock &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueLock.html</anchorfile>
      <anchor>aa1e15baba3346f24968a93f1fddaf74d</anchor>
      <arglist>(QueueLock &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QueueLock</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueLock.html</anchorfile>
      <anchor>a168151543f6766a8ce874377f3d4408e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>queueExists</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueLock.html</anchorfile>
      <anchor>af7ab49efcadabf4dfdf12cba89039e65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QueueImpl::Ptr</type>
      <name>q</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueLock.html</anchorfile>
      <anchor>a34b2173501078e5b2956ee0c30b620bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classScroom_1_1Detail_1_1ThreadPool_1_1QueueLock.html</anchorfile>
      <anchor>aef5dd083ecbcf56f26c90b483c8d9a52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::Rectangle</name>
    <filename>classScroom_1_1Utils_1_1Rectangle.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ae9da03b7257324aa5280b1e5ffd54a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point&lt; T &gt;</type>
      <name>xy_type</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a26be8e0cb44d4b64c4e74a13f9759b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a8bafbe715dcf9dc732ea2f197b9ecba1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a193a42cdd207109ce301d307246feb62</anchor>
      <arglist>(value_type x_, value_type y_, value_type width_, value_type height_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a606827d1c16c8b8ebe05fc1c0fdf4132</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;horizontally_, const Segment&lt; value_type &gt; &amp;vertically_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a19d6c841479a5ab9ac31a55efecda784</anchor>
      <arglist>(const cairo_rectangle_int_t &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a5f2b17d554fd97616123782938a242b8</anchor>
      <arglist>(typename std::enable_if&lt;!T_is_int, Rectangle&lt; int &gt; const &amp; &gt;::type rect)</arglist>
    </member>
    <member kind="function">
      <type>cairo_rectangle_int_t</type>
      <name>toGdkRectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a2b1f95eea80820e7f6434cc7ec1bee52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>moveTo</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aedd0d1a9a795cfa71ba9dc888c2ef92d</anchor>
      <arglist>(xy_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>moveTo</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aff624171cf321b8f05d4d6989ab361ec</anchor>
      <arglist>(value_type const &amp;x, value_type const &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a214abe27a155259161e7bb317f5d32e2</anchor>
      <arglist>(xy_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a2950ca2f61eba8e9b00d02a68ac64a72</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a986e254432e0c921011005312eb9d3c6</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceSizeToMultipleOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>af2878f439507d917170ed14d7843405e</anchor>
      <arglist>(value_type size)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>intersection</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aa93bcd537f48183edeb70a668f7352cf</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>intersection</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aa93cb09f56f99dc681b62f49fb945664</anchor>
      <arglist>(const Rectangle&lt; U &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getTop</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a23ed938b3f63186f48c5828024a9d6ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getLeft</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ad623b0b902d4e2cd1d858300728c78d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getBottom</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>af497bd1988b10b5e521a82bc05285eed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getRight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ac0a99c1ecbac98201ef36d88bf56eb40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTop</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ae7fb0b3818fda25c736079f6352a9dd2</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeft</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a486cc67b8e32da2e9981935a468ef547</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBottom</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a9e1d817f2255c07a95d625911b8bf0dc</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a8fe6e50bc71270332b86a414e098e7a1</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getWidth</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a3b8d627a36eb56f6f36eea5004591154</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getHeight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ac3ffb0067f3c0d0686ea2319cd5d5618</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>x</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a72976ed3a84a5c482d396038aa67f077</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>y</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a405cfffb11cdb9f2fa5600e2bf15231c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>width</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aac53b13b110251e6666a6e8499c19f27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>height</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a1262f445c07c33e16069e2497aed581f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getTopLeft</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aa0205a1477a20bd1888f9dd480069bf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getTopRight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a43b9e2c50da501d42ee265b76d061c1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getBottomLeft</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a6a2d89e24dea1c52daa0a8e6b5521cb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getBottomRight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a010a83b3edfaf453fefc1dcf36704e40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a63d218d52a6e28b5f3af118feb624019</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>leftOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>adf62135f8fc93f9269d33baf77f0a083</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>rightOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aca81333b9b8350b037fc707748784976</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>above</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a9531590fea575c3339a63ec865e0cfb8</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>below</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aebd20853fb69e478c7cf3cd6ec6b19d7</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>leftOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>af376cd57a92a47d4f2f2fa751e71abee</anchor>
      <arglist>(Rectangle&lt; value_type &gt; const &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>rightOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a43102752684fdab60cd76112fe6a43a7</anchor>
      <arglist>(Rectangle&lt; value_type &gt; const &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>above</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aea4765c8b1c903617371258c5bb2a3cd</anchor>
      <arglist>(Rectangle&lt; value_type &gt; const &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>below</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ab99ecc7917836df0a3eda518ee9afe72</anchor>
      <arglist>(Rectangle&lt; value_type &gt; const &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a67601b0eaa9319fe17dfb17392a78b19</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ada05719ee9223596fd5bba4f0542a284</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a5f916269290aec81fa9611fcb7852a5f</anchor>
      <arglist>(xy_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>af3802384a5d07fb3a8b01683e26e2f93</anchor>
      <arglist>(xy_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a155ad6330f0b9efd38355d7c6b46c98b</anchor>
      <arglist>(value_type other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a83c9e7f3f671debf2ef5b3567143f6dd</anchor>
      <arglist>(xy_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a45f125b53ab806b73092a57132733ded</anchor>
      <arglist>(value_type other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>abe38e9912d19fd7bd706db35df9e6734</anchor>
      <arglist>(xy_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Segment&lt; value_type &gt; &amp;</type>
      <name>getHorizontally</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a62a44f08a52ffba8f9caf5e44848bef3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Segment&lt; value_type &gt; &amp;</type>
      <name>getVertically</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a952feac8d48e488edb8ad7d805871b71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a2b0656791e956f3c2f29b9a02eedff4d</anchor>
      <arglist>(xy_type const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getSize</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a94801f893685dd3f231a75d94e6a6dd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; U &gt;</type>
      <name>to</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a25c07cbd05aa3bf9a64cb5564e57385a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Segment&lt; value_type &gt;</type>
      <name>horizontally</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a4b1bfd88dfb9f4e74ec2410a62b14ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Segment&lt; value_type &gt;</type>
      <name>vertically</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a35c6f8b7d9d5f4ca27de0949da1493d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Rectangle&lt; double &gt;</name>
    <filename>classScroom_1_1Utils_1_1Rectangle.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ae9da03b7257324aa5280b1e5ffd54a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point&lt; double &gt;</type>
      <name>xy_type</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a26be8e0cb44d4b64c4e74a13f9759b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a8bafbe715dcf9dc732ea2f197b9ecba1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a193a42cdd207109ce301d307246feb62</anchor>
      <arglist>(value_type x_, value_type y_, value_type width_, value_type height_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a606827d1c16c8b8ebe05fc1c0fdf4132</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;horizontally_, const Segment&lt; value_type &gt; &amp;vertically_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a19d6c841479a5ab9ac31a55efecda784</anchor>
      <arglist>(const cairo_rectangle_int_t &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a5f2b17d554fd97616123782938a242b8</anchor>
      <arglist>(typename std::enable_if&lt;!T_is_int, Rectangle&lt; int &gt; const &amp; &gt;::type rect)</arglist>
    </member>
    <member kind="function">
      <type>cairo_rectangle_int_t</type>
      <name>toGdkRectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a2b1f95eea80820e7f6434cc7ec1bee52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>moveTo</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aedd0d1a9a795cfa71ba9dc888c2ef92d</anchor>
      <arglist>(xy_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>moveTo</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aff624171cf321b8f05d4d6989ab361ec</anchor>
      <arglist>(value_type const &amp;x, value_type const &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a214abe27a155259161e7bb317f5d32e2</anchor>
      <arglist>(xy_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a2950ca2f61eba8e9b00d02a68ac64a72</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a986e254432e0c921011005312eb9d3c6</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceSizeToMultipleOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>af2878f439507d917170ed14d7843405e</anchor>
      <arglist>(value_type size)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>intersection</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aa93bcd537f48183edeb70a668f7352cf</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; typename std::common_type&lt; double, U &gt;::type &gt;</type>
      <name>intersection</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aa93cb09f56f99dc681b62f49fb945664</anchor>
      <arglist>(const Rectangle&lt; U &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getTop</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a23ed938b3f63186f48c5828024a9d6ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getLeft</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ad623b0b902d4e2cd1d858300728c78d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getBottom</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>af497bd1988b10b5e521a82bc05285eed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getRight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ac0a99c1ecbac98201ef36d88bf56eb40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTop</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ae7fb0b3818fda25c736079f6352a9dd2</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeft</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a486cc67b8e32da2e9981935a468ef547</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBottom</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a9e1d817f2255c07a95d625911b8bf0dc</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a8fe6e50bc71270332b86a414e098e7a1</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getWidth</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a3b8d627a36eb56f6f36eea5004591154</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getHeight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ac3ffb0067f3c0d0686ea2319cd5d5618</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>x</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a72976ed3a84a5c482d396038aa67f077</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>y</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a405cfffb11cdb9f2fa5600e2bf15231c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>width</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aac53b13b110251e6666a6e8499c19f27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>height</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a1262f445c07c33e16069e2497aed581f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getTopLeft</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aa0205a1477a20bd1888f9dd480069bf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getTopRight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a43b9e2c50da501d42ee265b76d061c1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getBottomLeft</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a6a2d89e24dea1c52daa0a8e6b5521cb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getBottomRight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a010a83b3edfaf453fefc1dcf36704e40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a63d218d52a6e28b5f3af118feb624019</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>leftOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>adf62135f8fc93f9269d33baf77f0a083</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>leftOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>af376cd57a92a47d4f2f2fa751e71abee</anchor>
      <arglist>(Rectangle&lt; value_type &gt; const &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>rightOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aca81333b9b8350b037fc707748784976</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>rightOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a43102752684fdab60cd76112fe6a43a7</anchor>
      <arglist>(Rectangle&lt; value_type &gt; const &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>above</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a9531590fea575c3339a63ec865e0cfb8</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>above</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aea4765c8b1c903617371258c5bb2a3cd</anchor>
      <arglist>(Rectangle&lt; value_type &gt; const &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>below</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aebd20853fb69e478c7cf3cd6ec6b19d7</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>below</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ab99ecc7917836df0a3eda518ee9afe72</anchor>
      <arglist>(Rectangle&lt; value_type &gt; const &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a67601b0eaa9319fe17dfb17392a78b19</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ada05719ee9223596fd5bba4f0542a284</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a5f916269290aec81fa9611fcb7852a5f</anchor>
      <arglist>(xy_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>af3802384a5d07fb3a8b01683e26e2f93</anchor>
      <arglist>(xy_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a155ad6330f0b9efd38355d7c6b46c98b</anchor>
      <arglist>(value_type other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a83c9e7f3f671debf2ef5b3567143f6dd</anchor>
      <arglist>(xy_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a45f125b53ab806b73092a57132733ded</anchor>
      <arglist>(value_type other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>abe38e9912d19fd7bd706db35df9e6734</anchor>
      <arglist>(xy_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Segment&lt; value_type &gt; &amp;</type>
      <name>getHorizontally</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a62a44f08a52ffba8f9caf5e44848bef3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Segment&lt; value_type &gt; &amp;</type>
      <name>getVertically</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a952feac8d48e488edb8ad7d805871b71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a2b0656791e956f3c2f29b9a02eedff4d</anchor>
      <arglist>(xy_type const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getSize</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a94801f893685dd3f231a75d94e6a6dd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; U &gt;</type>
      <name>to</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a25c07cbd05aa3bf9a64cb5564e57385a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Segment&lt; value_type &gt;</type>
      <name>horizontally</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a4b1bfd88dfb9f4e74ec2410a62b14ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Segment&lt; value_type &gt;</type>
      <name>vertically</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a35c6f8b7d9d5f4ca27de0949da1493d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Rectangle&lt; int &gt;</name>
    <filename>classScroom_1_1Utils_1_1Rectangle.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>value_type</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ae9da03b7257324aa5280b1e5ffd54a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point&lt; int &gt;</type>
      <name>xy_type</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a26be8e0cb44d4b64c4e74a13f9759b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a8bafbe715dcf9dc732ea2f197b9ecba1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a193a42cdd207109ce301d307246feb62</anchor>
      <arglist>(value_type x_, value_type y_, value_type width_, value_type height_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a606827d1c16c8b8ebe05fc1c0fdf4132</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;horizontally_, const Segment&lt; value_type &gt; &amp;vertically_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a19d6c841479a5ab9ac31a55efecda784</anchor>
      <arglist>(const cairo_rectangle_int_t &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a5f2b17d554fd97616123782938a242b8</anchor>
      <arglist>(typename std::enable_if&lt;!T_is_int, Rectangle&lt; int &gt; const &amp; &gt;::type rect)</arglist>
    </member>
    <member kind="function">
      <type>cairo_rectangle_int_t</type>
      <name>toGdkRectangle</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a2b1f95eea80820e7f6434cc7ec1bee52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>moveTo</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aedd0d1a9a795cfa71ba9dc888c2ef92d</anchor>
      <arglist>(xy_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>moveTo</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aff624171cf321b8f05d4d6989ab361ec</anchor>
      <arglist>(value_type const &amp;x, value_type const &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a214abe27a155259161e7bb317f5d32e2</anchor>
      <arglist>(xy_type const &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a2950ca2f61eba8e9b00d02a68ac64a72</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a986e254432e0c921011005312eb9d3c6</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceSizeToMultipleOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>af2878f439507d917170ed14d7843405e</anchor>
      <arglist>(value_type size)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>intersection</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aa93bcd537f48183edeb70a668f7352cf</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; typename std::common_type&lt; int, U &gt;::type &gt;</type>
      <name>intersection</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aa93cb09f56f99dc681b62f49fb945664</anchor>
      <arglist>(const Rectangle&lt; U &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getTop</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a23ed938b3f63186f48c5828024a9d6ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getLeft</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ad623b0b902d4e2cd1d858300728c78d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getBottom</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>af497bd1988b10b5e521a82bc05285eed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getRight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ac0a99c1ecbac98201ef36d88bf56eb40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTop</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ae7fb0b3818fda25c736079f6352a9dd2</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeft</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a486cc67b8e32da2e9981935a468ef547</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBottom</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a9e1d817f2255c07a95d625911b8bf0dc</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a8fe6e50bc71270332b86a414e098e7a1</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getWidth</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a3b8d627a36eb56f6f36eea5004591154</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getHeight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ac3ffb0067f3c0d0686ea2319cd5d5618</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>x</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a72976ed3a84a5c482d396038aa67f077</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>y</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a405cfffb11cdb9f2fa5600e2bf15231c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>width</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aac53b13b110251e6666a6e8499c19f27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>height</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a1262f445c07c33e16069e2497aed581f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getTopLeft</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aa0205a1477a20bd1888f9dd480069bf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getTopRight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a43b9e2c50da501d42ee265b76d061c1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getBottomLeft</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a6a2d89e24dea1c52daa0a8e6b5521cb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getBottomRight</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a010a83b3edfaf453fefc1dcf36704e40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a63d218d52a6e28b5f3af118feb624019</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>leftOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>adf62135f8fc93f9269d33baf77f0a083</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>leftOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>af376cd57a92a47d4f2f2fa751e71abee</anchor>
      <arglist>(Rectangle&lt; value_type &gt; const &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>rightOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aca81333b9b8350b037fc707748784976</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>rightOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a43102752684fdab60cd76112fe6a43a7</anchor>
      <arglist>(Rectangle&lt; value_type &gt; const &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>above</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a9531590fea575c3339a63ec865e0cfb8</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>above</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aea4765c8b1c903617371258c5bb2a3cd</anchor>
      <arglist>(Rectangle&lt; value_type &gt; const &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>below</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>aebd20853fb69e478c7cf3cd6ec6b19d7</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt;</type>
      <name>below</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ab99ecc7917836df0a3eda518ee9afe72</anchor>
      <arglist>(Rectangle&lt; value_type &gt; const &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a67601b0eaa9319fe17dfb17392a78b19</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>ada05719ee9223596fd5bba4f0542a284</anchor>
      <arglist>(const Rectangle &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a5f916269290aec81fa9611fcb7852a5f</anchor>
      <arglist>(xy_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>af3802384a5d07fb3a8b01683e26e2f93</anchor>
      <arglist>(xy_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a155ad6330f0b9efd38355d7c6b46c98b</anchor>
      <arglist>(value_type other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a83c9e7f3f671debf2ef5b3567143f6dd</anchor>
      <arglist>(xy_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a45f125b53ab806b73092a57132733ded</anchor>
      <arglist>(value_type other)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; value_type &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>abe38e9912d19fd7bd706db35df9e6734</anchor>
      <arglist>(xy_type const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Segment&lt; value_type &gt; &amp;</type>
      <name>getHorizontally</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a62a44f08a52ffba8f9caf5e44848bef3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Segment&lt; value_type &gt; &amp;</type>
      <name>getVertically</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a952feac8d48e488edb8ad7d805871b71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a2b0656791e956f3c2f29b9a02eedff4d</anchor>
      <arglist>(xy_type const &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>xy_type</type>
      <name>getSize</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a94801f893685dd3f231a75d94e6a6dd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; U &gt;</type>
      <name>to</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a25c07cbd05aa3bf9a64cb5564e57385a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Segment&lt; value_type &gt;</type>
      <name>horizontally</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a4b1bfd88dfb9f4e74ec2410a62b14ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Segment&lt; value_type &gt;</type>
      <name>vertically</name>
      <anchorfile>classScroom_1_1Utils_1_1Rectangle.html</anchorfile>
      <anchor>a35c6f8b7d9d5f4ca27de0949da1493d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectangleHorizontalTestScaffold</name>
    <filename>classRectangleHorizontalTestScaffold.html</filename>
    <base>Rectangle&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>RectangleHorizontalTestScaffold</name>
      <anchorfile>classRectangleHorizontalTestScaffold.html</anchorfile>
      <anchor>a8f3c558bb46817407f5e73c30f0beca8</anchor>
      <arglist>(int horizontalStart, int horizontalSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleHorizontalTestScaffold</name>
      <anchorfile>classRectangleHorizontalTestScaffold.html</anchorfile>
      <anchor>aec4c578e8072168aa79f3cef219bc3b1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleHorizontalTestScaffold</name>
      <anchorfile>classRectangleHorizontalTestScaffold.html</anchorfile>
      <anchor>a1d6370463fbd85330cabb1c4ab2f8bed</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSize</name>
      <anchorfile>classRectangleHorizontalTestScaffold.html</anchorfile>
      <anchor>a428c428a669772a91a7da4b4c92f03cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStart</name>
      <anchorfile>classRectangleHorizontalTestScaffold.html</anchorfile>
      <anchor>a2bbb7193a02bbf35abaeb4560cab79ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEnd</name>
      <anchorfile>classRectangleHorizontalTestScaffold.html</anchorfile>
      <anchor>a78abc55c826e9154fbc72553b6b267a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classRectangleHorizontalTestScaffold.html</anchorfile>
      <anchor>ab16ac0af29b686977832fa5eb1b43ccb</anchor>
      <arglist>(int x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classRectangleHorizontalTestScaffold.html</anchorfile>
      <anchor>a496edae1f5768648a3d0aa6d82d5b3e0</anchor>
      <arglist>(const RectangleHorizontalTestScaffold &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>RectangleHorizontalTestScaffold</type>
      <name>intersection</name>
      <anchorfile>classRectangleHorizontalTestScaffold.html</anchorfile>
      <anchor>a567bab729e5c6a2955fab5a4c87d5ec0</anchor>
      <arglist>(const RectangleHorizontalTestScaffold &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>moveTo</name>
      <anchorfile>classRectangleHorizontalTestScaffold.html</anchorfile>
      <anchor>a76a22822930bdd617f9890e59f022602</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>verticalStart</name>
      <anchorfile>classRectangleHorizontalTestScaffold.html</anchorfile>
      <anchor>a504e3eaac31d21fa27c7ee7656d3dc9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>verticalContainedStart</name>
      <anchorfile>classRectangleHorizontalTestScaffold.html</anchorfile>
      <anchor>ad82a7e3555b017d6256e8fdc9b3846de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>verticalContainedWidth</name>
      <anchorfile>classRectangleHorizontalTestScaffold.html</anchorfile>
      <anchor>a1f9ab95309b07ecae6a24c5522b3c1dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>verticalSize</name>
      <anchorfile>classRectangleHorizontalTestScaffold.html</anchorfile>
      <anchor>adf00f6fd1a23ad1d0cc11454bed06fe6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectangleVerticalTestScaffold</name>
    <filename>classRectangleVerticalTestScaffold.html</filename>
    <base>Rectangle&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>RectangleVerticalTestScaffold</name>
      <anchorfile>classRectangleVerticalTestScaffold.html</anchorfile>
      <anchor>a92464ad4dfb066cd91fe2bd0bea497a6</anchor>
      <arglist>(int verticalStart, int verticalSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleVerticalTestScaffold</name>
      <anchorfile>classRectangleVerticalTestScaffold.html</anchorfile>
      <anchor>ac9d33365e5db4d2d8bd54b853860763b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleVerticalTestScaffold</name>
      <anchorfile>classRectangleVerticalTestScaffold.html</anchorfile>
      <anchor>a2ba83090e9a34e5faf662ca803ee8c72</anchor>
      <arglist>(const Rectangle&lt; int &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSize</name>
      <anchorfile>classRectangleVerticalTestScaffold.html</anchorfile>
      <anchor>aca7d5501292dce8544113bfc2fd784f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStart</name>
      <anchorfile>classRectangleVerticalTestScaffold.html</anchorfile>
      <anchor>a3806e621485e313bd399262bb1492163</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEnd</name>
      <anchorfile>classRectangleVerticalTestScaffold.html</anchorfile>
      <anchor>a71c8eff4036aa058399f83754eae49cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classRectangleVerticalTestScaffold.html</anchorfile>
      <anchor>a284977babcd96a3d2103c692c617a347</anchor>
      <arglist>(int y) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classRectangleVerticalTestScaffold.html</anchorfile>
      <anchor>ae77993101d3587afa5a58e9058e4eec0</anchor>
      <arglist>(const RectangleVerticalTestScaffold &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>RectangleVerticalTestScaffold</type>
      <name>intersection</name>
      <anchorfile>classRectangleVerticalTestScaffold.html</anchorfile>
      <anchor>a24483f236ec57b0f67c0fec7c4d84c3e</anchor>
      <arglist>(const RectangleVerticalTestScaffold &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rectangle</type>
      <name>moveTo</name>
      <anchorfile>classRectangleVerticalTestScaffold.html</anchorfile>
      <anchor>a8bfeff6dc84435fe11b50763dbf09c32</anchor>
      <arglist>(int y)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>horizontalStart</name>
      <anchorfile>classRectangleVerticalTestScaffold.html</anchorfile>
      <anchor>a5514c2cf564d1c77ce2f5ecc68e887da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>horizontalContainedStart</name>
      <anchorfile>classRectangleVerticalTestScaffold.html</anchorfile>
      <anchor>a4e088415f94c8493f812b4680665c9c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>horizontalContainedWidth</name>
      <anchorfile>classRectangleVerticalTestScaffold.html</anchorfile>
      <anchor>a6da82e9fc4b38dfce3538ac62357b439</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>horizontalSize</name>
      <anchorfile>classRectangleVerticalTestScaffold.html</anchorfile>
      <anchor>a9a620be7b805d608a5e3a9a1333c7b41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::Detail::Registration</name>
    <filename>classScroom_1_1Utils_1_1Detail_1_1Registration.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Registration&lt; T &gt; &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1Registration.html</anchorfile>
      <anchor>a0bc6b88c23a6dd26782db02886dfcccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Registration</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1Registration.html</anchorfile>
      <anchor>a35fdbd663d8c2009a6f293e75bffdef3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Registration</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1Registration.html</anchorfile>
      <anchor>a787157a0607a0cc0c037ef2bb05d21a7</anchor>
      <arglist>(std::weak_ptr&lt; Observable&lt; T &gt;&gt; observable, std::shared_ptr&lt; T &gt; observer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Registration</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1Registration.html</anchorfile>
      <anchor>ae50c7f9bb9273690d4aa9dd024615b92</anchor>
      <arglist>(std::weak_ptr&lt; Observable&lt; T &gt;&gt; observable, std::weak_ptr&lt; T &gt; observer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1Registration.html</anchorfile>
      <anchor>a63149b91b7696b4be9db899bb79f2e4d</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; observer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1Registration.html</anchorfile>
      <anchor>a14ffb61a6a0780b0d20a97a277b55c3b</anchor>
      <arglist>(std::weak_ptr&lt; T &gt; observer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1Registration.html</anchorfile>
      <anchor>a2af3d951212e1f2aef7f54f311013626</anchor>
      <arglist>(std::weak_ptr&lt; Observable&lt; T &gt;&gt; observable, std::shared_ptr&lt; T &gt; observer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1Registration.html</anchorfile>
      <anchor>a3704d488aff071032178f0d69c6fce00</anchor>
      <arglist>(std::weak_ptr&lt; Observable&lt; T &gt;&gt; observable, std::weak_ptr&lt; T &gt; observer)</arglist>
    </member>
    <member kind="variable">
      <type>std::weak_ptr&lt; Observable&lt; T &gt; &gt;</type>
      <name>observable</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1Registration.html</anchorfile>
      <anchor>a6690c9a2e6cd54f120aea402f9b874da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>o</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1Registration.html</anchorfile>
      <anchor>adfdcc84d40bf2b8f8e52c7fb6e0548e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::weak_ptr&lt; T &gt;</type>
      <name>observer</name>
      <anchorfile>classScroom_1_1Utils_1_1Detail_1_1Registration.html</anchorfile>
      <anchor>abc4733b9fa9fe3099fe247b8ce554402</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResizablePresentationInterface</name>
    <filename>classResizablePresentationInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ResizablePresentationInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classResizablePresentationInterface.html</anchorfile>
      <anchor>a182660f43675ae98a01968c635b47be9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ResizablePresentationInterface &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classResizablePresentationInterface.html</anchorfile>
      <anchor>a9f5be276d73f38edb40ce21952d6aa5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRect</name>
      <anchorfile>classResizablePresentationInterface.html</anchorfile>
      <anchor>adfd0fcdcc45220c30bfcb750d830baeb</anchor>
      <arglist>(ViewInterface::WeakPtr const &amp;vi, Scroom::Utils::Rectangle&lt; double &gt; const &amp;rect)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>anonymous_namespace{determine-size-test.cc}::ResizablePresentationInterfaceStub</name>
    <filename>classanonymous__namespace_02determine-size-test_8cc_03_1_1ResizablePresentationInterfaceStub.html</filename>
    <base>anonymous_namespace{determine-size-test.cc}::PresentationInterfaceStub</base>
    <base>ResizablePresentationInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ResizablePresentationInterfaceStub &gt;</type>
      <name>Ptr</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ResizablePresentationInterfaceStub.html</anchorfile>
      <anchor>a28e8e73630bc749fefa533599f1f6ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRect</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ResizablePresentationInterfaceStub.html</anchorfile>
      <anchor>a8f27bf0bb8e98a2341811cd6ce065861</anchor>
      <arglist>(ViewInterface::WeakPtr const &amp;vi, Scroom::Utils::Rectangle&lt; double &gt; const &amp;rect_) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CheckAllEqual</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ResizablePresentationInterfaceStub.html</anchorfile>
      <anchor>a5cf45f0f87b469b73f97d232a36e60ac</anchor>
      <arglist>(Scroom::Utils::Rectangle&lt; double &gt; const &amp;rect_) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ResizablePresentationInterfaceStub.html</anchorfile>
      <anchor>ac6b6d2448ee06b12293be071fda1483e</anchor>
      <arglist>(ViewInterface::WeakPtr const &amp;vi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CheckEmpty</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ResizablePresentationInterfaceStub.html</anchorfile>
      <anchor>a8ee7c4447d9fa6c1541290ab059ff97e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ResizablePresentationInterfaceStub.html</anchorfile>
      <anchor>a8c96e7ee75915914135f2e5f31061ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ResizablePresentationInterfaceStub.html</anchorfile>
      <anchor>a452fb012830aaa83cc79142fce5e7a29</anchor>
      <arglist>(Scroom::Utils::Rectangle&lt; double &gt; const &amp;rect)</arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; ViewInterface::WeakPtr &gt;</type>
      <name>receivedVi</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ResizablePresentationInterfaceStub.html</anchorfile>
      <anchor>a465d66b1557f3004e5f89f28f84aec6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; Scroom::Utils::Rectangle&lt; double &gt; &gt;</type>
      <name>receivedRect</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ResizablePresentationInterfaceStub.html</anchorfile>
      <anchor>a71c003c66848b17c4e6ade5753b5c908</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ResizablePresentationInterfaceStub</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ResizablePresentationInterfaceStub.html</anchorfile>
      <anchor>aa3102857c176d1862a8a30d887fb409c</anchor>
      <arglist>(Scroom::Utils::Rectangle&lt; double &gt; const &amp;rect_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ruler</name>
    <filename>classRuler.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Orientation</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>aa50e16ab1a754e6558a58c346d07b297</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HORIZONTAL</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>aa50e16ab1a754e6558a58c346d07b297a78e414968db3923b863b669dac9cfe07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERTICAL</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>aa50e16ab1a754e6558a58c346d07b297a22152cdd7245bf5ee0fe9f77d3b7ac7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Ruler &gt;</type>
      <name>Ptr</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a6e5db0a48252c9b6bb7e78893eeb485c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HORIZONTAL</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>aa50e16ab1a754e6558a58c346d07b297a78e414968db3923b863b669dac9cfe07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERTICAL</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>aa50e16ab1a754e6558a58c346d07b297a22152cdd7245bf5ee0fe9f77d3b7ac7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Ruler</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>adfd931f9040a611cdc8f7bc75c819c60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ruler</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a55c84ac3d985f64e16e225cf3f9cda01</anchor>
      <arglist>(const Ruler &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ruler</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a3f8f2789fe52b51d522c871883be7097</anchor>
      <arglist>(Ruler &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Ruler</type>
      <name>operator=</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>ac574fd831b34ec382e48b1687ed34c68</anchor>
      <arglist>(const Ruler &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Ruler</type>
      <name>operator=</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a6f285b011122ac23c475a0f6c47b2fe9</anchor>
      <arglist>(Ruler &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>afde932485d66440997c6e72822bb79ad</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a39b55be3df3b381b312a716112923afc</anchor>
      <arglist>(Orientation orientation, GtkWidget *drawArea)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Ruler</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a3edb9e827855ce558712d1c594c6cd12</anchor>
      <arglist>(RulerDrawStrategy::Ptr strategy, GtkWidget *drawingArea)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a4b206cbfe60e820ec599aabe8bd1eff8</anchor>
      <arglist>(GtkWidget *widget, cairo_t *cr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateAllocatedSize</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>ae7ccb54f39cb2bbe2e8119e5621034be</anchor>
      <arglist>(int newWidth, int newHeight)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateMajorTickInterval</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>ae35d5489f8ddd9cfb2faf73926d7dd2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>drawTicks</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a627f4b9a16378af7bdd87f00d8da84d0</anchor>
      <arglist>(cairo_t *cr, double lower, double upper, double lineLength)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>drawSingleTick</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a2a2c9b820a3b0f1ad76d4d26c36bc99b</anchor>
      <arglist>(cairo_t *cr, double linePosition, double lineLength, bool drawLabel, const std::string &amp;label)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>drawSubTicks</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a53568383844d4251c0d2a2092932c6f4</anchor>
      <arglist>(cairo_t *cr, double lower, double upper, int depth, double lineLength)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static gboolean</type>
      <name>drawCallback</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a24acbbd99042d3584816d95066006405</anchor>
      <arglist>(GtkWidget *widget, cairo_t *cr, gpointer data)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>sizeAllocateCallback</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>ae6817ada8b5be672f2239dfd190d65d7</anchor>
      <arglist>(GtkWidget *widget, GdkRectangle *allocation, gpointer data)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkWidget *</type>
      <name>drawingArea</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>ab3b0d722ba8827787a4526d7ff0fc829</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>lowerLimit</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a107de9778df1f95f82944b8f45185c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>upperLimit</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>aa02129ddefdebc3cfe88fda349c4d837</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>width</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a071b935fde8dd27f35af1b26f3517908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>height</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a26afab93bcfb4e43f06cfa0935260b0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>majorInterval</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a1e3c4ee615c51b20ca85f1e7d7933098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>majorTickSpacing</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a7dbda68d2ca6ccf1056ecaf1396764f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RulerDrawStrategy::Ptr</type>
      <name>drawStrategy</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>acdcfdcce72f41f367ae8c514ee69164a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GdkRGBA</type>
      <name>lineColor</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a57bd7fcddc394c957e220723d9bf0bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr double</type>
      <name>DEFAULT_LOWER</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>af4db136411e7f30f8bf4ed7be69aa2d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr double</type>
      <name>DEFAULT_UPPER</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>aad7386c0c0e3a151776ee69f26fc121b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>constexpr static std::array&lt; int, 2 &gt;</type>
      <name>SUBTICK_SEGMENTS</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>aadea6da631f034c30b1eca919c3ab7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr int</type>
      <name>MIN_SPACE_SUBTICKS</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a22dae1b3a3286853b2f84ee399a27527</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr double</type>
      <name>FONT_SIZE</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>ac9c7b36e2f1898907f3509526e919f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr double</type>
      <name>LABEL_OFFSET</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>af60892a2a54b170d50f6a40b8d05fc5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr double</type>
      <name>LABEL_ALIGN</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>ad0bdffb4a24f0bf7b6fc9d3f7aca1142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr double</type>
      <name>LINE_MULTIPLIER</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a56190cdaefe8b8e5a2942303bc0941b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr double</type>
      <name>LINE_WIDTH</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a5078dd452066f367176e06b2fbbe5073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constexpr double</type>
      <name>MAJOR_TICK_LENGTH</name>
      <anchorfile>classRuler.html</anchorfile>
      <anchor>a2fa732565f32ab44a44def549b9bb3a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RulerCalculations</name>
    <filename>classRulerCalculations.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>calculateInterval</name>
      <anchorfile>classRulerCalculations.html</anchorfile>
      <anchor>a4157b201d3bd2dafa693a3065b66e8ec</anchor>
      <arglist>(double lower, double upper, double allocatedSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>intervalPixelSpacing</name>
      <anchorfile>classRulerCalculations.html</anchorfile>
      <anchor>a85716bd2a71013c497de7491a386ffb8</anchor>
      <arglist>(double interval, double lower, double upper, double allocatedSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>firstTick</name>
      <anchorfile>classRulerCalculations.html</anchorfile>
      <anchor>a608b90cb4acea413e55d72db4e7d6119</anchor>
      <arglist>(double lower, int interval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>scaleToRange</name>
      <anchorfile>classRulerCalculations.html</anchorfile>
      <anchor>a31dce62e8d507c4e378dfc3eb984547e</anchor>
      <arglist>(double x, double src_lower, double src_upper, double dest_lower, double dest_upper)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>MIN_SPACE_MAJORTICKS</name>
      <anchorfile>classRulerCalculations.html</anchorfile>
      <anchor>a6343b83f16dafe9084e9bf680d92014c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>constexpr static std::array&lt; int, 4 &gt;</type>
      <name>VALID_INTERVALS</name>
      <anchorfile>classRulerCalculations.html</anchorfile>
      <anchor>ab70ce2e8b064abd0391bdb3ce84b8f75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RulerDrawStrategy</name>
    <filename>classRulerDrawStrategy.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; RulerDrawStrategy &gt;</type>
      <name>Ptr</name>
      <anchorfile>classRulerDrawStrategy.html</anchorfile>
      <anchor>af94e170f63a6be7b5b00117b66821faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMajorTickLength</name>
      <anchorfile>classRulerDrawStrategy.html</anchorfile>
      <anchor>a2718741e066870d299fded7663455002</anchor>
      <arglist>(double percentage)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getDrawAreaSize</name>
      <anchorfile>classRulerDrawStrategy.html</anchorfile>
      <anchor>aac33ccfdc090b0ec636498df4694b921</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawOutline</name>
      <anchorfile>classRulerDrawStrategy.html</anchorfile>
      <anchor>aaf5912479ed615d897705ba346becc5b</anchor>
      <arglist>(cairo_t *cr, double lineWidth)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawTickLine</name>
      <anchorfile>classRulerDrawStrategy.html</anchorfile>
      <anchor>a68d18a5de72440ae64d749ccdf7767bf</anchor>
      <arglist>(cairo_t *cr, double linePosition, double lineWidth, double lineLength)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawTickText</name>
      <anchorfile>classRulerDrawStrategy.html</anchorfile>
      <anchor>ab901f521ea9fecd6fecfe480b088bb43</anchor>
      <arglist>(cairo_t *cr, const std::string &amp;label, double linePosition, double labelOffset, double labelAlign, double lineLength)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllocatedSize</name>
      <anchorfile>classRulerDrawStrategy.html</anchorfile>
      <anchor>acb1e54f90387e830628bda250cd41c08</anchor>
      <arglist>(int newWidth, int height)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWidth</name>
      <anchorfile>classRulerDrawStrategy.html</anchorfile>
      <anchor>aa8a29fa3c28ddddd2e4b479bdeb981d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeight</name>
      <anchorfile>classRulerDrawStrategy.html</anchorfile>
      <anchor>ada0eabd47392a75006eb4a003805f2d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static constexpr double</type>
      <name>LINE_COORD_OFFSET</name>
      <anchorfile>classRulerDrawStrategy.html</anchorfile>
      <anchor>a1375f14047613a51f6abf54d17831b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static constexpr double</type>
      <name>TEXT_ANCHOR</name>
      <anchorfile>classRulerDrawStrategy.html</anchorfile>
      <anchor>af4046291157c3336456813ab412f2d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>width</name>
      <anchorfile>classRulerDrawStrategy.html</anchorfile>
      <anchor>a92e347908c7bbbd10db4eb57137e4848</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>height</name>
      <anchorfile>classRulerDrawStrategy.html</anchorfile>
      <anchor>a4ac682d4b2d3e5f739c968a0fe9e800d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Bitmap::SampleIterator</name>
    <filename>classScroom_1_1Bitmap_1_1SampleIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename std::remove_const&lt; ConstBase &gt;::type</type>
      <name>Base</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>afd55ab9282ce82f18f529e5d590d663f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleIterator</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>adfee8eaeb7b7383396a533b4c4b0f82e</anchor>
      <arglist>(ConstBase *base, int offset=0, int bps_=1)</arglist>
    </member>
    <member kind="function">
      <type>Base</type>
      <name>get</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>a0d69ab50c30d838fefeb141a546c1120</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>a6dddb604ef3669fd04851f91645b8840</anchor>
      <arglist>(ConstBase value)</arglist>
    </member>
    <member kind="function">
      <type>SampleIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>ad8c132c01655d180a947077337ed46aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SampleIterator</type>
      <name>operator++</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>aa9f579c5fae140309ebbb7117b7ee212</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>SampleIterator &amp;</type>
      <name>operator+=</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>a34680de963644fbbd1894196ca2d7736</anchor>
      <arglist>(unsigned int x)</arglist>
    </member>
    <member kind="function">
      <type>Base</type>
      <name>operator*</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>adb32faa5e8438c1905c620f3fadcfa6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>afedc31f1aa4db6198eefbe5d9952df73</anchor>
      <arglist>(const SampleIterator&lt; ConstBase &gt; &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bps</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>a4ff8eac9c539fc4d054aee59a67e3e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>samplesPerBase</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>af92761c58aa8b640e0a8cfc1c324b0b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>pixelOffset</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>a9bbc5202d0d2ae494a4167c31e49bdd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ConstBase</type>
      <name>pixelMask</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>acf324bdbc012551b9ef7d5c9c0e0dbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstBase *</type>
      <name>currentBase</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>ae6f07d4ec58d43ef6fb014a105a24d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>currentOffset</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>a992f5f28bafb677070cd9853e77ce638</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>bitsPerBase</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>a206a33fab2247db4ec53460938b8287f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SampleIterator</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>acf90826e2b9857a2ea9364ea1f7aebe7</anchor>
      <arglist>(div_t d, ConstBase *base, int bps_)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static Base</type>
      <name>mask</name>
      <anchorfile>classScroom_1_1Bitmap_1_1SampleIterator.html</anchorfile>
      <anchor>acef5bd0d8bb2a49b0d944f5220d56afe</anchor>
      <arglist>(int bps)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScroomInterface</name>
    <filename>classScroomInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ScroomInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroomInterface.html</anchorfile>
      <anchor>a3dd75855d8c3ebde7c35748e8446185b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PresentationInterface::Ptr</type>
      <name>newPresentation</name>
      <anchorfile>classScroomInterface.html</anchorfile>
      <anchor>aed7caaa94ec238cf7d352cb718235a39</anchor>
      <arglist>(const std::string &amp;name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Aggregate::Ptr</type>
      <name>newAggregate</name>
      <anchorfile>classScroomInterface.html</anchorfile>
      <anchor>a3bbde7b2d7044b4214a8bdd4ee3611da</anchor>
      <arglist>(const std::string &amp;name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PresentationInterface::Ptr</type>
      <name>loadPresentation</name>
      <anchorfile>classScroomInterface.html</anchorfile>
      <anchor>a460d9044df7869ffb64165430e323606</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;relativeTo=std::string())=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>showPresentation</name>
      <anchorfile>classScroomInterface.html</anchorfile>
      <anchor>a274e02fa58dba1a1d21e6e87805db37e</anchor>
      <arglist>(PresentationInterface::Ptr const &amp;presentation)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScroomInterfaceImpl</name>
    <filename>classScroomInterfaceImpl.html</filename>
    <base>ScroomInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ScroomInterfaceImpl &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroomInterfaceImpl.html</anchorfile>
      <anchor>a0ed3e7f4f758a8679891703a23453ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PresentationInterface::Ptr</type>
      <name>newPresentation</name>
      <anchorfile>classScroomInterfaceImpl.html</anchorfile>
      <anchor>a47ad218fdfeccd1cc02d5a367002eb66</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>Aggregate::Ptr</type>
      <name>newAggregate</name>
      <anchorfile>classScroomInterfaceImpl.html</anchorfile>
      <anchor>a03e8960134ad1751d8cdea1887a73568</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>PresentationInterface::Ptr</type>
      <name>loadPresentation</name>
      <anchorfile>classScroomInterfaceImpl.html</anchorfile>
      <anchor>ac5e63a3b28ce8d73746609cb903d02be</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;relativeTo=std::string()) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showPresentation</name>
      <anchorfile>classScroomInterfaceImpl.html</anchorfile>
      <anchor>a0619433d662056ef32b8f99d77cb17ee</anchor>
      <arglist>(PresentationInterface::Ptr const &amp;presentation) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>instance</name>
      <anchorfile>classScroomInterfaceImpl.html</anchorfile>
      <anchor>a3e8a5e572e1df0329737e382521166f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ScroomInterfaceImpl</name>
      <anchorfile>classScroomInterfaceImpl.html</anchorfile>
      <anchor>a776cc57e01b5fb3c3b1b3499c227b85a</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScroomPluginInterface</name>
    <filename>classScroomPluginInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ScroomPluginInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroomPluginInterface.html</anchorfile>
      <anchor>a6e0ed7f6a54320b7038f68623006687e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerNewPresentationInterface</name>
      <anchorfile>classScroomPluginInterface.html</anchorfile>
      <anchor>ac4cc132e4616196f55783a8c9911ad5d</anchor>
      <arglist>(const std::string &amp;identifier, NewPresentationInterface::Ptr newPresentationInterface)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerNewAggregateInterface</name>
      <anchorfile>classScroomPluginInterface.html</anchorfile>
      <anchor>ae695a416b703bf195830fde9d1850ef1</anchor>
      <arglist>(const std::string &amp;identifier, NewAggregateInterface::Ptr newAggregateInterface)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerOpenPresentationInterface</name>
      <anchorfile>classScroomPluginInterface.html</anchorfile>
      <anchor>ae9fb29cc2661840ad2053a88eb2d6748</anchor>
      <arglist>(const std::string &amp;identifier, OpenPresentationInterface::Ptr openPresentationInterface)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerOpenTiledBitmapInterface</name>
      <anchorfile>classScroomPluginInterface.html</anchorfile>
      <anchor>aab32873f311f24d79458b8093f64ac7d</anchor>
      <arglist>(const std::string &amp;identifier, std::shared_ptr&lt; Scroom::TiledBitmap::OpenTiledBitmapInterface &gt; openTiledBitmapInterface)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerOpenInterface</name>
      <anchorfile>classScroomPluginInterface.html</anchorfile>
      <anchor>aa8c064c4635f01c41a24abf631c682a3</anchor>
      <arglist>(const std::string &amp;identifier, OpenInterface::Ptr openInterface)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerViewObserver</name>
      <anchorfile>classScroomPluginInterface.html</anchorfile>
      <anchor>ad65598609a6044b1b89ece482fe07bb0</anchor>
      <arglist>(const std::string &amp;identifier, ViewObserver::Ptr observer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerPresentationObserver</name>
      <anchorfile>classScroomPluginInterface.html</anchorfile>
      <anchor>a32a3ca5f7e93f1fbc3c18bd4d2409d17</anchor>
      <arglist>(const std::string &amp;identifier, PresentationObserver::Ptr observer)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::Segment</name>
    <filename>classScroom_1_1Utils_1_1Segment.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a052060aee22c9a2d881afaa7450370ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Segment</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a72105b3913b1afea17fa50fb7ddaeb3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Segment</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a9c50a43e72c7ecd4ea28afd45db639d4</anchor>
      <arglist>(value_type start_, value_type size_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Segment</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>af75ef465271edf08af56e64671691df4</anchor>
      <arglist>(typename std::enable_if&lt;!T_is_int, Segment&lt; int &gt; const &amp; &gt;::type other)</arglist>
    </member>
    <member kind="function">
      <type>Segment</type>
      <name>moveTo</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>aee92c34e23b51b652fbff9f926df4365</anchor>
      <arglist>(value_type p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a812be475d7510f283272c03349002473</anchor>
      <arglist>(value_type p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>aef1bd55a2e114e386583311f2462e495</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a92f042e643fa44763cce83fdcadc596f</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceSizeToMultipleOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>af4df6c3f7b52137f6f46fa9e71f9d738</anchor>
      <arglist>(value_type m)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt;</type>
      <name>intersection</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a261f1b96f10fb5722d7a829ba7705b8b</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersect</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a058c64d4c5298325d97e08306372bd7c</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt;</type>
      <name>before</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>ade8df3359fab72e4ccb28f022e361a2e</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt;</type>
      <name>after</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a9adfac9c1672135c816b5ec3349c7e16</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getStart</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a934a0a56d270e8d4fc4ceddb4dc7fb82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getEnd</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a671e0c8614114bf5eb99afd36a2dddc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getSize</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>abd475ea75311ffaed7e8175125d2d3b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a3ccc0b3193fcff305a0bec13424fdc4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a10aa44ca7701af36d45fc5b1755fe69e</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a2b3149e7915a0d4990b00340a0a8584f</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a157008b0aacc9fcad63d9d763505346e</anchor>
      <arglist>(value_type n)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a48d2f727470b81853856b765c930bb6e</anchor>
      <arglist>(value_type n)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a806b6fa3736535b7eb9213771df11f4c</anchor>
      <arglist>(value_type n)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a6364e0b4fb33b4b6590bd5dbe5e407ab</anchor>
      <arglist>(value_type n)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a3abab5f3507fa65ffc6c369e2b12f5eb</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a6192ab81f7c31fa85fe3f87074d6e7a2</anchor>
      <arglist>(value_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a0ae4e45bebe6e212dd6f4b6d06e8fdb4</anchor>
      <arglist>(value_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnd</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a98fd542639fe9411293029487bbc2ab0</anchor>
      <arglist>(value_type n)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; U &gt;</type>
      <name>to</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>aa2714ce7e32028ba9a1a6a0fc90aee78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>aa3415b3b3cc8f607a25b3aad79221441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>start</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a990ac5fc3adae34671e1c92a2ed735a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>size</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a35c0fbb0e74dd156bb14da567a6b3177</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Segment&lt; value_type &gt;</name>
    <filename>classScroom_1_1Utils_1_1Segment.html</filename>
    <member kind="typedef">
      <type>value_type</type>
      <name>value_type</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a052060aee22c9a2d881afaa7450370ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Segment</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a72105b3913b1afea17fa50fb7ddaeb3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Segment</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a9c50a43e72c7ecd4ea28afd45db639d4</anchor>
      <arglist>(value_type start_, value_type size_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Segment</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>af75ef465271edf08af56e64671691df4</anchor>
      <arglist>(typename std::enable_if&lt;!T_is_int, Segment&lt; int &gt; const &amp; &gt;::type other)</arglist>
    </member>
    <member kind="function">
      <type>Segment</type>
      <name>moveTo</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>aee92c34e23b51b652fbff9f926df4365</anchor>
      <arglist>(value_type p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a812be475d7510f283272c03349002473</anchor>
      <arglist>(value_type p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>aef1bd55a2e114e386583311f2462e495</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a92f042e643fa44763cce83fdcadc596f</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceSizeToMultipleOf</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>af4df6c3f7b52137f6f46fa9e71f9d738</anchor>
      <arglist>(value_type m)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt;</type>
      <name>intersection</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a261f1b96f10fb5722d7a829ba7705b8b</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersect</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a058c64d4c5298325d97e08306372bd7c</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt;</type>
      <name>before</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>ade8df3359fab72e4ccb28f022e361a2e</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt;</type>
      <name>after</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a9adfac9c1672135c816b5ec3349c7e16</anchor>
      <arglist>(value_type v) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getStart</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a934a0a56d270e8d4fc4ceddb4dc7fb82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getEnd</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a671e0c8614114bf5eb99afd36a2dddc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getSize</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>abd475ea75311ffaed7e8175125d2d3b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a3ccc0b3193fcff305a0bec13424fdc4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a10aa44ca7701af36d45fc5b1755fe69e</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a2b3149e7915a0d4990b00340a0a8584f</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a157008b0aacc9fcad63d9d763505346e</anchor>
      <arglist>(value_type n)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a48d2f727470b81853856b765c930bb6e</anchor>
      <arglist>(value_type n)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a806b6fa3736535b7eb9213771df11f4c</anchor>
      <arglist>(value_type n)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a6364e0b4fb33b4b6590bd5dbe5e407ab</anchor>
      <arglist>(value_type n)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; value_type &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a3abab5f3507fa65ffc6c369e2b12f5eb</anchor>
      <arglist>(const Segment&lt; value_type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a6192ab81f7c31fa85fe3f87074d6e7a2</anchor>
      <arglist>(value_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a0ae4e45bebe6e212dd6f4b6d06e8fdb4</anchor>
      <arglist>(value_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnd</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a98fd542639fe9411293029487bbc2ab0</anchor>
      <arglist>(value_type n)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; U &gt;</type>
      <name>to</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>aa2714ce7e32028ba9a1a6a0fc90aee78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>aa3415b3b3cc8f607a25b3aad79221441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>start</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a990ac5fc3adae34671e1c92a2ed735a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>size</name>
      <anchorfile>classScroom_1_1Utils_1_1Segment.html</anchorfile>
      <anchor>a35c0fbb0e74dd156bb14da567a6b3177</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Selection</name>
    <filename>structSelection.html</filename>
    <member kind="typedef">
      <type>Scroom::Utils::Point&lt; double &gt;</type>
      <name>Point</name>
      <anchorfile>structSelection.html</anchorfile>
      <anchor>a4e7367d472df3823f62cc7519d83e94a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Selection</name>
      <anchorfile>structSelection.html</anchorfile>
      <anchor>a2402d3bb655e890607ba4552fdd6dedb</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Selection</name>
      <anchorfile>structSelection.html</anchorfile>
      <anchor>a826586b1cc1b40a03307b6bad5d2d3ff</anchor>
      <arglist>(Point point)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Selection</name>
      <anchorfile>structSelection.html</anchorfile>
      <anchor>a2af2ee0919e785daebf786fb8e6a66b2</anchor>
      <arglist>(Point start_, Point end_)</arglist>
    </member>
    <member kind="function">
      <type>Selection &amp;</type>
      <name>operator=</name>
      <anchorfile>structSelection.html</anchorfile>
      <anchor>ad4f15053085ff3321deb6e4bf18ef43c</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>width</name>
      <anchorfile>structSelection.html</anchorfile>
      <anchor>a9c9dec2ae8c7eb3bedd9b6379ada05d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>height</name>
      <anchorfile>structSelection.html</anchorfile>
      <anchor>a7d704930f3054ec384530cfbcb54c31d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>structSelection.html</anchorfile>
      <anchor>a400e9fb58887a04db35e354741aa96ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>start</name>
      <anchorfile>structSelection.html</anchorfile>
      <anchor>a50bd5df2fa244b0046b233d550703384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>end</name>
      <anchorfile>structSelection.html</anchorfile>
      <anchor>a00198881d8329d0ba00c777c7c4e4af5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SelectionListener</name>
    <filename>classSelectionListener.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; SelectionListener &gt;</type>
      <name>Ptr</name>
      <anchorfile>classSelectionListener.html</anchorfile>
      <anchor>af666d237e6c0cdf31a2d6169b2d3a9cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getSelectionType</name>
      <anchorfile>classSelectionListener.html</anchorfile>
      <anchor>a75202e0537d8ffff57fbbc4a10d3de1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>onSelectionStart</name>
      <anchorfile>classSelectionListener.html</anchorfile>
      <anchor>a9d469a2d0fe0fc4801701b62c12e96bf</anchor>
      <arglist>(Selection selection, std::shared_ptr&lt; ViewInterface &gt; view)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>onSelectionUpdate</name>
      <anchorfile>classSelectionListener.html</anchorfile>
      <anchor>a9dc66c67dd0a8ecbb889dd61bf094ec4</anchor>
      <arglist>(Selection selection, std::shared_ptr&lt; ViewInterface &gt; view)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>onSelectionEnd</name>
      <anchorfile>classSelectionListener.html</anchorfile>
      <anchor>a31ad704ffc7cfa203639295f6d942308</anchor>
      <arglist>(Selection selection, std::shared_ptr&lt; ViewInterface &gt; view)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Semaphore</name>
    <filename>classScroom_1_1Semaphore.html</filename>
    <member kind="function">
      <type></type>
      <name>Semaphore</name>
      <anchorfile>classScroom_1_1Semaphore.html</anchorfile>
      <anchor>a952fd31a50ea3e120136aa38a597d46b</anchor>
      <arglist>(unsigned int count=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>P</name>
      <anchorfile>classScroom_1_1Semaphore.html</anchorfile>
      <anchor>a43987b367117fad4b96cebf66d6b4eae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>V</name>
      <anchorfile>classScroom_1_1Semaphore.html</anchorfile>
      <anchor>a7288ef73832e54d1d7cc36d434ae8b47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>P</name>
      <anchorfile>classScroom_1_1Semaphore.html</anchorfile>
      <anchor>a9bbaee0b470d62b78a68af579b6b0a86</anchor>
      <arglist>(duration_type const &amp;rel_time)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_P</name>
      <anchorfile>classScroom_1_1Semaphore.html</anchorfile>
      <anchor>abe1710f776442562cb3a7ead40be9d26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>count</name>
      <anchorfile>classScroom_1_1Semaphore.html</anchorfile>
      <anchor>a2107f64e3e92b9c902c04ba0affa44a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::condition_variable</type>
      <name>cond</name>
      <anchorfile>classScroom_1_1Semaphore.html</anchorfile>
      <anchor>a18404ef8e0fe922b390a304f8a61f810</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classScroom_1_1Semaphore.html</anchorfile>
      <anchor>a1cc9aa43ff5f1cffad53d65232263c2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShowMetadataInterface</name>
    <filename>classShowMetadataInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ShowMetadataInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classShowMetadataInterface.html</anchorfile>
      <anchor>a9ec0e57345be0dfe24e1e48148f6575d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>showMetadata</name>
      <anchorfile>classShowMetadataInterface.html</anchorfile>
      <anchor>a0cfca83af258e923b84ac898fee150f0</anchor>
      <arglist>(GtkWindow *parent)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SidebarManager</name>
    <filename>classSidebarManager.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setWidgets</name>
      <anchorfile>classSidebarManager.html</anchorfile>
      <anchor>ab6f09410682d37810e9f8d8476a50485</anchor>
      <arglist>(GtkWidget *panelWindow, GtkBox *panel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSideWidget</name>
      <anchorfile>classSidebarManager.html</anchorfile>
      <anchor>af0fc4216c154fa1379c593c137afa865</anchor>
      <arglist>(const std::string &amp;title, GtkWidget *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSideWidget</name>
      <anchorfile>classSidebarManager.html</anchorfile>
      <anchor>ad55b76bd7930ee36b08f6962bad0b92d</anchor>
      <arglist>(GtkWidget *w)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkWidget *</type>
      <name>panelWindow</name>
      <anchorfile>classSidebarManager.html</anchorfile>
      <anchor>aa33d6b146af35805e7327b5b44a96325</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkBox *</type>
      <name>panel</name>
      <anchorfile>classSidebarManager.html</anchorfile>
      <anchor>a6f7a8fc05bd3f63817db6d463d27a2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; GtkWidget *, GtkWidget * &gt;</type>
      <name>widgets</name>
      <anchorfile>classSidebarManager.html</anchorfile>
      <anchor>af0dbdadde464305fa2234da905494438</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SizeDeterminer</name>
    <filename>classSizeDeterminer.html</filename>
    <class kind="class">SizeDeterminer::PresentationData</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; SizeDeterminer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classSizeDeterminer.html</anchorfile>
      <anchor>a54ada7e9442856ab545fa2db4bd58f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSizeDeterminer.html</anchorfile>
      <anchor>a00d286032b6986d3c0ff299d855e7b4c</anchor>
      <arglist>(PresentationInterface::Ptr const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>getRect</name>
      <anchorfile>classSizeDeterminer.html</anchorfile>
      <anchor>ac91840b2bd2dcdc1bb5a6bdcfe412fe1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classSizeDeterminer.html</anchorfile>
      <anchor>a77109055bebbd00f4246a4edfc4a7a3a</anchor>
      <arglist>(PresentationInterface::Ptr const &amp;p, ViewInterface::WeakPtr const &amp;vi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classSizeDeterminer.html</anchorfile>
      <anchor>a12c08750ab3df3e68032241685a17073</anchor>
      <arglist>(PresentationInterface::Ptr const &amp;p, ViewInterface::WeakPtr const &amp;vi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classSizeDeterminer.html</anchorfile>
      <anchor>a0f0610e3652ae288f181b7b48ee2fb66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SizeDeterminer</name>
      <anchorfile>classSizeDeterminer.html</anchorfile>
      <anchor>a7cc1085176cbbbc99270d506ecfe9c5b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendUpdates</name>
      <anchorfile>classSizeDeterminer.html</anchorfile>
      <anchor>ad6d8c41f087229e532b930666bd46780</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; PresentationInterface::Ptr &gt;</type>
      <name>presentations</name>
      <anchorfile>classSizeDeterminer.html</anchorfile>
      <anchor>a8e123a6bcf879916496e7e43a646aa2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; PresentationInterface::Ptr, PresentationData &gt;</type>
      <name>resizablePresentationData</name>
      <anchorfile>classSizeDeterminer.html</anchorfile>
      <anchor>a4c2fe9912d7195cb42b139942d8eccf6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Sleeper</name>
    <filename>classSleeper.html</filename>
    <member kind="function">
      <type></type>
      <name>Sleeper</name>
      <anchorfile>classSleeper.html</anchorfile>
      <anchor>a717e33fd766bcf7f9f74893328b1a659</anchor>
      <arglist>(unsigned int secs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classSleeper.html</anchorfile>
      <anchor>aea2c5c7b180f1b3a3509a352de0327a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>secs</name>
      <anchorfile>classSleeper.html</anchorfile>
      <anchor>a676f9b7b088050929d356d641e5554c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>started</name>
      <anchorfile>classSleeper.html</anchorfile>
      <anchor>a4aece6a48ca30761696b05b0bc40f8f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>struct timespec</type>
      <name>t</name>
      <anchorfile>classSleeper.html</anchorfile>
      <anchor>ab6a86bb808da7f548da4e7276c2da9f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Tiff::Source</name>
    <filename>classScroom_1_1Tiff_1_1Source.html</filename>
    <base>SourcePresentation</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Source &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Tiff_1_1Source.html</anchorfile>
      <anchor>afb3aa33e6d8eca07c52dd986e5c9d71b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reset</name>
      <anchorfile>classScroom_1_1Tiff_1_1Source.html</anchorfile>
      <anchor>a84c9977f6b72b09e3432f7e41638b968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillTiles</name>
      <anchorfile>classScroom_1_1Tiff_1_1Source.html</anchorfile>
      <anchor>aeacc7ab5c8d2e4f67c763f92ba5f2b6e</anchor>
      <arglist>(int startLine, int lineCount, int tileWidth, int firstTile, std::vector&lt; Tile::Ptr &gt; &amp;tiles) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>done</name>
      <anchorfile>classScroom_1_1Tiff_1_1Source.html</anchorfile>
      <anchor>aea18cd0d4263ecdb2db438bf664ee5db</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classScroom_1_1Tiff_1_1Source.html</anchorfile>
      <anchor>ae9db526d2b02a92f819240f7ceb66ff1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Tiff_1_1Source.html</anchorfile>
      <anchor>a49da98518e5c851125bb25d68c6444b1</anchor>
      <arglist>(std::string fileName, TIFFPtr tif, BitmapMetaData bmd)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Source</name>
      <anchorfile>classScroom_1_1Tiff_1_1Source.html</anchorfile>
      <anchor>a638549959b992a54ebcf45b941c6357c</anchor>
      <arglist>(std::string fileName, TIFFPtr tif, BitmapMetaData bmd)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>fileName</name>
      <anchorfile>classScroom_1_1Tiff_1_1Source.html</anchorfile>
      <anchor>a5515f82ee6c27aa5a9df1a1d7f647b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TIFFPtr</type>
      <name>preOpenedTif</name>
      <anchorfile>classScroom_1_1Tiff_1_1Source.html</anchorfile>
      <anchor>ae655907cd18a9487c589fe1962273100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TIFFPtr</type>
      <name>tif</name>
      <anchorfile>classScroom_1_1Tiff_1_1Source.html</anchorfile>
      <anchor>a5666b3e44b95672cf088a7523f76eff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BitmapMetaData</type>
      <name>bmd</name>
      <anchorfile>classScroom_1_1Tiff_1_1Source.html</anchorfile>
      <anchor>a776d232f4f62f2f22663562cf51a51bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Source1Bpp</name>
    <filename>classSource1Bpp.html</filename>
    <base>SourcePresentation</base>
    <member kind="function">
      <type>void</type>
      <name>fillTiles</name>
      <anchorfile>classSource1Bpp.html</anchorfile>
      <anchor>a36dfa6a9533ce8e4e95ad0a690cf6f47</anchor>
      <arglist>(int startLine, int lineCount, int tileWidth, int firstTile, std::vector&lt; Tile::Ptr &gt; &amp;tiles) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>done</name>
      <anchorfile>classSource1Bpp.html</anchorfile>
      <anchor>a39b0242a41724a3bfd4bf62fc3bf7f87</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classSource1Bpp.html</anchorfile>
      <anchor>a50a6154d3eea290e37b711f9020670d6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Source2Bpp</name>
    <filename>classSource2Bpp.html</filename>
    <base>SourcePresentation</base>
    <member kind="function">
      <type>void</type>
      <name>fillTiles</name>
      <anchorfile>classSource2Bpp.html</anchorfile>
      <anchor>a215755292825f636b4d93be4e94ad221</anchor>
      <arglist>(int startLine, int lineCount, int tileWidth, int firstTile, std::vector&lt; Tile::Ptr &gt; &amp;tiles) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>done</name>
      <anchorfile>classSource2Bpp.html</anchorfile>
      <anchor>a07ce3678fb4ba2bc616c688ad2a10c73</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classSource2Bpp.html</anchorfile>
      <anchor>ab47da87646b895c232607d1165f2b1df</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Source4Bpp</name>
    <filename>classSource4Bpp.html</filename>
    <base>SourcePresentation</base>
    <member kind="function">
      <type>void</type>
      <name>fillTiles</name>
      <anchorfile>classSource4Bpp.html</anchorfile>
      <anchor>acd85da064952c791c1acb2330c0a45a8</anchor>
      <arglist>(int startLine, int lineCount, int tileWidth, int firstTile, std::vector&lt; Tile::Ptr &gt; &amp;tiles) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>done</name>
      <anchorfile>classSource4Bpp.html</anchorfile>
      <anchor>ad5b6c24aad7949073bc78af1f41af006</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classSource4Bpp.html</anchorfile>
      <anchor>aa6f11ce5b32d0e77a0a62b5afe218fe7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Source8Bpp</name>
    <filename>classSource8Bpp.html</filename>
    <base>SourcePresentation</base>
    <member kind="function">
      <type>void</type>
      <name>fillTiles</name>
      <anchorfile>classSource8Bpp.html</anchorfile>
      <anchor>a85c9908aa9912fe7a63fd41dafff7afd</anchor>
      <arglist>(int startLine, int lineCount, int tileWidth, int firstTile, std::vector&lt; Tile::Ptr &gt; &amp;tiles) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>done</name>
      <anchorfile>classSource8Bpp.html</anchorfile>
      <anchor>afbea2daf18bc2e82ad64034f50bbc1a7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classSource8Bpp.html</anchorfile>
      <anchor>a2bebf3c53bbb32e7706c9133420d25d2</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SourcePresentation</name>
    <filename>classSourcePresentation.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; SourcePresentation &gt;</type>
      <name>Ptr</name>
      <anchorfile>classSourcePresentation.html</anchorfile>
      <anchor>a7b2d8fe66f8ac185fe0aa68d98e559e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fillTiles</name>
      <anchorfile>classSourcePresentation.html</anchorfile>
      <anchor>a6858c2daa1e7a759130a5722014461d7</anchor>
      <arglist>(int startLine, int lineCount, int tileWidth, int firstTile, std::vector&lt; Tile::Ptr &gt; &amp;tiles)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>done</name>
      <anchorfile>classSourcePresentation.html</anchorfile>
      <anchor>afd0e0ab48d0b098f2d401f2ceebda539</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classSourcePresentation.html</anchorfile>
      <anchor>a71e6b0634b600198b6fe48a0fd6390fb</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::MemoryBlocks::Detail::SwapBasedBlockAllocator</name>
    <filename>classScroom_1_1MemoryBlocks_1_1Detail_1_1SwapBasedBlockAllocator.html</filename>
    <base>Scroom::MemoryBlocks::BlockInterface</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="function">
      <type>PageList</type>
      <name>getPages</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Detail_1_1SwapBasedBlockAllocator.html</anchorfile>
      <anchor>a170c77c3b27260cf40d11952a6b79ab2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BlockInterface::Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Detail_1_1SwapBasedBlockAllocator.html</anchorfile>
      <anchor>aa6b113bf9e3176551a2bf4ccf1a80744</anchor>
      <arglist>(size_t count, size_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RawPageData::Ptr</type>
      <name>get</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Detail_1_1SwapBasedBlockAllocator.html</anchorfile>
      <anchor>ad940b63bbeed2cbab4b8955ccdb32573</anchor>
      <arglist>(size_t id) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SwapBasedBlockAllocator</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Detail_1_1SwapBasedBlockAllocator.html</anchorfile>
      <anchor>a58b97109a7fe67f5ce832ed6cc6e6fde</anchor>
      <arglist>(size_t count, size_t size)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>count</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Detail_1_1SwapBasedBlockAllocator.html</anchorfile>
      <anchor>a2fab2589eeda91c7074caa31c2f15f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Detail_1_1SwapBasedBlockAllocator.html</anchorfile>
      <anchor>a78174c0875d49ce5e8421663bdfafd47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::movelib::unique_ptr&lt; uint8_t[]&gt;</type>
      <name>data</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Detail_1_1SwapBasedBlockAllocator.html</anchorfile>
      <anchor>a91690132ce1797f7054c398e2fe6c4da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::MemoryBlocks::Detail::SwapBasedBlockAllocatorFactory</name>
    <filename>classScroom_1_1MemoryBlocks_1_1Detail_1_1SwapBasedBlockAllocatorFactory.html</filename>
    <base>Scroom::MemoryBlocks::BlockFactoryInterface</base>
    <member kind="function">
      <type>BlockInterface::Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Detail_1_1SwapBasedBlockAllocatorFactory.html</anchorfile>
      <anchor>ae363b5484929b35faaf0caee98d24cdb</anchor>
      <arglist>(size_t count, size_t size) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Detail_1_1SwapBasedBlockAllocatorFactory.html</anchorfile>
      <anchor>a05fb8d669b0cbf2cfacb0e5fd3c609a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SwapBasedBlockAllocatorFactory</name>
      <anchorfile>classScroom_1_1MemoryBlocks_1_1Detail_1_1SwapBasedBlockAllocatorFactory.html</anchorfile>
      <anchor>a8f524586f109d989a7bca28e28ef38f8</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestCounted</name>
    <filename>classTestCounted.html</filename>
    <base>Counted&lt; TestCounted &gt;</base>
  </compound>
  <compound kind="class">
    <name>TestData</name>
    <filename>classTestData.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TestData &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>a67f01af02ac28a106eb5fa6eb7e567b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TestData</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>af4ed2af760afe9e61fcf5333b008b2b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TestData</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>a7fc4f79870e3f229b615f069df6bbb10</anchor>
      <arglist>(const TestData &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TestData</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>ac12212ec297559004984de3da96b8d96</anchor>
      <arglist>(TestData &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>TestData</type>
      <name>operator=</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>a7fbae245ea66f6c497fb547ee01e9eae</anchor>
      <arglist>(const TestData &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>TestData</type>
      <name>operator=</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>a7d64d95fd74e2a6f54b2082887bb382d</anchor>
      <arglist>(TestData &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redraw</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>adbce711671480aed2b96a28ec6d933b4</anchor>
      <arglist>(cairo_t *cr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>ae496d48334a42ee8fe4ea436413fdd21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>ab3a8459e33d0c556814707bbef0ce675</anchor>
      <arglist>(DummyColormapProvider::Ptr colormapProvider, const LayerSpec &amp;ls, const TiledBitmapInterface::Ptr &amp;tbi, SourcePresentation::Ptr sp, int zoom)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TestData</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>a99162f0334ea538b05900c0aaba442cd</anchor>
      <arglist>(DummyColormapProvider::Ptr colormapProvider, LayerSpec ls, const TiledBitmapInterface::Ptr &amp;tbi, SourcePresentation::Ptr sp, int zoom)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProgressInterfaceStub::Ptr</type>
      <name>pi</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>a789f64123f096b01af8a976b6c222fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ViewInterface::Ptr</type>
      <name>vi</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>aa90345181988b15e3f0f970fc27b6d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DummyColormapProvider::Ptr</type>
      <name>colormapProvider</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>afe1361994709c12c5c598ebc627f6c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LayerSpec</type>
      <name>ls</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>a1be773d4b9094ade00dd4baa145c1e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TiledBitmapInterface::Ptr</type>
      <name>tbi</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>af4d9f62f9bb83646300be32c00c3895a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SourcePresentation::Ptr</type>
      <name>sp</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>ae0f3bd5b18f618ef6d61b4cd2ef1f0de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>zoom</name>
      <anchorfile>classTestData.html</anchorfile>
      <anchor>ad6d00b1cc5e113b71446c7a4728e95d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestObservable</name>
    <filename>classTestObservable.html</filename>
    <base>Observable&lt; TestObserver &gt;</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TestObservable &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTestObservable.html</anchorfile>
      <anchor>a8d79375164049da6e49c27019f58c805</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Observer &gt;</type>
      <name>getObservers</name>
      <anchorfile>classTestObservable.html</anchorfile>
      <anchor>adc23514797077983792a985752dd907a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTestObservable.html</anchorfile>
      <anchor>ab6fb845d715cfe099089860d81ec72d2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestObserver</name>
    <filename>classTestObserver.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TestObserver &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTestObserver.html</anchorfile>
      <anchor>a40778ec9c55b881fea2f17e20c622ba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TestObserver &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classTestObserver.html</anchorfile>
      <anchor>a2c3f2670d1c8daa4e46cabcaed439088</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTestObserver.html</anchorfile>
      <anchor>aa4aaa8e9018a0238d0854be0e58fdf39</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestRecursiveObservable</name>
    <filename>classTestRecursiveObservable.html</filename>
    <base>Observable&lt; TestObserver &gt;</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TestRecursiveObservable &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTestRecursiveObservable.html</anchorfile>
      <anchor>a86a72e9feb31ddf953372b1900225e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Observer &gt;</type>
      <name>getObservers</name>
      <anchorfile>classTestRecursiveObservable.html</anchorfile>
      <anchor>a4b8c5beeeadfd7837c857b283ed16502</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTestRecursiveObservable.html</anchorfile>
      <anchor>abf7c33a9b192ec4794abb6728b45222c</anchor>
      <arglist>(TestObservable::Ptr child)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>observerAdded</name>
      <anchorfile>classTestRecursiveObservable.html</anchorfile>
      <anchor>a8a1f2fbc8615d6212c0f017aea70e6a6</anchor>
      <arglist>(Observer const &amp;observer, Scroom::Bookkeeping::Token const &amp;token) override</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TestRecursiveObservable</name>
      <anchorfile>classTestRecursiveObservable.html</anchorfile>
      <anchor>af453fcb8ad172886a1dbec7465726349</anchor>
      <arglist>(TestObservable::Ptr child)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TestObservable::Ptr</type>
      <name>child</name>
      <anchorfile>classTestRecursiveObservable.html</anchorfile>
      <anchor>a682b6ab025aae0a258b675afbe36178c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>anonymous_namespace{threadpoolimpl.cc}::ThreadList</name>
    <filename>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadList.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ThreadList &gt;</type>
      <name>Ptr</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadList.html</anchorfile>
      <anchor>add71f75d927b25e10920b33e216b808d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadList.html</anchorfile>
      <anchor>abf93f2d0fa75c03620dd3ef3763728ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadList.html</anchorfile>
      <anchor>a21055cc122e9988e7af28e8ca27ff16d</anchor>
      <arglist>(const ThreadPool::ThreadPtr &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadList.html</anchorfile>
      <anchor>a52e7912f076d142faaa8128ac028359d</anchor>
      <arglist>(const std::shared_ptr&lt; void &gt; &amp;t, const std::string &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>instance</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadList.html</anchorfile>
      <anchor>a3b3efa8982899d0fa6641a868e8cf230</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>dumpPointers</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadList.html</anchorfile>
      <anchor>aaafff3ce0a3650cd001e223613893b89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadList.html</anchorfile>
      <anchor>afd08b401ad5aca09e8e1cc8d9578aee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; ThreadPool::ThreadPtr &gt;</type>
      <name>threads</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadList.html</anchorfile>
      <anchor>ad97651e0256cc8db36501d834fff73c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; std::pair&lt; std::weak_ptr&lt; void &gt;, std::string &gt; &gt;</type>
      <name>pointers</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadList.html</anchorfile>
      <anchor>ad6be3b38d9b6337e7e927c00804baf51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadPool</name>
    <filename>classThreadPool.html</filename>
    <class kind="struct">ThreadPool::Job</class>
    <class kind="class">ThreadPool::PrivateData</class>
    <class kind="class">ThreadPool::Queue</class>
    <class kind="class">ThreadPool::WeakQueue</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ThreadPool &gt;</type>
      <name>Ptr</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>aecda99f22ede5423ab70df4517a0c4c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; boost::thread &gt;</type>
      <name>ThreadPtr</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a1b5f37ac79dadbd50c717af80f0184bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadPool</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>ab01897b158a8ed6585e7cb3788f378ac</anchor>
      <arglist>(bool completeAllJobsBeforeDestruction=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadPool</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>ad4586d49b99febcb8198feed9d904a87</anchor>
      <arglist>(int count, bool completeAllJobsBeforeDestruction=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadPool</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a8af7ebd9779dcab6e0a48f80e8962d08</anchor>
      <arglist>(const ThreadPool &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadPool</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>ad1bbb23b57e3ae24cdc7df015c49fba1</anchor>
      <arglist>(ThreadPool &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ThreadPool</type>
      <name>operator=</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a207a98b50bc64d3c35a3d784855b8ecf</anchor>
      <arglist>(const ThreadPool &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ThreadPool</type>
      <name>operator=</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>ae7dd86f29b236ee9367ea682cf33a367</anchor>
      <arglist>(ThreadPool &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreadPool</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a44d3d2ab618970605e684efc216655eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a5ceb75ca278331440e9adce284089863</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;fn, int priority=defaultPriority, const Queue::Ptr &amp;queue=defaultQueue())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a1dbb23beee5a7a9133ee2e4cf5d6ac07</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;fn, const Queue::Ptr &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>aca73885005f3a58ad686961895816ee0</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; fn, int priority=defaultPriority, const Queue::Ptr &amp;queue=defaultQueue())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a8552ac4cfbe38e71e1bf7a731f8f8fa3</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; fn, const Queue::Ptr &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a1de8df4ea4e68c8ef852dc7fdf663954</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;fn, int priority, const WeakQueue::Ptr &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a1fa231418839d0e3f183fecf1a5f3fcb</anchor>
      <arglist>(boost::function&lt; void()&gt; const &amp;fn, const WeakQueue::Ptr &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a78e48aa6d2655f66694d7d3051c7e35f</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; fn, int priority, WeakQueue::Ptr queue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>aaabc4c91f09f727b451968a9d6eeadcd</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; fn, WeakQueue::Ptr queue)</arglist>
    </member>
    <member kind="function">
      <type>boost::unique_future&lt; R &gt;</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a095515aca079f8fe2946260f13834cf0</anchor>
      <arglist>(boost::function&lt; R()&gt; const &amp;fn, int priority=defaultPriority, const Queue::Ptr &amp;queue=defaultQueue())</arglist>
    </member>
    <member kind="function">
      <type>boost::unique_future&lt; R &gt;</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a4b1ce593bf0a40324f134775853bc599</anchor>
      <arglist>(boost::function&lt; R()&gt; const &amp;fn, const Queue::Ptr &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type>boost::unique_future&lt; R &gt;</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a3c45e4658b2f7fc207499f7e0fb5fc06</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; fn, int priority=defaultPriority, const Queue::Ptr &amp;queue=defaultQueue())</arglist>
    </member>
    <member kind="function">
      <type>boost::unique_future&lt; R &gt;</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a909a1964094e2db0e24d856690f40357</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; fn, const Queue::Ptr &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type>boost::unique_future&lt; R &gt;</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a3df94a1c69866fe1094e9911d04bbee6</anchor>
      <arglist>(boost::function&lt; R()&gt; const &amp;fn, int priority, WeakQueue::Ptr queue)</arglist>
    </member>
    <member kind="function">
      <type>boost::unique_future&lt; R &gt;</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a5400bb2ce9bfb050f027d1b0d5fca1af</anchor>
      <arglist>(boost::function&lt; R()&gt; const &amp;fn, WeakQueue::Ptr queue)</arglist>
    </member>
    <member kind="function">
      <type>boost::unique_future&lt; R &gt;</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a70dd5005126cc1f871758d64e2b324a8</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; fn, int priority, WeakQueue::Ptr queue)</arglist>
    </member>
    <member kind="function">
      <type>boost::unique_future&lt; R &gt;</type>
      <name>schedule</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a51d4a7ff67792861ea0c918757e353f8</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; fn, WeakQueue::Ptr queue)</arglist>
    </member>
    <member kind="function">
      <type>ThreadPtr</type>
      <name>add</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a72b7ee59b6fd4d2266233334f9e0011b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ThreadPtr &gt;</type>
      <name>add</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a54b4280366447b498a1d08e46e305ef8</anchor>
      <arglist>(int count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadPool::Ptr</type>
      <name>create</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>aa4c7f373ae1c02455e2c7f4d2096270e</anchor>
      <arglist>(bool completeAllJobsBeforeDestruction=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadPool::Ptr</type>
      <name>create</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a01a9a8ed66255d64f64b5140d9ed1884</anchor>
      <arglist>(int count, bool completeAllJobsBeforeDestruction=false)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>work</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a9d3f75e5674e5b4b3a1afdc8a50982e4</anchor>
      <arglist>(const PrivateData::Ptr &amp;priv)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>do_one</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a8f42dc3ccb85aab2590d246490df0d9a</anchor>
      <arglist>(const PrivateData::Ptr &amp;priv)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static Queue::Ptr</type>
      <name>defaultQueue</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a7d435b8c6eff3ffcf5b9043bd50048c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; ThreadPtr &gt;</type>
      <name>threads</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a02868ba7fdf289e346b325bee1c346ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PrivateData::Ptr</type>
      <name>priv</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>a3a0c10438bec002f4d82ec26b8a22109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>defaultPriority</name>
      <anchorfile>classThreadPool.html</anchorfile>
      <anchor>ab7660f5cc0d859c25ab4b7f1038eedd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>anonymous_namespace{threadpoolimpl.cc}::ThreadWaiter</name>
    <filename>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadWaiter.html</filename>
    <member kind="function">
      <type></type>
      <name>ThreadWaiter</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadWaiter.html</anchorfile>
      <anchor>a14a147147c551446e6e747eb92ca2ba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreadWaiter</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadWaiter.html</anchorfile>
      <anchor>a64c1e6037f2c205c3f80aae7608fe74e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadWaiter</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadWaiter.html</anchorfile>
      <anchor>a99f2f465e3a5030a3de634bde57bb5c9</anchor>
      <arglist>(const ThreadWaiter &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadWaiter</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadWaiter.html</anchorfile>
      <anchor>ad6be116745e1e9712da6576af15141f1</anchor>
      <arglist>(ThreadWaiter &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ThreadWaiter</type>
      <name>operator=</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadWaiter.html</anchorfile>
      <anchor>a99ce5886c0f33708ca0d75bae56d3d3c</anchor>
      <arglist>(const ThreadWaiter &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ThreadWaiter</type>
      <name>operator=</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadWaiter.html</anchorfile>
      <anchor>a2dc6e8cf64a431b2ba35d3bcfc10c750</anchor>
      <arglist>(ThreadWaiter &amp;&amp;)=delete</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ThreadList::Ptr</type>
      <name>threadList</name>
      <anchorfile>classanonymous__namespace_02threadpoolimpl_8cc_03_1_1ThreadWaiter.html</anchorfile>
      <anchor>a0b01f8545139812908055c33497d8cb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Tiff</name>
    <filename>classTiff.html</filename>
    <base>PluginInformationInterface</base>
    <base>Scroom::TiledBitmap::OpenTiledBitmapInterface</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Tiff &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTiff.html</anchorfile>
      <anchor>a67d6f8c40c4116bd5e44f62a0c84424a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginName</name>
      <anchorfile>classTiff.html</anchorfile>
      <anchor>afde57e3be0da1f31832c2ab624ed266f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginVersion</name>
      <anchorfile>classTiff.html</anchorfile>
      <anchor>a60cdb34d44199fe7d20df2a74e6b3fe2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCapabilities</name>
      <anchorfile>classTiff.html</anchorfile>
      <anchor>a066aa165def02ec0e31d0542dd1881d1</anchor>
      <arglist>(ScroomPluginInterface::Ptr host) override</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; GtkFileFilter * &gt;</type>
      <name>getFilters</name>
      <anchorfile>classTiff.html</anchorfile>
      <anchor>a9d53ce592393c02d2c36dfc924fcb876</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; Scroom::TiledBitmap::BitmapMetaData, Layer::Ptr, Scroom::TiledBitmap::ReloadFunction &gt;</type>
      <name>open</name>
      <anchorfile>classTiff.html</anchorfile>
      <anchor>a858a1b813e95709369796e88876049dc</anchor>
      <arglist>(const std::string &amp;fileName) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTiff.html</anchorfile>
      <anchor>aaaca8783a30c4e239227f2440cf07bf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Tiff</name>
      <anchorfile>classTiff.html</anchorfile>
      <anchor>a0e8668a3c098fc31dd0ce698a4bdfdfd</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Tile</name>
    <filename>classTile.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Tile &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTile.html</anchorfile>
      <anchor>a6a7815279a6f348183c06ed6428363e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Tile &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classTile.html</anchorfile>
      <anchor>a7409f70ecca4dd2b2e30c1292d77f9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tile</name>
      <anchorfile>classTile.html</anchorfile>
      <anchor>abc586fc35e0dbdd7be992cb6d694e263</anchor>
      <arglist>(int width_, int height_, int bpp_, Scroom::MemoryBlobs::RawPageData::Ptr data_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Tile::Ptr</type>
      <name>create</name>
      <anchorfile>classTile.html</anchorfile>
      <anchor>ab17b08d3b447131b5b732ec338e9a7cb</anchor>
      <arglist>(int width, int height, int bpp, Scroom::MemoryBlobs::RawPageData::Ptr data)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>width</name>
      <anchorfile>classTile.html</anchorfile>
      <anchor>adbb086e3041864b3079bd5088dc571fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>height</name>
      <anchorfile>classTile.html</anchorfile>
      <anchor>a1ceee2a6a986af91980d62c039ffe792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bpp</name>
      <anchorfile>classTile.html</anchorfile>
      <anchor>ab2d50dfc04db90f483e89dccba17a09d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scroom::MemoryBlobs::RawPageData::Ptr</type>
      <name>data</name>
      <anchorfile>classTile.html</anchorfile>
      <anchor>a061f4d9bca0cb0f1986edf58e57ed048</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TiledBitmap</name>
    <filename>classTiledBitmap.html</filename>
    <base>TiledBitmapInterface</base>
    <base>TileInitialisationObserver</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TiledBitmap &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a1308399c58b816cbdad51f00aeb8bdb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TiledBitmap &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a18bd901e775797ee6e802ddba0613cf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scroom::Utils::WeakKeyMap&lt; ViewInterface::WeakPtr, TiledBitmapViewData::Ptr &gt;</type>
      <name>ViewDataMap</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a574c8f3aaf9f23483e9dd02500a3e39e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TiledBitmap</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a5cf6c1aec87cca3d280284ac963d6247</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiledBitmap</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>ac362c97e106dd9a7099c553783681767</anchor>
      <arglist>(const TiledBitmap &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TiledBitmap</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a0e31a158580a4737fc4bc571b30ace4e</anchor>
      <arglist>(TiledBitmap &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>TiledBitmap</type>
      <name>operator=</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a97bcef199c0c95bd63703083283a63dd</anchor>
      <arglist>(const TiledBitmap &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>TiledBitmap</type>
      <name>operator=</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a0a1a6354cbd694d8965e9c998d6678e6</anchor>
      <arglist>(TiledBitmap &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSource</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a207620c6b7460ae0e9c7425f3c4c592c</anchor>
      <arglist>(SourcePresentation::Ptr sp) override</arglist>
    </member>
    <member kind="function">
      <type>Layer::Ptr</type>
      <name>getBottomLayer</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a75f9b982627fe273f321a0643c42d300</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>ad17bc560de133e417b01d2f34d731038</anchor>
      <arglist>(ViewInterface::WeakPtr viewInterface) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>ac6c11e9ce82f6e03866c53d5d12a9ac0</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redraw</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a98c2d60fc0736a77ab18aeeb461a1da8</anchor>
      <arglist>(ViewInterface::Ptr const &amp;vi, cairo_t *cr, Scroom::Utils::Rectangle&lt; double &gt; const &amp;presentationArea, int zoom) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCaches</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a687cbfcf28714d7e58b80dec9cb73c23</anchor>
      <arglist>(ViewInterface::Ptr vi) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tileCreated</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>acf3ca8aba615305c124a2617192170a0</anchor>
      <arglist>(const CompressedTile::Ptr &amp;tile) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tileFinished</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a8a496514eadfa46c5ff2ef9f61682090</anchor>
      <arglist>(const CompressedTile::Ptr &amp;tile) override</arglist>
    </member>
    <member kind="function">
      <type>ProgressInterface::Ptr</type>
      <name>progressInterface</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>abbf313b0d61d3e746866fa45e0a8c80c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>aac0fd55f26ab59b362f0c64d27a9e139</anchor>
      <arglist>(int bitmapWidth, int bitmapHeight, LayerSpec const &amp;ls)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a2c114e65ab730b8c4afa5d7064e8070e</anchor>
      <arglist>(const Layer::Ptr &amp;bottom, const LayerSpec &amp;ls)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TiledBitmap</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a79dfef04e48f7a06ed70ac8b08295018</anchor>
      <arglist>(int bitmapWidth, int bitmapHeight, LayerSpec ls)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a0cc535a9c8809caf8c108663a62594f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a6b40bb63aa12b68f9678bb45b765b8e1</anchor>
      <arglist>(const Layer::Ptr &amp;bottom)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>connect</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a7d2051718f5b6f50e2804177d553bce8</anchor>
      <arglist>(Layer::Ptr const &amp;layer, Layer::Ptr const &amp;prevLayer, const LayerOperations::Ptr &amp;prevLo)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>drawTile</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a6254a409a4f8869cb3429c55a342cdbe</anchor>
      <arglist>(cairo_t *cr, const CompressedTile::Ptr &amp;tile, const Scroom::Utils::Rectangle&lt; double &gt; &amp;viewArea)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bitmapWidth</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a79651024b3ff749b0c3166ee717a260f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bitmapHeight</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a31a9a9922388d64cdf7e0b726b87837c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LayerSpec</type>
      <name>ls</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>ac35944ff618bf8e40335fa112598ad36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Layer::Ptr &gt;</type>
      <name>layers</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a4651ffc5e76d85693c07468ec5e19682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; LayerCoordinator::Ptr &gt;</type>
      <name>coordinators</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a742811167736f307c45103d85827cb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>viewDataMutex</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a8c2fe90358c2d097dd6212d0ba8b9081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ViewDataMap</type>
      <name>viewData</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a1321844337a934109e3552959a7347db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>tileCount</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>abec813ddb2f08f62dbacd234b21ae83f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>tileFinishedMutex</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a839c2aeeef28cee5703772c0114f5060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>tileFinishedCount</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>af7acdd49ff8f58b11473eed60733d60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::ProgressInterfaceBroadcaster::Ptr</type>
      <name>progressBroadcaster</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a47e74444f93f451d08c45cdb12a6fbe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::StuffList</type>
      <name>registrations</name>
      <anchorfile>classTiledBitmap.html</anchorfile>
      <anchor>a1c983590d74d88002c6f216d646d19c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TiledBitmapInterface</name>
    <filename>classTiledBitmapInterface.html</filename>
    <base>Viewable</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TiledBitmapInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTiledBitmapInterface.html</anchorfile>
      <anchor>a9b5ac911596ab1eadc1d5abe791a8f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSource</name>
      <anchorfile>classTiledBitmapInterface.html</anchorfile>
      <anchor>a2e02aa68f0a137cb2ec85b2412d98335</anchor>
      <arglist>(SourcePresentation::Ptr sp)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; Layer &gt;</type>
      <name>getBottomLayer</name>
      <anchorfile>classTiledBitmapInterface.html</anchorfile>
      <anchor>a9824476119398d821aa463518a5a225f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>redraw</name>
      <anchorfile>classTiledBitmapInterface.html</anchorfile>
      <anchor>a24dd76d8800fb60b066e28a3bdb57888</anchor>
      <arglist>(ViewInterface::Ptr const &amp;vi, cairo_t *cr, const Scroom::Utils::Rectangle&lt; double &gt; &amp;presentationArea, int zoom)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clearCaches</name>
      <anchorfile>classTiledBitmapInterface.html</anchorfile>
      <anchor>a4e53a7165efc43a94e2a407d583c8b13</anchor>
      <arglist>(ViewInterface::Ptr vi)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>anonymous_namespace{tiledbitmappresentation.cc}::TiledBitmapPresentation</name>
    <filename>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</filename>
    <base>PresentationBase</base>
    <base>Colormappable</base>
    <base>PipetteViewInterface</base>
    <base>ShowMetadataInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TiledBitmapPresentation &gt;</type>
      <name>Ptr</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a9540e080cf02e30a7d74ee5e523a6a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>getRect</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a692a34885b8fbb9a6360468bd503fd1f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redraw</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a4c4db94fd7f968183ee7ab0aab24e35d</anchor>
      <arglist>(const ViewInterface::Ptr &amp;vi, cairo_t *cr, Scroom::Utils::Rectangle&lt; double &gt; presentationArea, int zoom) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getProperty</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>af54ddb78a4fbfa92a212fb1aa9572d8f</anchor>
      <arglist>(const std::string &amp;propertyName, std::string &amp;value) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPropertyDefined</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a21bbb46aefe6b4cd202dd3efc395afc5</anchor>
      <arglist>(const std::string &amp;propertyName) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTitle</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a71907f1d9e95bf600061a20392da56f1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>PipetteLayerOperations::PipetteColor</type>
      <name>getPixelAverages</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a142fbdb6f783a07b6a90b3da46cc17f4</anchor>
      <arglist>(Scroom::Utils::Rectangle&lt; double &gt; area) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showMetadata</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a3677652d121d09345fe7993107c15f66</anchor>
      <arglist>(GtkWindow *parent) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColormap</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a4d639424858716d045683aa789718410</anchor>
      <arglist>(Colormap::Ptr colormap) override</arglist>
    </member>
    <member kind="function">
      <type>Colormap::Ptr</type>
      <name>getOriginalColormap</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a0e94f8c02827f278b09de1e84285be3b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfColors</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>ab7fee1d2a92d623e3a28a2f3a59546a6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>getMonochromeColor</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a725f913e0ab10cb18c5c8bcdd4c5d602</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMonochromeColor</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>aba58bf256b66fd4d2248d4967774562d</anchor>
      <arglist>(const Color &amp;c) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransparentBackground</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>ab26fbefe59aa772b77400cdf2c14952b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableTransparentBackground</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a884388f4a9c3cbd7fc833aa3e23b4b52</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTransparentBackground</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a2d41dd089fb444ab5063fd59961b6fdf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a77a67abc662be4945f512ebf34ab7518</anchor>
      <arglist>(Scroom::Utils::Stuff s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TiledBitmapPresentation::Ptr</type>
      <name>create</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a20c38e97f488672179ad159a2b3221af</anchor>
      <arglist>(std::string name_, BitmapMetaData bmd_, TiledBitmapInterface::Ptr tbi_, std::map&lt; std::string, std::string &gt; properties_, ColormapHelperBase::Ptr colormapHelper_, PipetteLayerOperations::Ptr pipetteLayerOperation_)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>viewAdded</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a0573026ebb6ffb13633159eb65d7c01a</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>viewRemoved</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>ae212e34133282a532f5b811e3939d81f</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Scroom::Utils::WeakKeySet&lt; ViewInterface::WeakPtr &gt;</type>
      <name>getViews</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a14041afb368cb42bf701dfba0fa2af58</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Scroom::Utils::WeakKeySet&lt; ViewInterface::WeakPtr &gt;</type>
      <name>Views</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a5e4e09b30c4ebb89dcc370a211ce6efc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>clearCaches</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>aaff468090d57f28902ed80b3db628b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TiledBitmapPresentation</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a4a1f60f65225b0e12814eda8f7b13b11</anchor>
      <arglist>(std::string &amp;&amp;name_, BitmapMetaData &amp;&amp;bmd_, TiledBitmapInterface::Ptr &amp;&amp;tbi_, std::map&lt; std::string, std::string &gt; &amp;&amp;properties_, ColormapHelperBase::Ptr &amp;&amp;colormapHelper_, PipetteLayerOperations::Ptr &amp;&amp;pipetteLayerOperation_)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a690d27bc6f9fc1fec4400f0944917771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::TiledBitmap::BitmapMetaData</type>
      <name>bmd</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a3c78f4e5c6b1ed9a2e91bd94042dae0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TiledBitmapInterface::Ptr</type>
      <name>tbi</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a86c5f1a23208e9dcbeee319be0078eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>properties</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>acd646459d06eed3a7ff936f054fc63a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Views</type>
      <name>views</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>ab03f22e1a73aa438998bba87ad63b4b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ColormapHelperBase::Ptr</type>
      <name>colormapHelper</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a742cdfa5193adbe3a7fa65dedbd75ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PipetteLayerOperations::Ptr</type>
      <name>pipetteLayerOperation</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>ad36fe40b3793407726915be296cf3af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::StuffList</type>
      <name>stuff</name>
      <anchorfile>classanonymous__namespace_02tiledbitmappresentation_8cc_03_1_1TiledBitmapPresentation.html</anchorfile>
      <anchor>a09f6dc59fbd08bcfb03ca255c0325f94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TiledBitmapViewData</name>
    <filename>classTiledBitmapViewData.html</filename>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <base>TileLoadingObserver</base>
    <base>ProgressInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TiledBitmapViewData &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a9c5e86186b7042c70f208f33dab517d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNeededTiles</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>af648a83e6be4140595929fac4a70d849</anchor>
      <arglist>(Layer::Ptr const &amp;l, int imin, int imax, int jmin, int jmax, int zoom, LayerOperations::Ptr layerOperations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetNeededTiles</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>ac2a59a87aaf27ba0e2e0e13b45289f11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeVolatileStuff</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a871ada1675b42535f55ce1f04e9e6000</anchor>
      <arglist>(const Scroom::Utils::Stuff &amp;stuff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearVolatileStuff</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a8b46ee3f4f6d65987d3301a2e9d45b47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tileLoaded</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a5c47329fb642dad6a239fd7cb513d6a1</anchor>
      <arglist>(ConstTile::Ptr tile) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdle</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a078270f4f950b6a1c0116d8af673718b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaiting</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>adbac6f927a9de1acf52fce1d05ffbbe7</anchor>
      <arglist>(double progress=0.0) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorking</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a38034ba360dde2ff152c4fab934c33bb</anchor>
      <arglist>(double progress) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinished</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a6b6aafe842d17dec19e0281ce61c6a18</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>ac1670607394b7dda8bce6d680fd766c1</anchor>
      <arglist>(const ViewInterface::WeakPtr &amp;viewInterface)</arglist>
    </member>
    <member kind="variable">
      <type>ViewInterface::WeakPtr</type>
      <name>viewInterface</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a664ac60117059d72da12a5931df4890a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ProgressInterface::Ptr</type>
      <name>progressInterface</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a57c5017fa0fe0fd83afeb684bd65ee22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scroom::Bookkeeping::Token</type>
      <name>token</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>ad6349e9ea92f678425f07d9f05be8cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TiledBitmapViewData</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a0b947a7e707c8a17db18fd349fd557d9</anchor>
      <arglist>(const ViewInterface::WeakPtr &amp;viewInterface)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Layer::Ptr</type>
      <name>layer</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a8763e9d5a41ec0562e5ba36bc67d166e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>imin</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a6cad2d15edc0da0c8e43c55206f5afd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>imax</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a404733ec9c267e49eefc0ff3875033e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>jmin</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a4e7e1ca283ae5cc118ba29073cb0e1aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>jmax</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>ad86feea87ce335387dc1237e9c537b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>zoom</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a6d23881ff25fe4225ffb337bce42a1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LayerOperations::Ptr</type>
      <name>layerOperations</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a8de9aed1a45f2ddc8d22710e0cfcfc9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::StuffList</type>
      <name>stuff</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a052b3df2cb314ba3521422d731271621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::StuffList</type>
      <name>volatileStuff</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a2853b453228e7924601b29cb42748fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>redrawPending</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a3304b2a780bd0a23d4cdd974e842f5d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classTiledBitmapViewData.html</anchorfile>
      <anchor>a86cf1099b453666642cbc60a1a2b41d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TileInitialisationObserver</name>
    <filename>classTileInitialisationObserver.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TileInitialisationObserver &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTileInitialisationObserver.html</anchorfile>
      <anchor>a38b8eca92057f20fcea3bd4a3a35b4e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TileInitialisationObserver &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classTileInitialisationObserver.html</anchorfile>
      <anchor>a3c0cf144305d23072fc1fcd51c09c12c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tileCreated</name>
      <anchorfile>classTileInitialisationObserver.html</anchorfile>
      <anchor>af1272eb9052fad56eed3fcdaa0b85829</anchor>
      <arglist>(const std::shared_ptr&lt; CompressedTile &gt; &amp;tile)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tileFinished</name>
      <anchorfile>classTileInitialisationObserver.html</anchorfile>
      <anchor>a1469a567cc8b3a84f895dc28a06d471d</anchor>
      <arglist>(const std::shared_ptr&lt; CompressedTile &gt; &amp;tile)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TileLoadingObserver</name>
    <filename>classTileLoadingObserver.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TileLoadingObserver &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTileLoadingObserver.html</anchorfile>
      <anchor>a1d5060d81a57e00328bb1afa7540fda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TileLoadingObserver &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classTileLoadingObserver.html</anchorfile>
      <anchor>aa1d6a803a6bf6f1e62c6525e6e9337f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>tileLoaded</name>
      <anchorfile>classTileLoadingObserver.html</anchorfile>
      <anchor>afdd49a1d330076f47e13e494c39dc713</anchor>
      <arglist>(ConstTile::Ptr tile)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TileViewState</name>
    <filename>classTileViewState.html</filename>
    <base>Observable&lt; TileLoadingObserver &gt;</base>
    <base>TileLoadingObserver</base>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INIT</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842fa1d647ad9c158d585079470a6bc769b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOADED</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842facb0e11734f1bbe827dfb4f08117485e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPUTING_BASE</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842fae3bba76a5fdeb7f7704d3fba5d4200b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BASE_COMPUTED</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842fa588c8eeac5b132c802b90d7639398b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPUTING_ZOOM</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842faf523ee5470d5a478616fae0a915b8083</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZOOM_COMPUTED</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842fa55fe6567e4b3808995b5ab4746607ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DONE</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842fa8825562a5c2536d9bbfec985af74bc1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TileViewState &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a96e10104027d59ed19c7371779a0150e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; TileViewState &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>aaadd15d97328eede61972f5c2f0ea0fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INIT</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842fa1d647ad9c158d585079470a6bc769b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOADED</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842facb0e11734f1bbe827dfb4f08117485e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPUTING_BASE</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842fae3bba76a5fdeb7f7704d3fba5d4200b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BASE_COMPUTED</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842fa588c8eeac5b132c802b90d7639398b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPUTING_ZOOM</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842faf523ee5470d5a478616fae0a915b8083</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZOOM_COMPUTED</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842fa55fe6567e4b3808995b5ab4746607ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DONE</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0a229ff2bb85654a101ca1842211842fa8825562a5c2536d9bbfec985af74bc1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TileViewState</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>ae59f0acfef6570d16d593e5f3a38b307</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TileViewState</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a5782968158332de287ccecd406c3f698</anchor>
      <arglist>(const TileViewState &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TileViewState</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>af8abdc5085f1adaefe269049aee929b2</anchor>
      <arglist>(TileViewState &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>TileViewState</type>
      <name>operator=</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a369dacfd50a0eeebc070937f0b1f846a</anchor>
      <arglist>(const TileViewState &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>TileViewState</type>
      <name>operator=</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a2d0ab6d4b65771da7f9f11297ebb8471</anchor>
      <arglist>(TileViewState &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Stuff</type>
      <name>getCacheResult</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a36289f4d950ab6fa450639a8cac6c859</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewData</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>ab946d1b3c985c010c2b5fe2f6c082019</anchor>
      <arglist>(const std::shared_ptr&lt; TiledBitmapViewData &gt; &amp;tbvd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZoom</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a01f7da254affbddd50ab7f2d1c5ad4c2</anchor>
      <arglist>(LayerOperations::Ptr lo, int zoom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tileLoaded</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a4a3045d55976207bb1ffb8a0fe890cb2</anchor>
      <arglist>(ConstTile::Ptr tile) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a7085eae554e8f9bab328c0a4ddfb557b</anchor>
      <arglist>(const std::shared_ptr&lt; CompressedTile &gt; &amp;parent)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TileViewState</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>afd3faa52db58a205c1304d33602bde01</anchor>
      <arglist>(std::shared_ptr&lt; CompressedTile &gt; parent)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>kick</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>ad24f5d685c8474a955e26aeb1f3c4cb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>process</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a60e0499424075228271dfbc95d888af4</anchor>
      <arglist>(const ThreadPool::WeakQueue::Ptr &amp;wq)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeBase</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>af00228ee5846b2e9ec38ddafe4b998ec</anchor>
      <arglist>(const ThreadPool::WeakQueue::Ptr &amp;wq, const ConstTile::Ptr &amp;tile_, const LayerOperations::Ptr &amp;lo_)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeZoom</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a7b4f387a253e8f596382298652317502</anchor>
      <arglist>(const ThreadPool::WeakQueue::Ptr &amp;wq, const ConstTile::Ptr &amp;tile, const LayerOperations::Ptr &amp;lo, Scroom::Utils::Stuff baseCache, int zoom)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>reportDone</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0f0b147b0ad17790338ee2b130809682</anchor>
      <arglist>(const ThreadPool::WeakQueue::Ptr &amp;wq, const ConstTile::Ptr &amp;tile)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a43721fbbadd022ad3a1b2e4c228500f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; CompressedTile &gt;</type>
      <name>parent</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>aba757e6de54fcd9c0f0958f08660d4ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mutex</type>
      <name>mut</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a014ff1109dbf338052bec8179512bfcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>State</type>
      <name>state</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a0705c5be8659166ede2b591bf1c4c3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>State</type>
      <name>desiredState</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a29b0becb1c1c438a908679ce9258db48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ThreadPool::Queue::Ptr</type>
      <name>queue</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a16f233f55d9d36d5e28311eca59c7455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ThreadPool::WeakQueue::Ptr</type>
      <name>weakQueue</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a2043a48ef98f6873352250eb31a8b43d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::Stuff</type>
      <name>r</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a700d539b07d4f86abb5bb49138d609c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstTile::Ptr</type>
      <name>tile</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a6ed489ad4c3346c14fd15d3ff46924a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::weak_ptr&lt; TiledBitmapViewData &gt;</type>
      <name>tbvd</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a10756136e2f2f2e4621885012cb09c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LayerOperations::Ptr</type>
      <name>lo</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>aebe3c10c40e343a2df076a126626a464</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>zoom</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>aedfe78a642c6485c33a0211bb47d9aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::StuffWeak</type>
      <name>lifeTimeManager</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a4c83ba16f6f5a0b3df38a39ecb95e449</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::Stuff</type>
      <name>baseCache</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a701f3a8c289eed9861b45e612a7151b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::Stuff</type>
      <name>zoomCache</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>adf6cc97b7f1eb08245bcf8e748d2c84f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ThreadPool::Ptr</type>
      <name>cpuBound</name>
      <anchorfile>classTileViewState.html</anchorfile>
      <anchor>a47af900d05c60870942f3c852c59f88d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Bookkeeping::Token</name>
    <filename>classScroom_1_1Bookkeeping_1_1Token.html</filename>
    <member kind="function">
      <type></type>
      <name>Token</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Token.html</anchorfile>
      <anchor>a9f9e71ff0092bf9c0c92f7a1fba23501</anchor>
      <arglist>(const std::shared_ptr&lt; Detail::TokenImpl &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Token</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Token.html</anchorfile>
      <anchor>a6e50d22a4e3c2e84a8d2666c6b3bda3b</anchor>
      <arglist>(const std::weak_ptr&lt; Detail::TokenImpl &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Token</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Token.html</anchorfile>
      <anchor>a08e842be26c730f7094b744bca7827e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Token</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Token.html</anchorfile>
      <anchor>a3289c57ff1bea7ce7147e194fbe15bde</anchor>
      <arglist>(const Stuff &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Token</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Token.html</anchorfile>
      <anchor>a802f99f93028a5fe414f26311d046695</anchor>
      <arglist>(const StuffList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Token.html</anchorfile>
      <anchor>ac619f80091875f045710df020bbc5c11</anchor>
      <arglist>(const Stuff &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Token.html</anchorfile>
      <anchor>a6de2fd82fc84f1cb644c4871aa0d84d1</anchor>
      <arglist>(const StuffList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Token.html</anchorfile>
      <anchor>ad7b83dd7e8567e8a8d6e5beaa01c7ce9</anchor>
      <arglist>(Token &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Token.html</anchorfile>
      <anchor>a59eae2e541540602d84ff24a19a5a380</anchor>
      <arglist>(StuffList &amp;l) const</arglist>
    </member>
    <member kind="function">
      <type>Detail::TokenAddition</type>
      <name>operator+</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Token.html</anchorfile>
      <anchor>afefb9698882b7f270f331c338ce26a7b</anchor>
      <arglist>(const Stuff &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Token const  &amp;</type>
      <name>operator+=</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Token.html</anchorfile>
      <anchor>a7b71440e7f51ff59f90d034a7170dac6</anchor>
      <arglist>(const Stuff &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Bookkeeping::Detail::TokenAddition</name>
    <filename>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenAddition.html</filename>
    <base>Scroom::Bookkeeping::Token</base>
    <member kind="function">
      <type></type>
      <name>TokenAddition</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenAddition.html</anchorfile>
      <anchor>a81093f6665f51f277623386fcece68ea</anchor>
      <arglist>(const Scroom::Bookkeeping::Token &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>TokenAddition &amp;</type>
      <name>operator+</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenAddition.html</anchorfile>
      <anchor>a9ca6faf3e107598c11bbfdca785680e1</anchor>
      <arglist>(const Stuff &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TokenAddition &amp;</type>
      <name>operator+=</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenAddition.html</anchorfile>
      <anchor>aa7ece63e87c6a3a941a28b1e9d9d320e</anchor>
      <arglist>(const Stuff &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TokenAddition &amp;</type>
      <name>operator+</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenAddition.html</anchorfile>
      <anchor>a2487e70a8a5e66c44b7de88a6d71915f</anchor>
      <arglist>(TokenAddition &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TokenAddition &amp;</type>
      <name>operator+=</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenAddition.html</anchorfile>
      <anchor>adf52588f2c4d314f78eabd2d8df395fa</anchor>
      <arglist>(TokenAddition &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Bookkeeping::Detail::TokenImpl</name>
    <filename>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenImpl.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TokenImpl &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenImpl.html</anchorfile>
      <anchor>a0224303b142fc506feeb75e9c824a1cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenImpl.html</anchorfile>
      <anchor>a0740fae7626f85613ce5cfa24e09ef93</anchor>
      <arglist>(const Stuff &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenImpl.html</anchorfile>
      <anchor>a7b1b9622d397ba74b5b1bb6c265ef8d2</anchor>
      <arglist>(const StuffList &amp;l_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenImpl.html</anchorfile>
      <anchor>a12c907d23cafae2297d3d0e8955f5acc</anchor>
      <arglist>(StuffList &amp;l_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenImpl.html</anchorfile>
      <anchor>ae5eb82ceb6caf8b4f6916846cac2ad95</anchor>
      <arglist>(Ptr &amp;rhs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scroom::Bookkeeping::Token</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenImpl.html</anchorfile>
      <anchor>ab58c018ca2f8b72212a1bff956bd5aab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TokenImpl</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenImpl.html</anchorfile>
      <anchor>a94ba01f3e786f751c928d4f6468cc87b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StuffList</type>
      <name>l</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1TokenImpl.html</anchorfile>
      <anchor>a8563c6d110d857dd1ae44c3aea223faa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ToolStateListener</name>
    <filename>classToolStateListener.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ToolStateListener &gt;</type>
      <name>Ptr</name>
      <anchorfile>classToolStateListener.html</anchorfile>
      <anchor>a82013e8a7995376dd7678b7f7c086f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>onEnable</name>
      <anchorfile>classToolStateListener.html</anchorfile>
      <anchor>a97add007438e18b5aba94e99d623e68e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>onDisable</name>
      <anchorfile>classToolStateListener.html</anchorfile>
      <anchor>a5c5428be3cedeaa27b0e45be9cd782d0</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TransformationData</name>
    <filename>classTransformationData.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TransformationData &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTransformationData.html</anchorfile>
      <anchor>a71a4be1bae303d4ab771255bb2d0e3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAspectRatio</name>
      <anchorfile>classTransformationData.html</anchorfile>
      <anchor>ab4b4376d1c1b8f5f8e575f1df4aeb729</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAspectRatio</name>
      <anchorfile>classTransformationData.html</anchorfile>
      <anchor>ae2f33a459eb35e7a8ac5eee7f1f3c088</anchor>
      <arglist>(Scroom::Utils::Point&lt; double &gt; aspectRatio_)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Point&lt; double &gt;</type>
      <name>getAspectRatio</name>
      <anchorfile>classTransformationData.html</anchorfile>
      <anchor>aec3442eec9b8014199b95a9dca330a50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTransformationData.html</anchorfile>
      <anchor>afa672d1e7326fdbe872ba2f6ac740001</anchor>
      <arglist>(Scroom::Utils::Point&lt; double &gt; aspectRatio_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTransformationData.html</anchorfile>
      <anchor>a859957abfa310a6a9f07946a458f5749</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TransformationData</name>
      <anchorfile>classTransformationData.html</anchorfile>
      <anchor>a20648e1e7fd38fece3b796aedc5759bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TransformationData</name>
      <anchorfile>classTransformationData.html</anchorfile>
      <anchor>ac7f8cdf80beea11e708f6b40a83f625d</anchor>
      <arglist>(Scroom::Utils::Point&lt; double &gt; aspectRatio_)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::Point&lt; double &gt;</type>
      <name>aspectRatio</name>
      <anchorfile>classTransformationData.html</anchorfile>
      <anchor>a47936612795b9ae6f7a8d1da08de6c54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TransformPresentation</name>
    <filename>classTransformPresentation.html</filename>
    <base>PresentationBaseSimple</base>
    <base>Colormappable</base>
    <base>PipetteViewInterface</base>
    <base>ShowMetadataInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TransformPresentation &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a25d8a9a14f9732ce239aae3b788a0f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a8aac4359f5f251bf4c89882857d1b0f9</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>aa8a233e2cf3d2b78088f64321ec0cc6e</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>getRect</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>ae8896ce9e1b7bc669f6c4febc8823dd1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redraw</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>aae93c031e922657598b8a3047e699267</anchor>
      <arglist>(ViewInterface::Ptr const &amp;vi, cairo_t *cr, Scroom::Utils::Rectangle&lt; double &gt; presentationArea, int zoom) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getProperty</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a8202e9c8f864e64bf5071a1297401d05</anchor>
      <arglist>(const std::string &amp;name, std::string &amp;value) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPropertyDefined</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a5638f266baa20a20901f9ae3225a2944</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTitle</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a40750146eb0946054dd322371dfdf6da</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Point&lt; double &gt;</type>
      <name>getAspectRatio</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a969c44d9131e0318d039ff509f8dbed9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>PipetteLayerOperations::PipetteColor</type>
      <name>getPixelAverages</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a8f343d98a4f1247e0a18f338e2fa74ad</anchor>
      <arglist>(Scroom::Utils::Rectangle&lt; double &gt; area) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColormap</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>ac54fec8e9d05effd1b8377a52a91ee1a</anchor>
      <arglist>(Colormap::Ptr colormap) override</arglist>
    </member>
    <member kind="function">
      <type>Colormap::Ptr</type>
      <name>getOriginalColormap</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a12344a3eeaf492b1c7bdd2fa80db7729</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfColors</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a7fc20cee82ebc28404c074b10e44add9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>getMonochromeColor</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a1d508b386f74549c2fff13c04f5b970e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMonochromeColor</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a778ce565d6a8d478c5655008174fb949</anchor>
      <arglist>(const Color &amp;c) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransparentBackground</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a7e5ba7edfebb16456fefec941e4f3eb3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableTransparentBackground</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a7471c9df007b7595fd1177adcef2abfa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTransparentBackground</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a30829d965c1917a27fe95501a6e094df</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showMetadata</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a9a840aef2c9255e4da089567f73d8a6c</anchor>
      <arglist>(GtkWindow *parent) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a0bb3a42de4a22b82be66bffff34c4e7d</anchor>
      <arglist>(PresentationInterface::Ptr const &amp;presentation, TransformationData::Ptr const &amp;transformationData)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TransformPresentation</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>afe7cc32972b9a7ee3326fb1ce7ec8d0d</anchor>
      <arglist>(PresentationInterface::Ptr const &amp;presentation, TransformationData::Ptr transformationData)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TransformationData::Ptr</type>
      <name>transformationData</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>ad5804a0827bf975f5dd39061f7a5060a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PresentationInterface::Ptr</type>
      <name>presentation</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a5aac13bb64cc63cb76adbb42a0770cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Colormappable::Ptr</type>
      <name>colormappable</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>ad383e05a9aa2cbd83a077bd83ced7abd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ShowMetadataInterface::Ptr</type>
      <name>showMetaDataInterface</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>a29fd4e7f86ebe745c74a833cc1daba25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::WeakKeyMap&lt; ViewInterface::WeakPtr, Detail::ViewData::Ptr &gt;</type>
      <name>viewData</name>
      <anchorfile>classTransformPresentation.html</anchorfile>
      <anchor>acd316f1a3a90a0fe59749363f82304d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TransparentOverlay</name>
    <filename>classTransparentOverlay.html</filename>
    <base>PluginInformationInterface</base>
    <base>NewAggregateInterface</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TransparentOverlay &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTransparentOverlay.html</anchorfile>
      <anchor>a209bad4d38024b77eee10b75d71e6a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginName</name>
      <anchorfile>classTransparentOverlay.html</anchorfile>
      <anchor>adcf6bfe4e81d841f20479a12e2ac40c5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPluginVersion</name>
      <anchorfile>classTransparentOverlay.html</anchorfile>
      <anchor>a7971795c058515b3260d6ac0938f8865</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCapabilities</name>
      <anchorfile>classTransparentOverlay.html</anchorfile>
      <anchor>ade23d9970b3b5004b388aebd389afc04</anchor>
      <arglist>(ScroomPluginInterface::Ptr host) override</arglist>
    </member>
    <member kind="function">
      <type>Aggregate::Ptr</type>
      <name>createNew</name>
      <anchorfile>classTransparentOverlay.html</anchorfile>
      <anchor>aae69c589cf992ca7247d0372cde63399</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTransparentOverlay.html</anchorfile>
      <anchor>a82b6203fda25eace51a0e3bbe7e31d96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TransparentOverlay</name>
      <anchorfile>classTransparentOverlay.html</anchorfile>
      <anchor>ade9a566fbf32bd939324a5906f5fe65a</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TransparentOverlayPresentation</name>
    <filename>classTransparentOverlayPresentation.html</filename>
    <base>PresentationBase</base>
    <base>Aggregate</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TransparentOverlayPresentation &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>af7b38fd6c916291c99fc277277cfc3e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>getRect</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>acd283395cdf62ac01f7685d92bd73feb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redraw</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>aae3fed55c32f0135d137b5df3d5224cf</anchor>
      <arglist>(ViewInterface::Ptr const &amp;vi, cairo_t *cr, Scroom::Utils::Rectangle&lt; double &gt; presentationArea, int zoom) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getProperty</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>ae6b00121db3a8020e0b45d4c489d822e</anchor>
      <arglist>(const std::string &amp;name, std::string &amp;value) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPropertyDefined</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>ac525e46108ad06526d646df8a7186b77</anchor>
      <arglist>(const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTitle</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>a9734f916996db800ac8903a2e924d7ee</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>viewAdded</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>a202b5ad17a9deacf342245ff0d3c3c22</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>viewRemoved</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>a8002c16f49f9a2144264d7bb780b0307</anchor>
      <arglist>(ViewInterface::WeakPtr vi) override</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::WeakKeySet&lt; ViewInterface::WeakPtr &gt;</type>
      <name>getViews</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>a77c8e1b1e32f7340a110ee7cc573ab26</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPresentation</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>a49dc1a6a20e1af36c4b4f1b01e6f9d41</anchor>
      <arglist>(PresentationInterface::Ptr const &amp;p) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>a26622545236d4d72608dab3859aef5cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Scroom::Utils::WeakKeyMap&lt; ViewInterface::WeakPtr, TransparentOverlayViewInfo::Ptr &gt;</type>
      <name>ViewDataMap</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>a0738a683e634e0288f50bcc31c740d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TransparentOverlayPresentation</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>a69a7c85d3b030fe299a1542b3a3f1bed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setOptimalColor</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>a6c094814a4441ee33ba7de57bf41f709</anchor>
      <arglist>(PresentationInterface::Ptr const &amp;p)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; PresentationInterface::Ptr &gt;</type>
      <name>children</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>afddaec86f822f73a9a8e7a8167fcf823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SizeDeterminer::Ptr</type>
      <name>sizeDeterminer</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>ace97a40b2d2d8b89cccc648ac66886f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ViewDataMap</type>
      <name>viewData</name>
      <anchorfile>classTransparentOverlayPresentation.html</anchorfile>
      <anchor>ae63daebb37c7a16d847fad3c16482d50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TransparentOverlayViewInfo</name>
    <filename>classTransparentOverlayViewInfo.html</filename>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TransparentOverlayViewInfo &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>a3d5dd07b14b93d8dda81ba8c482eb7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChildren</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>a2795eac0eedd4072ed84abc8b260a6cd</anchor>
      <arglist>(const std::list&lt; PresentationInterface::Ptr &gt; &amp;children)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>a0febc5a267ab940b43a8f55f428246f6</anchor>
      <arglist>(const PresentationInterface::Ptr &amp;child)</arglist>
    </member>
    <member kind="function">
      <type>PresentationInterface::Ptr</type>
      <name>getChild</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>a47ebc647b5159d7b52a28e5241ea9f82</anchor>
      <arglist>(const ChildView::Ptr &amp;cv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>a10cd3619220caa76bf20c6865651b085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redraw</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>add1ffd6ec625dfd9633fd5dad6ad2b3f</anchor>
      <arglist>(cairo_t *cr, Scroom::Utils::Rectangle&lt; double &gt; const &amp;presentationArea, int zoom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>ac68f53e66aa850baa7dfd3b9ed938581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProgressInterface::Ptr</type>
      <name>getProgressInterface</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>a1fdb43c917f2ca65ee6e92dc6ff4adf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggled</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>aaf1b7ae3806c6a68a0423dc7750b8a14</anchor>
      <arglist>(GtkToggleButton *button)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>ada3770158232f1673fa2660efcda58fe</anchor>
      <arglist>(const ViewInterface::WeakPtr &amp;vi, SizeDeterminer::Ptr const &amp;sizeDeterminer)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; PresentationInterface::Ptr, ChildView::Ptr &gt;</type>
      <name>ChildMap</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>ade12e9351ba20900568fa33935d33c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TransparentOverlayViewInfo</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>afa52d9b7aa9737c35a0e546f5e2e5218</anchor>
      <arglist>(const ViewInterface::WeakPtr &amp;vi, SizeDeterminer::Ptr sizeDeterminer)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>createToggleToolButton</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>abbac8c446a049dad72a7d7b98c9b3af3</anchor>
      <arglist>(PresentationInterface::Ptr const &amp;p)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ViewInterface::Ptr</type>
      <name>parentView</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>a5b428b9119ffd9106ae5cf5da65aab4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ChildMap</type>
      <name>childViews</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>a54674b3eb164f2e16182896f9ab0ff34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::ProgressInterfaceMultiplexer::Ptr</type>
      <name>progressInterfaceMultiplexer</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>abb5a2a63d68d58fabf4107b1819359bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; GtkWidget * &gt;</type>
      <name>buttons</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>ab7afe5e192137e8f3cf1b5bc4243e82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PresentationInterface::Ptr &gt;</type>
      <name>children</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>a78248316bbc35e0984b5a338ec3a4a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SizeDeterminer::Ptr</type>
      <name>sizeDeterminer</name>
      <anchorfile>classTransparentOverlayViewInfo.html</anchorfile>
      <anchor>adf796f3ba5aafea3eb7cc7559d460840</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TweakGridSelection</name>
    <filename>classTweakGridSelection.html</filename>
    <base>TweakSelection</base>
    <member kind="function">
      <type>Rectangle</type>
      <name>tweakSelection</name>
      <anchorfile>classTweakGridSelection.html</anchorfile>
      <anchor>ae0bd56fdd79d1b55155400158ad1f876</anchor>
      <arglist>(Rectangle selection) const override</arglist>
    </member>
    <member kind="function">
      <type>virtual Rectangle</type>
      <name>tweakSelection</name>
      <anchorfile>classTweakGridSelection.html</anchorfile>
      <anchor>aba15993b0d7720cf231d4fbd95980725</anchor>
      <arglist>(Rectangle selection) const=0</arglist>
    </member>
    <member kind="function">
      <type>Selection</type>
      <name>tweakSelection</name>
      <anchorfile>classTweakGridSelection.html</anchorfile>
      <anchor>a8b280667496e3bd9fe0fa8a87a85a1b4</anchor>
      <arglist>(Selection selection) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TweakSelection</name>
      <anchorfile>classTweakGridSelection.html</anchorfile>
      <anchor>a89db2a9f0403173a2780701a185bd408</anchor>
      <arglist>(Point aspectRatio_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTweakGridSelection.html</anchorfile>
      <anchor>a64bd6f2b5e49b54c3b0661f71df0dd69</anchor>
      <arglist>(Point aspectRatio_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TweakPixelSelection</name>
    <filename>classTweakPixelSelection.html</filename>
    <base>TweakSelection</base>
    <member kind="function">
      <type>Rectangle</type>
      <name>tweakSelection</name>
      <anchorfile>classTweakPixelSelection.html</anchorfile>
      <anchor>ab8590c4031b7c85c5374f12ca61b2d58</anchor>
      <arglist>(Rectangle selection) const override</arglist>
    </member>
    <member kind="function">
      <type>virtual Rectangle</type>
      <name>tweakSelection</name>
      <anchorfile>classTweakPixelSelection.html</anchorfile>
      <anchor>aba15993b0d7720cf231d4fbd95980725</anchor>
      <arglist>(Rectangle selection) const=0</arglist>
    </member>
    <member kind="function">
      <type>Selection</type>
      <name>tweakSelection</name>
      <anchorfile>classTweakPixelSelection.html</anchorfile>
      <anchor>a8b280667496e3bd9fe0fa8a87a85a1b4</anchor>
      <arglist>(Selection selection) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TweakSelection</name>
      <anchorfile>classTweakPixelSelection.html</anchorfile>
      <anchor>a89db2a9f0403173a2780701a185bd408</anchor>
      <arglist>(Point aspectRatio_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTweakPixelSelection.html</anchorfile>
      <anchor>a35a1a260e43e6ef70c7437c7bb53b0f9</anchor>
      <arglist>(Point aspectRatio_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TweakPositionTextBox</name>
    <filename>classTweakPositionTextBox.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TweakPositionTextBox &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTweakPositionTextBox.html</anchorfile>
      <anchor>a62b3e8b6f032ea9473b4407aaee83216</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scroom::Utils::Point&lt; double &gt;</type>
      <name>Point</name>
      <anchorfile>classTweakPositionTextBox.html</anchorfile>
      <anchor>a6aa45dd92d97a0832e598e2d1c34d7b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>parse</name>
      <anchorfile>classTweakPositionTextBox.html</anchorfile>
      <anchor>a2ceab334ed94eef703340ea84bca028b</anchor>
      <arglist>(std::string_view x, std::string_view y, Scroom::Utils::Point&lt; int &gt; drawingAreaSize, int zoom) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::string, std::string &gt;</type>
      <name>display</name>
      <anchorfile>classTweakPositionTextBox.html</anchorfile>
      <anchor>afdd8293d90c2e2966483be8313208cb2</anchor>
      <arglist>(Point position, Scroom::Utils::Point&lt; int &gt; drawingAreaSize, int zoom) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAspectRatio</name>
      <anchorfile>classTweakPositionTextBox.html</anchorfile>
      <anchor>abe450446237ce055041d4fa289363857</anchor>
      <arglist>(Point aspectRatio_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTweakPositionTextBox.html</anchorfile>
      <anchor>a01051591e2fe103b2aeeec04dfa1ed19</anchor>
      <arglist>(Point aspectRatio_)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TweakPositionTextBox</name>
      <anchorfile>classTweakPositionTextBox.html</anchorfile>
      <anchor>a456b90dc041b5897ec8f18e8a74fadea</anchor>
      <arglist>(Point aspectRatio_)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>aspectRatio</name>
      <anchorfile>classTweakPositionTextBox.html</anchorfile>
      <anchor>a8d2812036bd7038e2b8f23a763bb5ec4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TweakPresentationPosition</name>
    <filename>classTweakPresentationPosition.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TweakPresentationPosition &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTweakPresentationPosition.html</anchorfile>
      <anchor>a815f26bd0503a2fffb2e160b56060241</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scroom::Utils::Point&lt; double &gt;</type>
      <name>Point</name>
      <anchorfile>classTweakPresentationPosition.html</anchorfile>
      <anchor>ae8a9f8845e52f3de5bfc758a1275f22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>tweakPosition</name>
      <anchorfile>classTweakPresentationPosition.html</anchorfile>
      <anchor>a3a4e55a399fe13abbcd2d783a264d63e</anchor>
      <arglist>(Point currentPosition, Scroom::Utils::Point&lt; int &gt;, int zoom) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAspectRatio</name>
      <anchorfile>classTweakPresentationPosition.html</anchorfile>
      <anchor>ae1dad0a01eb103729be6f627d7ac0897</anchor>
      <arglist>(Point aspectRatio_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTweakPresentationPosition.html</anchorfile>
      <anchor>a9eb63117ba7be7c7e61bcaa939a21023</anchor>
      <arglist>(Point aspectRatio_)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TweakPresentationPosition</name>
      <anchorfile>classTweakPresentationPosition.html</anchorfile>
      <anchor>a01f80b4df75712bbe982c569a491e3cf</anchor>
      <arglist>(Point aspectRatio_)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>aspectRatio</name>
      <anchorfile>classTweakPresentationPosition.html</anchorfile>
      <anchor>a3aff9a977920a2b836c58706e5a9be47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TweakRulers</name>
    <filename>classTweakRulers.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TweakRulers &gt;</type>
      <name>Ptr</name>
      <anchorfile>classTweakRulers.html</anchorfile>
      <anchor>aed8f94596f49f0bf70ac2c903276cc58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scroom::Utils::Point&lt; double &gt;</type>
      <name>Point</name>
      <anchorfile>classTweakRulers.html</anchorfile>
      <anchor>a027377b6bb9b72b8c7667b7646fc590e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>tweakRulers</name>
      <anchorfile>classTweakRulers.html</anchorfile>
      <anchor>aca55e4ce52df6266becd817b3acfa95a</anchor>
      <arglist>(Point currentPosition, Scroom::Utils::Point&lt; int &gt; drawingAreaSize, int zoom) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAspectRatio</name>
      <anchorfile>classTweakRulers.html</anchorfile>
      <anchor>a25df7aa6ca074bfefa7cb17ba0bb8760</anchor>
      <arglist>(Point aspectRatio_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classTweakRulers.html</anchorfile>
      <anchor>a97536e4b1c329b0757880b9128ce0575</anchor>
      <arglist>(Point aspectRatio_)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TweakRulers</name>
      <anchorfile>classTweakRulers.html</anchorfile>
      <anchor>a59024044cb56b26cba869def848d8302</anchor>
      <arglist>(Point aspectRatio_)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>aspectRatio</name>
      <anchorfile>classTweakRulers.html</anchorfile>
      <anchor>ae3775037f6aa9e4929d36732b7ba4e38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TweakSelection</name>
    <filename>classTweakSelection.html</filename>
    <base>ITweakSelection</base>
    <member kind="typedef">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>Rectangle</name>
      <anchorfile>classTweakSelection.html</anchorfile>
      <anchor>ab884b6cbfd0d7ef5d24779b238d58f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Rectangle</type>
      <name>tweakSelection</name>
      <anchorfile>classTweakSelection.html</anchorfile>
      <anchor>a12e9c0186b039a10ac416c1b7a595049</anchor>
      <arglist>(Rectangle selection) const =0</arglist>
    </member>
    <member kind="function">
      <type>Selection</type>
      <name>tweakSelection</name>
      <anchorfile>classTweakSelection.html</anchorfile>
      <anchor>a8b280667496e3bd9fe0fa8a87a85a1b4</anchor>
      <arglist>(Selection selection) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAspectRatio</name>
      <anchorfile>classTweakSelection.html</anchorfile>
      <anchor>a569158860931e97ddac18f418db6cfe3</anchor>
      <arglist>(Point aspectRatio_) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TweakSelection</name>
      <anchorfile>classTweakSelection.html</anchorfile>
      <anchor>a89db2a9f0403173a2780701a185bd408</anchor>
      <arglist>(Point aspectRatio_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point</type>
      <name>aspectRatio</name>
      <anchorfile>classTweakSelection.html</anchorfile>
      <anchor>adaea304ddfaf25d12a5dd441e3ea5334</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::MemoryBlobs::Blob::UnloadData</name>
    <filename>classScroom_1_1MemoryBlobs_1_1Blob_1_1UnloadData.html</filename>
    <member kind="function">
      <type></type>
      <name>UnloadData</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob_1_1UnloadData.html</anchorfile>
      <anchor>a0ecc87df41fea8bdc68037e97449c81e</anchor>
      <arglist>(Blob::Ptr blob)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob_1_1UnloadData.html</anchorfile>
      <anchor>ae2e114615710b7e69e9569a51679b5de</anchor>
      <arglist>(uint8_t *data)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Blob::Ptr</type>
      <name>blob</name>
      <anchorfile>classScroom_1_1MemoryBlobs_1_1Blob_1_1UnloadData.html</anchorfile>
      <anchor>a5e72b7a4ac8edbcd1fd52f8781880f7e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Utils::ProgressInterfaceBroadcaster::Unsubscriber</name>
    <filename>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster_1_1Unsubscriber.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Unsubscriber &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster_1_1Unsubscriber.html</anchorfile>
      <anchor>a424ed4865cd85bf112b80824f17aa4c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Unsubscriber</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster_1_1Unsubscriber.html</anchorfile>
      <anchor>a5f466a78ab7fb22d16a16dac5452e8c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster_1_1Unsubscriber.html</anchorfile>
      <anchor>a3ade968b84c4541b3ba7e60a1d660d77</anchor>
      <arglist>(ProgressInterfaceBroadcaster::Ptr const &amp;parent, ProgressInterface::Ptr const &amp;child)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Unsubscriber</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster_1_1Unsubscriber.html</anchorfile>
      <anchor>a7197ca8cbf9167a3b2340aa08ee54ba0</anchor>
      <arglist>(ProgressInterfaceBroadcaster::Ptr parent, ProgressInterface::Ptr child)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Unsubscriber</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster_1_1Unsubscriber.html</anchorfile>
      <anchor>a801eb9c01bc8f4a2328078f6a2e3ba37</anchor>
      <arglist>(const Unsubscriber &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Unsubscriber</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster_1_1Unsubscriber.html</anchorfile>
      <anchor>ad1b16f4436660a49e18d57f440d043d2</anchor>
      <arglist>(Unsubscriber &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Unsubscriber &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster_1_1Unsubscriber.html</anchorfile>
      <anchor>a84028e2b62f03d08ed26ba9367241374</anchor>
      <arglist>(const Unsubscriber &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Unsubscriber &amp;</type>
      <name>operator=</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster_1_1Unsubscriber.html</anchorfile>
      <anchor>abef163a916c154539db2d0ebe44ebce7</anchor>
      <arglist>(Unsubscriber &amp;&amp;)=delete</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProgressInterfaceBroadcaster::Ptr</type>
      <name>parent</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster_1_1Unsubscriber.html</anchorfile>
      <anchor>a14de1cd75d3688355d1eba61cb213fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProgressInterface::Ptr</type>
      <name>child</name>
      <anchorfile>classScroom_1_1Utils_1_1ProgressInterfaceBroadcaster_1_1Unsubscriber.html</anchorfile>
      <anchor>a0eab09c931bc420f064da62be1b6a713</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scroom::Bookkeeping::Detail::ValueType</name>
    <filename>classScroom_1_1Bookkeeping_1_1Detail_1_1ValueType.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ValueType&lt; V &gt; &gt;</type>
      <name>Ptr</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1ValueType.html</anchorfile>
      <anchor>a9586e3898be4284501b5f79dd5e65b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ValueType&lt; V &gt; &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1ValueType.html</anchorfile>
      <anchor>a6e09dd94b98a50326a61bc716bd5ca47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1ValueType.html</anchorfile>
      <anchor>ac0e5be329f8bf1090463b891ea2e7f30</anchor>
      <arglist>(V value)</arglist>
    </member>
    <member kind="variable">
      <type>V</type>
      <name>value</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1ValueType.html</anchorfile>
      <anchor>a88c2086f4865aa04f1d987e47ae6cdf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WeakToken</type>
      <name>token</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1ValueType.html</anchorfile>
      <anchor>a72bfbc059130f8c01c8af2e07a847a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ValueType</name>
      <anchorfile>classScroom_1_1Bookkeeping_1_1Detail_1_1ValueType.html</anchorfile>
      <anchor>a9808ebac4439161c69cab723a9ec5bc9</anchor>
      <arglist>(V value_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VerticalDrawStrategy</name>
    <filename>classVerticalDrawStrategy.html</filename>
    <base>RulerDrawStrategy</base>
    <member kind="function">
      <type>double</type>
      <name>getMajorTickLength</name>
      <anchorfile>classVerticalDrawStrategy.html</anchorfile>
      <anchor>a6b4860c133cb3457e78b60cb610f02a6</anchor>
      <arglist>(double percentage) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDrawAreaSize</name>
      <anchorfile>classVerticalDrawStrategy.html</anchorfile>
      <anchor>ad3184cd2ce611ac18347dcc75fb06324</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawOutline</name>
      <anchorfile>classVerticalDrawStrategy.html</anchorfile>
      <anchor>a7a17e6a8c3d32cc3a06c4b8c41393a61</anchor>
      <arglist>(cairo_t *cr, double lineWidth) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTickLine</name>
      <anchorfile>classVerticalDrawStrategy.html</anchorfile>
      <anchor>a0968963ac37a01f3e02a253e9521f972</anchor>
      <arglist>(cairo_t *cr, double linePosition, double lineWidth, double lineLength) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTickText</name>
      <anchorfile>classVerticalDrawStrategy.html</anchorfile>
      <anchor>a73624c51b9db33e291cbb70f10a686a6</anchor>
      <arglist>(cairo_t *cr, const std::string &amp;label, double linePosition, double labelOffset, double labelAlign, double lineLength) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RulerDrawStrategy::Ptr</type>
      <name>create</name>
      <anchorfile>classVerticalDrawStrategy.html</anchorfile>
      <anchor>a69f32cdf0e0e4fe57b755474e05283bc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>View</name>
    <filename>classView.html</filename>
    <base>ViewInterface</base>
    <base virtualness="virtual">Scroom::Utils::Base</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; View &gt;</type>
      <name>Ptr</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a2dd032af78f555f7f8438b1076e37df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~View</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a03c7de75b3d338c79b0fd0100153ca1d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>View</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>aae3c5d641193151d9aca3484a1e93c81</anchor>
      <arglist>(const View &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>View</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>aef2a4bab2e1d4fad10b858f8304d1b93</anchor>
      <arglist>(View &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>View</type>
      <name>operator=</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ae15a3d0a0394e816da5e314b4f5b1be6</anchor>
      <arglist>(const View &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>View</type>
      <name>operator=</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a339c633439d9687656ebd698784bb747</anchor>
      <arglist>(View &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redraw</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a7a4cd04a39fff643d73565bfeaa058c2</anchor>
      <arglist>(cairo_t *cr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hide</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>adcf1d13f04a74c014c0779fcbeedd751</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPresentation</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a0743988b528555e94ffc92cafec77c7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPresentation</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ae5e716a2256458cc1e9ab15008bcd946</anchor>
      <arglist>(PresentationInterface::Ptr presentation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPresentation</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a0a70183afc50428b82187b478b48ccf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateScrollbars</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a1c6bafe5c25990c0733f6d2b28df717f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateZoom</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a54f60e30804881dcfec8bdbff457a4eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRulers</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ad01af006c74438002516f9697fffc7e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateTextbox</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a53280aa4b3288d4f81d4a840f98e5eb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toolButtonToggled</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a11d0b956439c42a161c962bc9aab5cd2</anchor>
      <arglist>(GtkToggleButton *button)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_newPresentationInterfaces_update</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a969a3d0ea16650328da552f9c105d15a</anchor>
      <arglist>(const std::map&lt; NewPresentationInterface::Ptr, std::string &gt; &amp;newPresentationInterfaces)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_presentation_created</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ac4a77aaf7f803c7ddf77adba6e28a387</anchor>
      <arglist>(const PresentationInterface::Ptr &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_presentation_destroyed</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a10bfd0a564e56de855d3f5e5aa634eb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_configure</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a577e40ee81a286eb3297ee8f42594440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_window_size_changed</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a9dd1ccdb3c0eeaa495fe11594839081c</anchor>
      <arglist>(const Scroom::Utils::Point&lt; int &gt; &amp;newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_zoombox_changed</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>aa0987727d135b9f133c51bf2f45d7ab2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_textbox_value_changed</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ac89d07654772c2f745eb07bb4702cbd0</anchor>
      <arglist>(GtkEditable *editable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_scrollbar_value_changed</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>adb5274f859519e6baa9b759005170509</anchor>
      <arglist>(GtkAdjustment *adjustment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_scrollwheel</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a6bcc1a3b04dc24ad14be19e19fd1ff7e</anchor>
      <arglist>(GdkEventScroll *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_buttonPress</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a2418b690f9ce26fe94d8398b2f409d51</anchor>
      <arglist>(GdkEventButton *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_buttonRelease</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a058c1d7efe7c7d68cbe9cefeb0601bfa</anchor>
      <arglist>(GdkEventButton *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_motion_notify</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ae89d93ace9995157e33f464b31a04799</anchor>
      <arglist>(GdkEventMotion *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullScreen</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a0c5a8a1687c24f152d6966c9cf8eb7f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetFullScreen</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a5cb2ee2c3a800872fdeeac11b835db94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a95faa753386b674958c19010de91adac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>ProgressInterface::Ptr</type>
      <name>getProgressInterface</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a46ed68468d2db5e4a26f66beffdd62f3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSideWidget</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a59499988b6bd33aeb7d92e7353e4230f</anchor>
      <arglist>(std::string title, GtkWidget *w) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSideWidget</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a93e9e10ad85f2094b289b8b4cb1b9380</anchor>
      <arglist>(GtkWidget *w) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToToolbar</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a48a34368a98821187870ba62e21be68d</anchor>
      <arglist>(GtkToolItem *ti) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromToolbar</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ae7a2edff3319e6ade740e74530d60cb5</anchor>
      <arglist>(GtkToolItem *ti) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSelectionListener</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a4da29ddfc7aa06d204eff05db0f1e9d5</anchor>
      <arglist>(SelectionListener::Ptr listener) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPostRenderer</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a832a7a7b6e80728d6ac2a129385007af</anchor>
      <arglist>(PostRenderer::Ptr renderer) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatusMessage</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a4c4917ad3f5556729ed68d30d028c097</anchor>
      <arglist>(const std::string &amp;message) override</arglist>
    </member>
    <member kind="function">
      <type>PresentationInterface::Ptr</type>
      <name>getCurrentPresentation</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a7fe903622fc267facef6c77d72683acb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToolButton</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>af1e3ff8a50481fd48c90280f85c98658</anchor>
      <arglist>(GtkToggleButton *, ToolStateListener::Ptr) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a1e1cc4861ca8e2919be4990c0a8fc8a1</anchor>
      <arglist>(GtkBuilder *scroomXml, const PresentationInterface::Ptr &amp;presentation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>updateScrollbar</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a95a1bbd56174466f67f67c6d4c39551b</anchor>
      <arglist>(GtkAdjustment *adj, int zoom, double value, double presentationStart, double presentationSize, double windowSize)</arglist>
    </member>
    <member kind="enumeration" protection="private">
      <type></type>
      <name>LocationChangeCause</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ae2d38f95cdcab0ebab25ea670f4ebdfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SCROLLBAR</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ae2d38f95cdcab0ebab25ea670f4ebdfba07354fb9b0f0817f5f8d066c09b45a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>TEXTBOX</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ae2d38f95cdcab0ebab25ea670f4ebdfbab1b95d85d5aef4ce4a9a9139063009f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>OTHER</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ae2d38f95cdcab0ebab25ea670f4ebdfbac0bf0bcd8fcc8f0b63b680bf4a379c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>SCROLLBAR</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ae2d38f95cdcab0ebab25ea670f4ebdfba07354fb9b0f0817f5f8d066c09b45a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>TEXTBOX</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ae2d38f95cdcab0ebab25ea670f4ebdfbab1b95d85d5aef4ce4a9a9139063009f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>OTHER</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ae2d38f95cdcab0ebab25ea670f4ebdfbac0bf0bcd8fcc8f0b63b680bf4a379c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>View</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>aa2614af92e98a9841f3cc666a7fc3fd8</anchor>
      <arglist>(GtkBuilder *scroomXml)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Scroom::Utils::Point&lt; double &gt;</type>
      <name>windowPointToPresentationPoint</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ab01e5d6f612fdebbcc349ab3733233d8</anchor>
      <arglist>(Scroom::Utils::Point&lt; double &gt; wp) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Scroom::Utils::Point&lt; double &gt;</type>
      <name>presentationPointToWindowPoint</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>abee25c0d76067e2b4184163e5a75935b</anchor>
      <arglist>(Scroom::Utils::Point&lt; double &gt; presentationpoint) const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Scroom::Utils::Point&lt; double &gt;</type>
      <name>tweakedPosition</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a7c6bc955a9ea12b76b49c2c47d508329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateNewWindowMenu</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ad8081ad7f68e284ce29961be7a6126d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>on_zoombox_changed</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a51a2691c469396780b3cdd884eb2c01e</anchor>
      <arglist>(int newzoom, const Scroom::Utils::Point&lt; double &gt; &amp;mousePos)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateXY</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>acd6ecf221aa9f481ce878435f07a1fc4</anchor>
      <arglist>(const Scroom::Utils::Point&lt; double &gt; &amp;newPos, const LocationChangeCause &amp;source)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkBuilder *</type>
      <name>scroomXml</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a4079918ffbdb0bd5b0453d81db009676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PresentationInterface::Ptr</type>
      <name>presentation</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a37a72d0ac5f018f7db641a6b5efc2dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SidebarManager</type>
      <name>sidebarManager</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>adf597a78b4b8ecce18a14282ab1982c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkWindow *</type>
      <name>window</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a6842509e655b042cbd7af3fe10ded06f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkWidget *</type>
      <name>menubar</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a3ab5bae0060369b9920f210931fe1d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkWidget *</type>
      <name>drawingArea</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>accd8ae17f10cca1c351ac03a33963b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::Point&lt; int &gt;</type>
      <name>drawingAreaSize</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a9a9821e21475adadbc82273131d7006b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>presentationRect</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ad632ab0a3a0297b1e9f7c9635d0b7318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkScrollbar *</type>
      <name>vscrollbar</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>af1697927d1053ca9576b544a3a7e97cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkScrollbar *</type>
      <name>hscrollbar</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a3945d440d66e6550213cbf6f5530501d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkAdjustment *</type>
      <name>vscrollbaradjustment</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>afa1457c9c07dbcb62c2b21970e0370c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkAdjustment *</type>
      <name>hscrollbaradjustment</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a6fa6370911abab261622f09847c67d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkDrawingArea *</type>
      <name>hruler_area</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a00dd10b767367e29c014e29c16f75482</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkDrawingArea *</type>
      <name>vruler_area</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a57c1e4035ac712fbb05d491d2975204b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Ruler::Ptr</type>
      <name>vruler</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ab25b996421407a3b1bbd8769539c1b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Ruler::Ptr</type>
      <name>hruler</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a621dd8944c5ecefc1641c463fcbe0b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkComboBox *</type>
      <name>zoomBox</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a5ea640497f7e937c3925a718826af8f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkListStore *</type>
      <name>zoomItems</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a9f6982b4763964a256c2c32745fe97a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkProgressBar *</type>
      <name>progressBar</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>acb08794f7fb9eaf2142296b64d011072</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkStatusbar *</type>
      <name>statusBar</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>aad7a39e71953dc8969826d8f91077a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkToolbar *</type>
      <name>toolBar</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ab9a4d39ac34cafd97c7b7b31332096a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkToolItem *</type>
      <name>toolBarSeparator</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ab832ddee7f1270101c05330c4a69f649</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkEntry *</type>
      <name>xTextBox</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>aa50d36e279e537688a77efc7088f78c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkEntry *</type>
      <name>yTextBox</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>aac434e0d5f4227c8c1c2eeee2f564c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkWidget *</type>
      <name>statusArea</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a3f31859c80462505442d8f0b4268a2e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GtkWidget *</type>
      <name>toolbarArea</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a765b3cec440263a901ef7570629641d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>toolBarCount</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a71ff40556a2a42e00a7ccfb76b005c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>statusBarContextId</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ae7ddfce80cc3dfa50315247052c31d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>zoom</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a802f478c8446ce100a5b2bb748258934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Freezable&lt; Scroom::Utils::Point&lt; double &gt; &gt;</type>
      <name>position</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a5cf9626f4b686c6f6835d4cfded426ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::optional&lt; Selection &gt;</type>
      <name>selection</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a249f6cb063c917a7fb0c4d431e6a4819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; SelectionListener::Ptr &gt;</type>
      <name>selectionListeners</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>afbad7f69898bdf39d715338a5a91ea94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PostRenderer::Ptr &gt;</type>
      <name>postRenderers</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a79fdf2d035d4043b7c4b8449700764ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; GtkToggleButton *, ToolStateListener::Ptr &gt;</type>
      <name>tools</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ae91605291354259fe55edf6bfef4059e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::Point&lt; double &gt;</type>
      <name>aspectRatio</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ae5ab81cdeaef480357dd3bdef7ca13d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; TweakPresentationPosition &gt;</type>
      <name>tweakPresentationPosition</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a5520d4697172b00423b7dfc8562be43a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; TweakPositionTextBox &gt;</type>
      <name>tweakPositionTextBox</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ac1502705428141a89903b054fa002c7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; TweakRulers &gt;</type>
      <name>tweakRulers</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a4d9f207f3443cd9c9c07458d2131726d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, std::shared_ptr&lt; ITweakSelection &gt; &gt;</type>
      <name>tweakSelection</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a074b15cf61b0b77505af7174f28aa316</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gint</type>
      <name>modifiermove</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ac787eb48a51975fecdd2d44b3297033c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::Point&lt; double &gt;</type>
      <name>cachedPoint</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>a445c889fe2f02766881327266a582be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProgressBarManager::Ptr</type>
      <name>progressBarManager</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>aa593dc1b35dc32ddeaae7a3951e33a9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Utils::WeakKeyMap&lt; PresentationInterface::WeakPtr, GtkWidget * &gt;</type>
      <name>presentations</name>
      <anchorfile>classView.html</anchorfile>
      <anchor>ad700e3d5983a28c8c7a924935a43b6aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Viewable</name>
    <filename>classViewable.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Viewable &gt;</type>
      <name>Ptr</name>
      <anchorfile>classViewable.html</anchorfile>
      <anchor>a5dec2df09a50cc8bdbcc6c3b2ca11417</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Viewable &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classViewable.html</anchorfile>
      <anchor>aeafab0c298443b299486714b79087903</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>open</name>
      <anchorfile>classViewable.html</anchorfile>
      <anchor>a3e17fe21b5e7bdb916b5c7cbfc65ffbd</anchor>
      <arglist>(ViewInterface::WeakPtr vi)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classViewable.html</anchorfile>
      <anchor>a8068b9af988bf0eb34fad7f8d0c79722</anchor>
      <arglist>(ViewInterface::WeakPtr vi)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Detail::ViewData</name>
    <filename>classDetail_1_1ViewData.html</filename>
    <base>ViewInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ViewData &gt;</type>
      <name>Ptr</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>aed9f0a26b4cc5164ed9060c18f476690</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ViewInterface::Ptr</type>
      <name>parent</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>a6e447a860e908d3c38b4fd35b0f4570a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>a9ab3d8a90f0af9237c59e05e5f0763ad</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>ProgressInterface::Ptr</type>
      <name>getProgressInterface</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>a6d34b956f5ec5688fad889293ce0e14d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSideWidget</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>a2886890125b4d0f26f5d21862325565d</anchor>
      <arglist>(std::string title, GtkWidget *w) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSideWidget</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>ab76c5035c77c0f095f84ea1e2e70a967</anchor>
      <arglist>(GtkWidget *w) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToToolbar</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>a2e43e8ed5b5c1bca82d82036b7160efe</anchor>
      <arglist>(GtkToolItem *ti) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromToolbar</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>a3021b5127d04d0a184852d2faa035b7d</anchor>
      <arglist>(GtkToolItem *ti) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSelectionListener</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>a2dc365b4c62b75b4fabd8eb531c8cd6a</anchor>
      <arglist>(SelectionListener::Ptr ptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPostRenderer</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>a718eedfd69f587702ef7d17029188b67</anchor>
      <arglist>(PostRenderer::Ptr ptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatusMessage</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>ae7b88c8003cc2c23ae0c6d52b0f2d55b</anchor>
      <arglist>(const std::string &amp;string) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; PresentationInterface &gt;</type>
      <name>getCurrentPresentation</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>acbd44fc73a4b20e8d6320b4b1ccd6502</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToolButton</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>aab6aab227484d548f5d6c513a206d999</anchor>
      <arglist>(GtkToggleButton *button, ToolStateListener::Ptr ptr) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ViewData::Ptr</type>
      <name>create</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>a12f82ade396e0a166996c9c7bd9b9a83</anchor>
      <arglist>(const ViewInterface::WeakPtr &amp;parent)</arglist>
    </member>
    <member kind="variable">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>presentationArea</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>aa2a57607b4e38081e5fe3681817cdd61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>zoom</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>aa6639bf75b0a9b2196992a2bc07827f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scroom::Bitmap::BitmapSurface::Ptr</type>
      <name>image</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>ad57cf0af2257dcd054f1c08d0dda5927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ViewInterface::WeakPtr</type>
      <name>weakParent</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>a6fc56db570e1b05b46f5b20ab3cd4526</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ViewData</name>
      <anchorfile>classDetail_1_1ViewData.html</anchorfile>
      <anchor>a7a3aef11a2c073e2cae0be719360d696</anchor>
      <arglist>(ViewInterface::WeakPtr parent_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ViewInterface</name>
    <filename>classViewInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ViewInterface &gt;</type>
      <name>Ptr</name>
      <anchorfile>classViewInterface.html</anchorfile>
      <anchor>ab8484d8a48d246c52ebcff8900a7ee99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; ViewInterface &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classViewInterface.html</anchorfile>
      <anchor>a3727a3c9912ea31b57d62a8ecfa854bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>classViewInterface.html</anchorfile>
      <anchor>a0c19f67bde7e15534e876edad9e35a31</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ProgressInterface::Ptr</type>
      <name>getProgressInterface</name>
      <anchorfile>classViewInterface.html</anchorfile>
      <anchor>a32ec89fa5599b534786d390d171b7287</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addSideWidget</name>
      <anchorfile>classViewInterface.html</anchorfile>
      <anchor>aa178b3563e9cea8bc9e4df22499d5717</anchor>
      <arglist>(std::string title, GtkWidget *w)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>removeSideWidget</name>
      <anchorfile>classViewInterface.html</anchorfile>
      <anchor>a214f359b8752b7c41923785cb8008aae</anchor>
      <arglist>(GtkWidget *w)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addToToolbar</name>
      <anchorfile>classViewInterface.html</anchorfile>
      <anchor>a7f744383e0980253ae13e642dc7c574b</anchor>
      <arglist>(GtkToolItem *ti)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>removeFromToolbar</name>
      <anchorfile>classViewInterface.html</anchorfile>
      <anchor>a44a3236d0a39912b2eb0d3e9745cbea4</anchor>
      <arglist>(GtkToolItem *ti)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerSelectionListener</name>
      <anchorfile>classViewInterface.html</anchorfile>
      <anchor>a9ef9525205c5b997fd578ef5212b1e9d</anchor>
      <arglist>(SelectionListener::Ptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerPostRenderer</name>
      <anchorfile>classViewInterface.html</anchorfile>
      <anchor>a1b4f6281ac9222c2c13306521439f465</anchor>
      <arglist>(PostRenderer::Ptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setStatusMessage</name>
      <anchorfile>classViewInterface.html</anchorfile>
      <anchor>ab829d62a1f5ea83ab0e9caf0ac683655</anchor>
      <arglist>(const std::string &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; PresentationInterface &gt;</type>
      <name>getCurrentPresentation</name>
      <anchorfile>classViewInterface.html</anchorfile>
      <anchor>a360fc5fb8078faa5c25b789fca076690</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addToolButton</name>
      <anchorfile>classViewInterface.html</anchorfile>
      <anchor>a0270c644d2549cde226519ff75c9c3a1</anchor>
      <arglist>(GtkToggleButton *, ToolStateListener::Ptr)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>anonymous_namespace{determine-size-test.cc}::ViewInterfaceDummy</name>
    <filename>classanonymous__namespace_02determine-size-test_8cc_03_1_1ViewInterfaceDummy.html</filename>
    <base>ViewInterface</base>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ViewInterfaceDummy.html</anchorfile>
      <anchor>a196775db299da474b88d5fc8ad0318b8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>ProgressInterface::Ptr</type>
      <name>getProgressInterface</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ViewInterfaceDummy.html</anchorfile>
      <anchor>a5468ec6903f2781b3ce57173f8c7890b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSideWidget</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ViewInterfaceDummy.html</anchorfile>
      <anchor>a57ac9216e15df2511a8999f1827e80b0</anchor>
      <arglist>(std::string, GtkWidget *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSideWidget</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ViewInterfaceDummy.html</anchorfile>
      <anchor>a4dc2df87da9833ce252f8f24c2fe3ef7</anchor>
      <arglist>(GtkWidget *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToToolbar</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ViewInterfaceDummy.html</anchorfile>
      <anchor>a170afd694b3c86d61d0ba75d3d3b7826</anchor>
      <arglist>(GtkToolItem *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromToolbar</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ViewInterfaceDummy.html</anchorfile>
      <anchor>a8b52dadf8a8f62af6916a562756fb143</anchor>
      <arglist>(GtkToolItem *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSelectionListener</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ViewInterfaceDummy.html</anchorfile>
      <anchor>a6107cd5ffb0a09b5c5c32e092a706380</anchor>
      <arglist>(SelectionListener::Ptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPostRenderer</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ViewInterfaceDummy.html</anchorfile>
      <anchor>aa9fa1e1dbda3263d1acb6320cdbababb</anchor>
      <arglist>(PostRenderer::Ptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatusMessage</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ViewInterfaceDummy.html</anchorfile>
      <anchor>ae20d40145e9b7e2d1744add0e6682b2e</anchor>
      <arglist>(const std::string &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; PresentationInterface &gt;</type>
      <name>getCurrentPresentation</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ViewInterfaceDummy.html</anchorfile>
      <anchor>a4f20a45ee2245b1bb2960fa49609ee05</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToolButton</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ViewInterfaceDummy.html</anchorfile>
      <anchor>a4fd11a79d3a6f9fcba2c7df6a542630f</anchor>
      <arglist>(GtkToggleButton *, ToolStateListener::Ptr) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ViewInterfaceDummy.html</anchorfile>
      <anchor>af970aae874c4346de357584087cb2779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ViewInterfaceDummy</name>
      <anchorfile>classanonymous__namespace_02determine-size-test_8cc_03_1_1ViewInterfaceDummy.html</anchorfile>
      <anchor>a69782903c722699dce7bf2bf680c1489</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ViewInterfaceStub</name>
    <filename>classViewInterfaceStub.html</filename>
    <base>ViewInterface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ViewInterfaceStub &gt;</type>
      <name>Ptr</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>a9b629df9d4507064dd1e81409346b1bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>a42b16797eca07d98c42845b011dcde0b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>ProgressInterface::Ptr</type>
      <name>getProgressInterface</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>ac9404012084051f2531f4046ec33bff3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSideWidget</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>aa81ccc74e1f4a44ea552aaaff7d0882e</anchor>
      <arglist>(std::string, GtkWidget *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSideWidget</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>a224f1164c2d81d5e0fb207a67a3b376c</anchor>
      <arglist>(GtkWidget *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToToolbar</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>a5834b93d5d1deaae312bad024e1490ac</anchor>
      <arglist>(GtkToolItem *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromToolbar</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>a600e8d3ea30dc03f0395dc7a48531e39</anchor>
      <arglist>(GtkToolItem *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSelectionListener</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>a0731df3975e6c20d742702e64ebb07ee</anchor>
      <arglist>(SelectionListener::Ptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPostRenderer</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>a89bd124b2c0c601f020c6db8426ba997</anchor>
      <arglist>(PostRenderer::Ptr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatusMessage</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>aaa7217667ff8f396148a0d4c4cd8f529</anchor>
      <arglist>(const std::string &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; PresentationInterface &gt;</type>
      <name>getCurrentPresentation</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>a30923a1dd4a190180f93ed9fc9744d54</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToolButton</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>aab4921d09072819c6b56a08db98f6ca2</anchor>
      <arglist>(GtkToggleButton *, ToolStateListener::Ptr) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>a75a9d07a8250a1cedc6a478e9d278a0d</anchor>
      <arglist>(ProgressInterface::Ptr pi)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ViewInterfaceStub</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>a6ccb5dfc8f201708e96545f62295cc77</anchor>
      <arglist>(ProgressInterface::Ptr pi)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ProgressInterface::Ptr</type>
      <name>pi</name>
      <anchorfile>classViewInterfaceStub.html</anchorfile>
      <anchor>a1da471fb3e89384c2461ee36683e413d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ViewObserver</name>
    <filename>classViewObserver.html</filename>
    <base protection="private">Interface</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ViewObserver &gt;</type>
      <name>Ptr</name>
      <anchorfile>classViewObserver.html</anchorfile>
      <anchor>ab3059f4a941f03cf60e52f51e05afca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Scroom::Bookkeeping::Token</type>
      <name>viewAdded</name>
      <anchorfile>classViewObserver.html</anchorfile>
      <anchor>ac38ff67332a06737375cd04d83532e9d</anchor>
      <arglist>(ViewInterface::Ptr v)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WaitForAsyncOp</name>
    <filename>classWaitForAsyncOp.html</filename>
    <member kind="function">
      <type></type>
      <name>WaitForAsyncOp</name>
      <anchorfile>classWaitForAsyncOp.html</anchorfile>
      <anchor>a291da8348e9afb51c6379ed7a1c0c7d7</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WaitForAsyncOp</name>
      <anchorfile>classWaitForAsyncOp.html</anchorfile>
      <anchor>a2b95f992294ff6f7f1a3ee5e4ed11fe3</anchor>
      <arglist>(const WaitForAsyncOp &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WaitForAsyncOp</name>
      <anchorfile>classWaitForAsyncOp.html</anchorfile>
      <anchor>ab465439e29d9c0f533f615fb717bb16d</anchor>
      <arglist>(WaitForAsyncOp &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type>WaitForAsyncOp</type>
      <name>operator=</name>
      <anchorfile>classWaitForAsyncOp.html</anchorfile>
      <anchor>a91036cff5c95a72959b8833bbcf7f0e0</anchor>
      <arglist>(const WaitForAsyncOp &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>WaitForAsyncOp</type>
      <name>operator=</name>
      <anchorfile>classWaitForAsyncOp.html</anchorfile>
      <anchor>a8d7d040b74de4972248219bf01037408</anchor>
      <arglist>(WaitForAsyncOp &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WaitForAsyncOp</name>
      <anchorfile>classWaitForAsyncOp.html</anchorfile>
      <anchor>afe80bab9f0e30d034b12cb5a22432d5d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classWaitForAsyncOp.html</anchorfile>
      <anchor>a01dcf09800aaba90cc168f4beac3e8c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classWaitForAsyncOp.html</anchorfile>
      <anchor>ac603ab85a8db323a7c22740e4505a9f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scroom::Semaphore</type>
      <name>s</name>
      <anchorfile>classWaitForAsyncOp.html</anchorfile>
      <anchor>af9583d7eadb6333e88c3592109c691c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>started</name>
      <anchorfile>classWaitForAsyncOp.html</anchorfile>
      <anchor>ab72f599197e44866f20bbdecfcc61bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>struct timespec</type>
      <name>t</name>
      <anchorfile>classWaitForAsyncOp.html</anchorfile>
      <anchor>af828640570dd3bf9ea2452718685b090</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadPool::WeakQueue</name>
    <filename>classThreadPool_1_1WeakQueue.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; WeakQueue &gt;</type>
      <name>Ptr</name>
      <anchorfile>classThreadPool_1_1WeakQueue.html</anchorfile>
      <anchor>a8cf12332c4d158290d23075252e6c359</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; WeakQueue &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>classThreadPool_1_1WeakQueue.html</anchorfile>
      <anchor>a976cc5dcd2e4f092f630e62960278a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WeakQueue</name>
      <anchorfile>classThreadPool_1_1WeakQueue.html</anchorfile>
      <anchor>a57fb885957b226322315678fb6602697</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeakQueue</name>
      <anchorfile>classThreadPool_1_1WeakQueue.html</anchorfile>
      <anchor>a2418ea09f16eb53150ebb594df3ca315</anchor>
      <arglist>(const WeakQueue &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeakQueue</name>
      <anchorfile>classThreadPool_1_1WeakQueue.html</anchorfile>
      <anchor>a5f6a2803545db98255cd837f4ab0ae93</anchor>
      <arglist>(WeakQueue &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>WeakQueue &amp;</type>
      <name>operator=</name>
      <anchorfile>classThreadPool_1_1WeakQueue.html</anchorfile>
      <anchor>a1b2df39c5c301f3e489493eaab3f82c7</anchor>
      <arglist>(const WeakQueue &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>WeakQueue &amp;</type>
      <name>operator=</name>
      <anchorfile>classThreadPool_1_1WeakQueue.html</anchorfile>
      <anchor>a47143fa3c788e1d4cc5477afb6c4fac9</anchor>
      <arglist>(WeakQueue &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Scroom::Detail::ThreadPool::QueueImpl &gt;</type>
      <name>get</name>
      <anchorfile>classThreadPool_1_1WeakQueue.html</anchorfile>
      <anchor>a1faec7781376e793e0a71688ef66105b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr</type>
      <name>create</name>
      <anchorfile>classThreadPool_1_1WeakQueue.html</anchorfile>
      <anchor>a505621d98fa3f01d828eb90e8ec23bbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WeakQueue</name>
      <anchorfile>classThreadPool_1_1WeakQueue.html</anchorfile>
      <anchor>a49c6500371382f9615655df771efbac0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; Scroom::Detail::ThreadPool::QueueImpl &gt;</type>
      <name>qi</name>
      <anchorfile>classThreadPool_1_1WeakQueue.html</anchorfile>
      <anchor>ac562024addfe4c868fbe0d3237a9fc16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WorkInterface</name>
    <filename>classWorkInterface.html</filename>
    <base protection="private">Interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>doWork</name>
      <anchorfile>classWorkInterface.html</anchorfile>
      <anchor>ada2f2ff83bef1a63cd7285adfbc41f61</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{colormaphelpers_test.cc}</name>
    <filename>namespaceanonymous__namespace_02colormaphelpers__test_8cc_03.html</filename>
    <class kind="struct">anonymous_namespace{colormaphelpers_test.cc}::Data</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceanonymous__namespace_02colormaphelpers__test_8cc_03.html</anchorfile>
      <anchor>aa70981b2344e37a14341b0b479916284</anchor>
      <arglist>(std::ostream &amp;os, const Data &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>Blue</name>
      <anchorfile>namespaceanonymous__namespace_02colormaphelpers__test_8cc_03.html</anchorfile>
      <anchor>aa0b842d6fc89cf62b5042ef409096537</anchor>
      <arglist>(0, 0, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>accuracy</name>
      <anchorfile>namespaceanonymous__namespace_02colormaphelpers__test_8cc_03.html</anchorfile>
      <anchor>aa83cf2d27bfc2e17313700fba52bb700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; Data &gt;</type>
      <name>helpers</name>
      <anchorfile>namespaceanonymous__namespace_02colormaphelpers__test_8cc_03.html</anchorfile>
      <anchor>ac190d6a3142f07cfdcbcf63627042321</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{colormapprovider.cc}</name>
    <filename>namespaceanonymous__namespace_02colormapprovider_8cc_03.html</filename>
    <member kind="function">
      <type>void</type>
      <name>on_colormap_selected</name>
      <anchorfile>namespaceanonymous__namespace_02colormapprovider_8cc_03.html</anchorfile>
      <anchor>a06bfc9ab2418758baf13c001000a0885</anchor>
      <arglist>(GtkTreeView *tv, gpointer user_data)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{determine-size-test.cc}</name>
    <filename>namespaceanonymous__namespace_02determine-size-test_8cc_03.html</filename>
    <class kind="class">anonymous_namespace{determine-size-test.cc}::PresentationInterfaceStub</class>
    <class kind="class">anonymous_namespace{determine-size-test.cc}::ResizablePresentationInterfaceStub</class>
    <class kind="class">anonymous_namespace{determine-size-test.cc}::ViewInterfaceDummy</class>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{gtkhelper-tests.cc}</name>
    <filename>namespaceanonymous__namespace_02gtkhelper-tests_8cc_03.html</filename>
    <class kind="class">anonymous_namespace{gtkhelper-tests.cc}::B</class>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{helpers.cc}</name>
    <filename>namespaceanonymous__namespace_02helpers_8cc_03.html</filename>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{layeroperations.cc}</name>
    <filename>namespaceanonymous__namespace_02layeroperations_8cc_03.html</filename>
    <member kind="function">
      <type>std::shared_ptr&lt; unsigned char &gt;</type>
      <name>shared_malloc</name>
      <anchorfile>namespaceanonymous__namespace_02layeroperations_8cc_03.html</anchorfile>
      <anchor>a4723c72ad8f18c63e337ca9301f7f3ef</anchor>
      <arglist>(size_t size)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{progressbarmanager.cc}</name>
    <filename>namespaceanonymous__namespace_02progressbarmanager_8cc_03.html</filename>
    <class kind="class">anonymous_namespace{progressbarmanager.cc}::ProgressBarPulser</class>
    <member kind="function">
      <type>ProgressBarPulser::Ptr</type>
      <name>instance</name>
      <anchorfile>namespaceanonymous__namespace_02progressbarmanager_8cc_03.html</anchorfile>
      <anchor>a1cd7ce2821db8912b252ffaa3ec97af9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{sampleiterator-tests.cc}</name>
    <filename>namespaceanonymous__namespace_02sampleiterator-tests_8cc_03.html</filename>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>testData</name>
      <anchorfile>namespaceanonymous__namespace_02sampleiterator-tests_8cc_03.html</anchorfile>
      <anchor>a8f9ecb9b9edcd3f6d2b5865d6c1b8ab6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bit_depths</name>
      <anchorfile>namespaceanonymous__namespace_02sampleiterator-tests_8cc_03.html</anchorfile>
      <anchor>aa69fb4a20df5ff7d8dd3b9bd3b5dd1c1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>initial_offsets</name>
      <anchorfile>namespaceanonymous__namespace_02sampleiterator-tests_8cc_03.html</anchorfile>
      <anchor>aa7b9d1b6540dbb5b682005cb742562ae</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>deltas</name>
      <anchorfile>namespaceanonymous__namespace_02sampleiterator-tests_8cc_03.html</anchorfile>
      <anchor>a437d26ece966bc7a8ba58cdaf7674e67</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{sizedeterminer.cc}</name>
    <filename>namespaceanonymous__namespace_02sizedeterminer_8cc_03.html</filename>
    <member kind="function">
      <type>Scroom::Utils::Rectangle&lt; double &gt;</type>
      <name>DetermineSize</name>
      <anchorfile>namespaceanonymous__namespace_02sizedeterminer_8cc_03.html</anchorfile>
      <anchor>a00905ae534493c5951489c3df27a7b92</anchor>
      <arglist>(const std::list&lt; PresentationInterface::Ptr &gt; &amp;presentations)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; K &gt;</type>
      <name>keys</name>
      <anchorfile>namespaceanonymous__namespace_02sizedeterminer_8cc_03.html</anchorfile>
      <anchor>ae83cee782a5c3b96625583459ab5582c</anchor>
      <arglist>(std::map&lt; K, V &gt; const &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{threadpoolimpl.cc}</name>
    <filename>namespaceanonymous__namespace_02threadpoolimpl_8cc_03.html</filename>
    <class kind="class">anonymous_namespace{threadpoolimpl.cc}::ThreadList</class>
    <class kind="class">anonymous_namespace{threadpoolimpl.cc}::ThreadWaiter</class>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>NotifyThreadList</name>
      <anchorfile>namespaceanonymous__namespace_02threadpoolimpl_8cc_03.html</anchorfile>
      <anchor>a35f73b3d9bd57b7e8ee264607fc753a4</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; t, const std::string &amp;s)</arglist>
    </member>
    <member kind="variable">
      <type>ThreadWaiter</type>
      <name>waiter</name>
      <anchorfile>namespaceanonymous__namespace_02threadpoolimpl_8cc_03.html</anchorfile>
      <anchor>a32b816d0a8f58ae1cd2d35e52e0b93ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{tiffsource.cc}</name>
    <filename>namespaceanonymous__namespace_02tiffsource_8cc_03.html</filename>
    <member kind="typedef">
      <type>std::pair&lt; ttag_t, std::string &gt;</type>
      <name>TagInfo</name>
      <anchorfile>namespaceanonymous__namespace_02tiffsource_8cc_03.html</anchorfile>
      <anchor>a96015f6d1cd3f99d868d00b658fc6702</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TIFFGetFieldChecked</name>
      <anchorfile>namespaceanonymous__namespace_02tiffsource_8cc_03.html</anchorfile>
      <anchor>a62e82fb965088d37460d098c1084fca1</anchor>
      <arglist>(const TIFFPtr &amp;file, const TagInfo &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TIFFGetFieldCheckedOr</name>
      <anchorfile>namespaceanonymous__namespace_02tiffsource_8cc_03.html</anchorfile>
      <anchor>a371dccebed7623814b28704c8243e7f5</anchor>
      <arglist>(const TIFFPtr &amp;file, const TagInfo &amp;tag, T default_value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>approx</name>
      <anchorfile>namespaceanonymous__namespace_02tiffsource_8cc_03.html</anchorfile>
      <anchor>a21d7b2d4f86f5c8ebfd822f27f5f9417</anchor>
      <arglist>(const BitmapMetaData &amp;left, const BitmapMetaData &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TIFFCloseUnlessNull</name>
      <anchorfile>namespaceanonymous__namespace_02tiffsource_8cc_03.html</anchorfile>
      <anchor>a7f913135a0ac4c36686a040acd700495</anchor>
      <arglist>(TIFF *tif)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{tiledbitmappresentation.cc}</name>
    <filename>namespaceanonymous__namespace_02tiledbitmappresentation_8cc_03.html</filename>
    <class kind="class">anonymous_namespace{tiledbitmappresentation.cc}::OpenTiledBitmapAsPresentation</class>
    <class kind="class">anonymous_namespace{tiledbitmappresentation.cc}::TiledBitmapPresentation</class>
    <member kind="function">
      <type>PipetteLayerOperations::PipetteColor</type>
      <name>sumPipetteColors</name>
      <anchorfile>namespaceanonymous__namespace_02tiledbitmappresentation_8cc_03.html</anchorfile>
      <anchor>abae3a7fd8f52b1b6ce0a5e0252747cf3</anchor>
      <arglist>(const PipetteLayerOperations::PipetteColor &amp;lhs, const PipetteLayerOperations::PipetteColor &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PipetteLayerOperations::PipetteColor</type>
      <name>dividePipetteColors</name>
      <anchorfile>namespaceanonymous__namespace_02tiledbitmappresentation_8cc_03.html</anchorfile>
      <anchor>a35301cfe472c7f8d343c5d6a23d8da30</anchor>
      <arglist>(PipetteLayerOperations::PipetteColor elements, const int divisor)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{transparentoverlaypresentation.cc}</name>
    <filename>namespaceanonymous__namespace_02transparentoverlaypresentation_8cc_03.html</filename>
    <class kind="struct">anonymous_namespace{transparentoverlaypresentation.cc}::ColorComparer</class>
    <member kind="variable">
      <type>const std::list&lt; Color &gt;</type>
      <name>colors</name>
      <anchorfile>namespaceanonymous__namespace_02transparentoverlaypresentation_8cc_03.html</anchorfile>
      <anchor>a5d2074d7840f9d66c2b18260065ef697</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>anonymous_namespace{transparentoverlayviewinfo.cc}</name>
    <filename>namespaceanonymous__namespace_02transparentoverlayviewinfo_8cc_03.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setToggleButtonColor</name>
      <anchorfile>namespaceanonymous__namespace_02transparentoverlayviewinfo_8cc_03.html</anchorfile>
      <anchor>a706649399a1cf1938cfbfed014fd3917</anchor>
      <arglist>(GtkWidget *w, PresentationInterface::Ptr const &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Colors</name>
    <filename>namespaceColors.html</filename>
    <member kind="function">
      <type>const Color</type>
      <name>OUT_OF_BOUNDS</name>
      <anchorfile>namespaceColors.html</anchorfile>
      <anchor>a610c48d1b47f4fe0d23399eb2a4f9b7f</anchor>
      <arglist>(0.75, 0.75, 1)</arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>OUT_OF_BOUNDS</name>
      <anchorfile>namespaceColors.html</anchorfile>
      <anchor>a2229f384a154a2dedc09dc7b2b7896dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Color</type>
      <name>IN_BOUNDS</name>
      <anchorfile>namespaceColors.html</anchorfile>
      <anchor>ac76689c847014b9df2670be51d618b00</anchor>
      <arglist>(1, 1, 1)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>conf</name>
    <filename>namespaceconf.html</filename>
    <member kind="variable">
      <type>string</type>
      <name>project</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>a45653c983098153b78e33600e39230eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>copyright</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>a33fa97cf51dcb25970fbf53f10159589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>author</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>a637c239d256432248aa8d9f3ab0b8c52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>extensions</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>ae475e080536acb271a0a0efe56c3ba42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>templates_path</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>ae850ae634911b713e036b43894fdd525</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>exclude_patterns</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>a7ad48fb6f3e9b129c02346ea0d3527c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>html_theme</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>a6c3bfcc1a44546c1c75ce20f55bd0fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>html_static_path</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>af4fb5d8851ccaade135c2668dd3ced41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dictionary</type>
      <name>html_theme_options</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>aeaafa42217d24810edc9b116b88a4585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dictionary</type>
      <name>doxylink</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>ac4ba62f5ac3d629ef12907f914aa2aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>html_favicon</name>
      <anchorfile>namespaceconf.html</anchorfile>
      <anchor>ac2a0566788a90720ba8d852f67eeda76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Detail</name>
    <filename>namespaceDetail.html</filename>
    <class kind="class">Detail::ViewData</class>
    <member kind="function">
      <type>double</type>
      <name>computeC</name>
      <anchorfile>namespaceDetail.html</anchorfile>
      <anchor>a788802f9f5732db966a27e302696fa53</anchor>
      <arglist>(double c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call_delete</name>
      <anchorfile>namespaceDetail.html</anchorfile>
      <anchor>ade7e310c6f49be3b6e0ded45bd574f9b</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>threadPoolExecute</name>
      <anchorfile>namespaceDetail.html</anchorfile>
      <anchor>aa88799fa3c308f1c905a094e2555a26b</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; fn)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>fmt</name>
    <filename>namespacefmt.html</filename>
    <class kind="struct">fmt::formatter&lt; Scroom::Utils::Point&lt; T &gt; &gt;</class>
    <class kind="struct">fmt::formatter&lt; Scroom::Utils::Rectangle&lt; T &gt; &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>Scroom</name>
    <filename>namespaceScroom.html</filename>
    <namespace>Scroom::Bitmap</namespace>
    <namespace>Scroom::Bookkeeping</namespace>
    <namespace>Scroom::ColormapImpl</namespace>
    <namespace>Scroom::Detail</namespace>
    <namespace>Scroom::GtkHelpers</namespace>
    <namespace>Scroom::GtkTestHelpers</namespace>
    <namespace>Scroom::MemoryBlobs</namespace>
    <namespace>Scroom::MemoryBlocks</namespace>
    <namespace>Scroom::Metadata</namespace>
    <namespace>Scroom::Tiff</namespace>
    <namespace>Scroom::TiledBitmap</namespace>
    <namespace>Scroom::Utils</namespace>
    <class kind="class">Scroom::Semaphore</class>
  </compound>
  <compound kind="namespace">
    <name>Scroom::Bitmap</name>
    <filename>namespaceScroom_1_1Bitmap.html</filename>
    <class kind="class">Scroom::Bitmap::BitmapSurface</class>
    <class kind="class">Scroom::Bitmap::SampleIterator</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceScroom_1_1Bitmap.html</anchorfile>
      <anchor>a46a1a3acb2ff4ba47611ec022bbfa1ef</anchor>
      <arglist>(std::ostream &amp;os, const SampleIterator&lt; T &gt; &amp;it)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::Bookkeeping</name>
    <filename>namespaceScroom_1_1Bookkeeping.html</filename>
    <namespace>Scroom::Bookkeeping::Detail</namespace>
    <class kind="class">Scroom::Bookkeeping::Map</class>
    <class kind="class">Scroom::Bookkeeping::MapBase</class>
    <class kind="class">Scroom::Bookkeeping::Token</class>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Detail::TokenImpl &gt;</type>
      <name>WeakToken</name>
      <anchorfile>namespaceScroom_1_1Bookkeeping.html</anchorfile>
      <anchor>aa859536c2894d3c9e1163bc1e2048bab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::Bookkeeping::Detail</name>
    <filename>namespaceScroom_1_1Bookkeeping_1_1Detail.html</filename>
    <class kind="class">Scroom::Bookkeeping::Detail::LValue</class>
    <class kind="class">Scroom::Bookkeeping::Detail::MapTokenImpl</class>
    <class kind="struct">Scroom::Bookkeeping::Detail::MapType</class>
    <class kind="struct">Scroom::Bookkeeping::Detail::MapType&lt; std::weak_ptr&lt; K &gt;, V &gt;</class>
    <class kind="class">Scroom::Bookkeeping::Detail::TokenAddition</class>
    <class kind="class">Scroom::Bookkeeping::Detail::TokenImpl</class>
    <class kind="class">Scroom::Bookkeeping::Detail::ValueType</class>
  </compound>
  <compound kind="namespace">
    <name>Scroom::ColormapImpl</name>
    <filename>namespaceScroom_1_1ColormapImpl.html</filename>
    <class kind="class">Scroom::ColormapImpl::ColormapPlugin</class>
    <class kind="class">Scroom::ColormapImpl::ColormapProvider</class>
    <class kind="class">Scroom::ColormapImpl::Colormaps</class>
    <member kind="enumvalue">
      <name>COLUMN_NAME</name>
      <anchorfile>namespaceScroom_1_1ColormapImpl.html</anchorfile>
      <anchor>a96a49dee46290c75074b156cdd5b6a62a0fb964c09532b084b7ab3c6ab4b15459</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLUMN_POINTER</name>
      <anchorfile>namespaceScroom_1_1ColormapImpl.html</anchorfile>
      <anchor>a96a49dee46290c75074b156cdd5b6a62a832330cba15b863a66c9c9d6177d551c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>N_COLUMNS</name>
      <anchorfile>namespaceScroom_1_1ColormapImpl.html</anchorfile>
      <anchor>a96a49dee46290c75074b156cdd5b6a62ab6276a6e8897bd5f844a2f9f0970a5bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::Detail</name>
    <filename>namespaceScroom_1_1Detail.html</filename>
    <namespace>Scroom::Detail::ThreadPool</namespace>
  </compound>
  <compound kind="namespace">
    <name>Scroom::Detail::ThreadPool</name>
    <filename>namespaceScroom_1_1Detail_1_1ThreadPool.html</filename>
    <class kind="class">Scroom::Detail::ThreadPool::FunctionAdditor</class>
    <class kind="class">Scroom::Detail::ThreadPool::FunctionMultiplier</class>
    <class kind="class">Scroom::Detail::ThreadPool::QueueImpl</class>
    <class kind="class">Scroom::Detail::ThreadPool::QueueLock</class>
    <member kind="function">
      <type>::ThreadPool::Ptr</type>
      <name>getDeleter</name>
      <anchorfile>namespaceScroom_1_1Detail_1_1ThreadPool.html</anchorfile>
      <anchor>adbdff2f494948417786589c465d0644a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::GtkHelpers</name>
    <filename>namespaceScroom_1_1GtkHelpers.html</filename>
    <namespace>Scroom::GtkHelpers::Detail</namespace>
    <member kind="function">
      <type>std::pair&lt; GSourceFunc, gpointer &gt;</type>
      <name>wrap</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>ac6ea38c746831ab3ff96ce29ffe5bf7a</anchor>
      <arglist>(T f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>on_ui_thread</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>a2ade52a9fdfe46700036def64d00f9da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_on_ui_thread</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>ac2709d76d34bc51f4310e34502d17ed1</anchor>
      <arglist>(T f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_on_ui_thread_and_wait</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>a37a36328ffc6b0e7468a02d64724c21d</anchor>
      <arglist>(T f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync_on_ui_thread</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>a41d93c131774cfff3137ec807ead3e94</anchor>
      <arglist>(T f)</arglist>
    </member>
    <member kind="function">
      <type>cairo_rectangle_int_t</type>
      <name>createCairoIntRectangle</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>a5260b667cc757819028aac849da3304e</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>GtkWindow *</type>
      <name>get_parent_window</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers.html</anchorfile>
      <anchor>a68ad2ca25cec0ca8c5f9174039ea86fa</anchor>
      <arglist>(GtkWidget *widget)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::GtkHelpers::Detail</name>
    <filename>namespaceScroom_1_1GtkHelpers_1_1Detail.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>gtkWrapper</name>
      <anchorfile>namespaceScroom_1_1GtkHelpers_1_1Detail.html</anchorfile>
      <anchor>a49fe9082a2e319cd57551e663b5a8f3e</anchor>
      <arglist>(gpointer data)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::GtkTestHelpers</name>
    <filename>namespaceScroom_1_1GtkTestHelpers.html</filename>
    <class kind="class">Scroom::GtkTestHelpers::GtkMainLoop</class>
  </compound>
  <compound kind="namespace">
    <name>Scroom::MemoryBlobs</name>
    <filename>namespaceScroom_1_1MemoryBlobs.html</filename>
    <namespace>Scroom::MemoryBlobs::Detail</namespace>
    <namespace>Scroom::MemoryBlobs::Page</namespace>
    <namespace>Scroom::MemoryBlobs::RawPageData</namespace>
    <class kind="class">Scroom::MemoryBlobs::Blob</class>
    <class kind="class">Scroom::MemoryBlobs::PageProvider</class>
    <member kind="typedef">
      <type>std::list&lt; Page::Ptr &gt;</type>
      <name>PageList</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs.html</anchorfile>
      <anchor>aa30db602fa289e14a9db8bfd0f36d5ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::MemoryBlobs::Detail</name>
    <filename>namespaceScroom_1_1MemoryBlobs_1_1Detail.html</filename>
    <member kind="function">
      <type>PageList</type>
      <name>compressBlob</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs_1_1Detail.html</anchorfile>
      <anchor>a9eecc99bc3c2f979da79519265dce5d3</anchor>
      <arglist>(const uint8_t *in, size_t size, const PageProvider::Ptr &amp;provider)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decompressBlob</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs_1_1Detail.html</anchorfile>
      <anchor>ad9ecb35eccaa1e782bf2a383f66d5998</anchor>
      <arglist>(uint8_t *out, size_t size, PageList list, const PageProvider::Ptr &amp;provider)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::MemoryBlobs::Page</name>
    <filename>namespaceScroom_1_1MemoryBlobs_1_1Page.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Scroom::MemoryBlocks::Page &gt;</type>
      <name>Ptr</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs_1_1Page.html</anchorfile>
      <anchor>aef1d8c508f1e7142bf747836e906a738</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::MemoryBlobs::RawPageData</name>
    <filename>namespaceScroom_1_1MemoryBlobs_1_1RawPageData.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; uint8_t &gt;</type>
      <name>Ptr</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs_1_1RawPageData.html</anchorfile>
      <anchor>a3e66bb65e19725417b4ab427ad4338b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const uint8_t &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs_1_1RawPageData.html</anchorfile>
      <anchor>a2afb846f24b06f62c8564e4dde32dc02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; uint8_t &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>namespaceScroom_1_1MemoryBlobs_1_1RawPageData.html</anchorfile>
      <anchor>a56d77351049430cd88629153e0c8cb3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::MemoryBlocks</name>
    <filename>namespaceScroom_1_1MemoryBlocks.html</filename>
    <namespace>Scroom::MemoryBlocks::Detail</namespace>
    <namespace>Scroom::MemoryBlocks::RawPageData</namespace>
    <class kind="class">Scroom::MemoryBlocks::BlockFactoryInterface</class>
    <class kind="class">Scroom::MemoryBlocks::BlockInterface</class>
    <class kind="class">Scroom::MemoryBlocks::Page</class>
    <member kind="typedef">
      <type>std::list&lt; Page &gt;</type>
      <name>PageList</name>
      <anchorfile>namespaceScroom_1_1MemoryBlocks.html</anchorfile>
      <anchor>a1e99f7c5b462e84d8d2e4abdb4c0a2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>BlockFactoryInterface::Ptr</type>
      <name>getBlockFactoryInterface</name>
      <anchorfile>namespaceScroom_1_1MemoryBlocks.html</anchorfile>
      <anchor>a69b514b38d03a4a952d9d7fec8da1ec1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::MemoryBlocks::Detail</name>
    <filename>namespaceScroom_1_1MemoryBlocks_1_1Detail.html</filename>
    <namespace>Scroom::MemoryBlocks::Detail::anonymous_namespace{swapbasedblockallocator.cc}</namespace>
    <class kind="class">Scroom::MemoryBlocks::Detail::SwapBasedBlockAllocator</class>
    <class kind="class">Scroom::MemoryBlocks::Detail::SwapBasedBlockAllocatorFactory</class>
  </compound>
  <compound kind="namespace">
    <name>Scroom::MemoryBlocks::Detail::anonymous_namespace{swapbasedblockallocator.cc}</name>
    <filename>namespaceScroom_1_1MemoryBlocks_1_1Detail_1_1anonymous__namespace_02swapbasedblockallocator_8cc_03.html</filename>
    <class kind="class">Scroom::MemoryBlocks::Detail::anonymous_namespace{swapbasedblockallocator.cc}::DontDelete</class>
  </compound>
  <compound kind="namespace">
    <name>Scroom::MemoryBlocks::RawPageData</name>
    <filename>namespaceScroom_1_1MemoryBlocks_1_1RawPageData.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; uint8_t &gt;</type>
      <name>Ptr</name>
      <anchorfile>namespaceScroom_1_1MemoryBlocks_1_1RawPageData.html</anchorfile>
      <anchor>adea1c47b8e23abbfd3a1ac8f9648ae70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; uint8_t &gt;</type>
      <name>WeakPtr</name>
      <anchorfile>namespaceScroom_1_1MemoryBlocks_1_1RawPageData.html</anchorfile>
      <anchor>a72f7bee76a0a83c657d03b961774733a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::Metadata</name>
    <filename>namespaceScroom_1_1Metadata.html</filename>
    <namespace>Scroom::Metadata::anonymous_namespace{showmetadata.cc}</namespace>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt;</type>
      <name>Metadata</name>
      <anchorfile>namespaceScroom_1_1Metadata.html</anchorfile>
      <anchor>a51350b5aec7cb7add0d90fdeb7ead3eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showMetaData</name>
      <anchorfile>namespaceScroom_1_1Metadata.html</anchorfile>
      <anchor>a0e30bfa9bfb8d9471c0b6b7a9445b81a</anchor>
      <arglist>(GtkWindow *parent, std::string title, Metadata data)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::Metadata::anonymous_namespace{showmetadata.cc}</name>
    <filename>namespaceScroom_1_1Metadata_1_1anonymous__namespace_02showmetadata_8cc_03.html</filename>
    <class kind="struct">Scroom::Metadata::anonymous_namespace{showmetadata.cc}::MetaDataWindowData</class>
    <member kind="function">
      <type>GtkWidget *</type>
      <name>gtk_label_with_markup</name>
      <anchorfile>namespaceScroom_1_1Metadata_1_1anonymous__namespace_02showmetadata_8cc_03.html</anchorfile>
      <anchor>a8baf0999de5c8e17f5051b7087f90219</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>GtkWidget *</type>
      <name>addNewKeyToGrid</name>
      <anchorfile>namespaceScroom_1_1Metadata_1_1anonymous__namespace_02showmetadata_8cc_03.html</anchorfile>
      <anchor>a19d8ccee7f35235deb2483d465de5014</anchor>
      <arglist>(const GtkWidget *grid, GtkWidget *previousKey, const std::string &amp;keyText)</arglist>
    </member>
    <member kind="function">
      <type>GtkWidget *</type>
      <name>addNewValueToGrid</name>
      <anchorfile>namespaceScroom_1_1Metadata_1_1anonymous__namespace_02showmetadata_8cc_03.html</anchorfile>
      <anchor>a7103ae9eb13109a562cb1ebaa74a6531</anchor>
      <arglist>(const GtkWidget *grid, const std::string &amp;valueText, GtkWidget *key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addKeyAndValueToSizeGroup</name>
      <anchorfile>namespaceScroom_1_1Metadata_1_1anonymous__namespace_02showmetadata_8cc_03.html</anchorfile>
      <anchor>a24a89c6dd6a60001d1e7c00c21204caa</anchor>
      <arglist>(GtkWidget *key, GtkWidget *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_metadata_destroyed</name>
      <anchorfile>namespaceScroom_1_1Metadata_1_1anonymous__namespace_02showmetadata_8cc_03.html</anchorfile>
      <anchor>afaaa35bf934dc1911db8395244289b60</anchor>
      <arglist>(GtkWidget *, gpointer user_data)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::Tiff</name>
    <filename>namespaceScroom_1_1Tiff.html</filename>
    <class kind="class">Scroom::Tiff::Source</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TIFF &gt;</type>
      <name>TIFFPtr</name>
      <anchorfile>namespaceScroom_1_1Tiff.html</anchorfile>
      <anchor>a0a251765fe27458966a781ecd875a374</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Colormap::Ptr</type>
      <name>getColorMap</name>
      <anchorfile>namespaceScroom_1_1Tiff.html</anchorfile>
      <anchor>a16a8453816281bdec1cedafadfa7c14d</anchor>
      <arglist>(const TIFFPtr &amp;tif, uint16_t bps)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; Scroom::Utils::Point&lt; double &gt; &gt;</type>
      <name>getAspectRatio</name>
      <anchorfile>namespaceScroom_1_1Tiff.html</anchorfile>
      <anchor>a89fbc3026ce677e382e655b44c83ca39</anchor>
      <arglist>(const TIFFPtr &amp;tif)</arglist>
    </member>
    <member kind="function">
      <type>ColormapHelperBase::Ptr</type>
      <name>getColormapHelper</name>
      <anchorfile>namespaceScroom_1_1Tiff.html</anchorfile>
      <anchor>af14448da0b14397e25f9736a935e5dd1</anchor>
      <arglist>(const TIFFPtr &amp;tif, uint16_t bps)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; std::tuple&lt; Scroom::TiledBitmap::BitmapMetaData, TIFFPtr &gt; &gt;</type>
      <name>open</name>
      <anchorfile>namespaceScroom_1_1Tiff.html</anchorfile>
      <anchor>a98ecc36f2682d41aa5feacbaba2cc055</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::TiledBitmap</name>
    <filename>namespaceScroom_1_1TiledBitmap.html</filename>
    <namespace>Scroom::TiledBitmap::anonymous_namespace{layerspecforbitmap.cc}</namespace>
    <class kind="struct">Scroom::TiledBitmap::BitmapMetaData</class>
    <class kind="class">Scroom::TiledBitmap::LayerSpecForBitmapper</class>
    <class kind="class">Scroom::TiledBitmap::OpenTiledBitmapInterface</class>
    <member kind="typedef">
      <type>std::function&lt; Scroom::Utils::Stuff(const ProgressInterface::Ptr &amp;)&gt;</type>
      <name>ReloadFunction</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>abcdc6501ad25d0c72901a0ef53452506</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple&lt; LayerSpec, ColormapHelperBase::Ptr &gt;</type>
      <name>LayerSpecResult</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a75aad5c865440565d24e1c54846ed146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; LayerSpecResult(const BitmapMetaData &amp;bitmapMetaData)&gt;</type>
      <name>LayerSpecForBitmapFunc</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a44750b261450728023901225e657a237</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_stream</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>ad48ffa08ebee955f5039811162e0df4a</anchor>
      <arglist>(std::ostream &amp;os, const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a90b98df77076cf30312ea6e57d3e75d2</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>Metadata::Metadata</type>
      <name>to_metadata</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a57ca2a55cf5fd640d3e3e3e2d59c4a62</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>OpenPresentationInterface::Ptr</type>
      <name>ToOpenPresentationInterface</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>abd171862b26335d75a34704553701421</anchor>
      <arglist>(OpenTiledBitmapInterface::Ptr openTiledBitmapInterface)</arglist>
    </member>
    <member kind="function">
      <type>LayerSpecResult</type>
      <name>LayerSpecForBitmap</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a22a1bb4f862ef52ed08042515ffca9da</anchor>
      <arglist>(const BitmapMetaData &amp;bitmapMetaData)</arglist>
    </member>
    <member kind="function">
      <type>Scroom::Utils::Stuff</type>
      <name>scheduleLoadingBitmap</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a55c09152eec48a7f0b8b0819cd243e4d</anchor>
      <arglist>(const SourcePresentation::Ptr &amp;sp, const Layer::Ptr &amp;layer, const ProgressInterface::Ptr &amp;progress)</arglist>
    </member>
    <member kind="function">
      <type>LayerSpecResult</type>
      <name>RGBBitmap</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a6f47ad908b18e8214e9bc60808ed6466</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>LayerSpecResult</type>
      <name>CMYKBitmap</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a1c8c49cce636d826f4a7426a55ba5aa0</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>LayerSpecResult</type>
      <name>GreyscaleBitmap</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a2fac0e54aad7e9d259220cf19bc83ac4</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="function">
      <type>LayerSpecResult</type>
      <name>ColormappedBitmap</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>ae9bb2ffc268c966862573f2ef383ed7d</anchor>
      <arglist>(const BitmapMetaData &amp;bmd)</arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>RGB</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a68ed4ea621e837ae62809626d1f7bba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>CMYK</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a26f688fe4903818d5c7d117139a6bbed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>Greyscale</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a0451c92ea02ad814ffc4a83ebf51d475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::string</type>
      <name>Colormapped</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap.html</anchorfile>
      <anchor>a50226c5783a13b33eee2fa92e99280f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::TiledBitmap::anonymous_namespace{layerspecforbitmap.cc}</name>
    <filename>namespaceScroom_1_1TiledBitmap_1_1anonymous__namespace_02layerspecforbitmap_8cc_03.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>to_string</name>
      <anchorfile>namespaceScroom_1_1TiledBitmap_1_1anonymous__namespace_02layerspecforbitmap_8cc_03.html</anchorfile>
      <anchor>a9fd3fb8f5d0079d26686c582e803dc54</anchor>
      <arglist>(bool b)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::Utils</name>
    <filename>namespaceScroom_1_1Utils.html</filename>
    <namespace>Scroom::Utils::Detail</namespace>
    <class kind="class">Scroom::Utils::Base</class>
    <class kind="class">Scroom::Utils::Count</class>
    <class kind="class">Scroom::Utils::Counted</class>
    <class kind="class">Scroom::Utils::Counter</class>
    <class kind="class">Scroom::Utils::Observable</class>
    <class kind="class">Scroom::Utils::on_scope_exit</class>
    <class kind="class">Scroom::Utils::optional_cleanup</class>
    <class kind="class">Scroom::Utils::Point</class>
    <class kind="class">Scroom::Utils::ProgressInterfaceBroadcaster</class>
    <class kind="class">Scroom::Utils::ProgressInterfaceFromProgressStateInterface</class>
    <class kind="class">Scroom::Utils::ProgressInterfaceFromProgressStateInterfaceForwarder</class>
    <class kind="class">Scroom::Utils::ProgressInterfaceMultiplexer</class>
    <class kind="class">Scroom::Utils::ProgressStateInterface</class>
    <class kind="class">Scroom::Utils::ProgressStateInterfaceFromProgressInterface</class>
    <class kind="class">Scroom::Utils::ProgressStateInterfaceFromProgressInterfaceForwarder</class>
    <class kind="class">Scroom::Utils::Rectangle</class>
    <class kind="class">Scroom::Utils::Segment</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; void &gt;</type>
      <name>Stuff</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a7831a6b14da4ae303170e6607f29e6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; void &gt;</type>
      <name>StuffWeak</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>afea0aa2f53589bdee27bdc6dd4cc418a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; Stuff &gt;</type>
      <name>StuffList</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>acf77d2a64982c6e01e5111ebec656515</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; K, V, std::owner_less&lt; K &gt; &gt;</type>
      <name>WeakKeyMap</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a4eff4a800754d2391c7ac5e04d1048d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; K, std::owner_less&lt; K &gt; &gt;</type>
      <name>WeakKeySet</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a2f0b01cb3ac958356ac99bc37fbf7168</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>aee1ec40078d98263c9d8e298f864ae35</anchor>
      <arglist>(T v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero&lt; int &gt;</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a30f36549b95d51dd6817a6e93e451253</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero&lt; double &gt;</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>ab3f256ef38648a0deeb8941fdebbc2d1</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areEqual</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a62de66cbe67e4fd48bba7a0eff17be69</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; T &gt;</type>
      <name>make_segment</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>aa08251a37a550efbeabbf72d5e4b844d</anchor>
      <arglist>(T start, T size)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; T &gt;</type>
      <name>make_segment_from_start_end</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a161485b4d406f370ba6cc1bfdeb514db</anchor>
      <arglist>(T start, T end)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a0caa939fe4026a1877ff417d351afc68</anchor>
      <arglist>(std::ostream &amp;os, const Segment&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Segment&lt; double &gt;</type>
      <name>roundOutward</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a33bac75a3d40fb70f2b21a31713b61ba</anchor>
      <arglist>(Segment&lt; double &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>center</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a6af7d77e767482d135292f17d5dcce30</anchor>
      <arglist>(Segment&lt; T &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>make_point</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>aec6a39c97f4eef824b1c61dfc3b01c72</anchor>
      <arglist>(T x, T y)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>make_point</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a0adf4537b5a9b11bca9c56dc67d584ca</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a8f64fb89db50510d80441078201e09c3</anchor>
      <arglist>(std::ostream &amp;os, const Point&lt; T &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a687fe942f26a1884e4887aa9694235eb</anchor>
      <arglist>(Point&lt; T &gt; left, Point&lt; U &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a3b2d1f96c712d264c4698c8f5a059159</anchor>
      <arglist>(Point&lt; T &gt; left, Point&lt; U &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a3d5ed76d63606b17de1a73108e3c0709</anchor>
      <arglist>(Point&lt; T &gt; left, Point&lt; U &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>aa875c96523453fd97f78a6cda3abbfb8</anchor>
      <arglist>(Point&lt; T &gt; left, Point&lt; U &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a9ba167d60ac5976b771efa7bfae1c5bc</anchor>
      <arglist>(T left, Point&lt; U &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a53cc18c0fc79d14366403e84f9420f8c</anchor>
      <arglist>(Point&lt; T &gt; left, U right)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>rounded_divide_by</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a0f841ab61c4a51b9ef8a8dda13614552</anchor>
      <arglist>(Point&lt; T &gt; value, T factor)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>ceiled_divide_by</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>aa9430ca475207a4fb61773036eca9472</anchor>
      <arglist>(Point&lt; T &gt; value, T factor)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>floored_divide_by</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>ac279a11e667e077540b85a90ad8884db</anchor>
      <arglist>(Point&lt; T &gt; value, T factor)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>rounded_divide_by</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a9e36c6dc0101ca8d786dc2441e1cc360</anchor>
      <arglist>(Point&lt; T &gt; value, Point&lt; T &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>ceiled_divide_by</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a31b7188dcc0f8f706923df67b370ee93</anchor>
      <arglist>(Point&lt; T &gt; value, Point&lt; T &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>floored_divide_by</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>ad8e604f317aa2306e03d4dd9e2845369</anchor>
      <arglist>(Point&lt; T &gt; value, Point&lt; T &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>ceil</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a6d5bd18b979a559c0ec66d05ea5f751f</anchor>
      <arglist>(Point&lt; T &gt; p)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; T &gt;</type>
      <name>make_rect</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>ab180ef35718c488735a883d3798c6c8b</anchor>
      <arglist>(T x, T y, T width, T height)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; T &gt;</type>
      <name>make_rect</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a13532c34cbfeeca5958d9a1b652c7869</anchor>
      <arglist>(Point&lt; T &gt; position, Point&lt; T &gt; size)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; T &gt;</type>
      <name>make_rect_from_start_end</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>aaa2202c74a349156d323e4bd256ae733</anchor>
      <arglist>(Point&lt; T &gt; start, Point&lt; T &gt; end)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>aeaa94ffe898673912f62fc4371a750df</anchor>
      <arglist>(std::ostream &amp;os, const Rectangle&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a519ad4e7386d37be3bb4dfac771a6b38</anchor>
      <arglist>(std::ostream &amp;os, const cairo_rectangle_int_t &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a8d0cf039a6a38245abf928fa5f042c01</anchor>
      <arglist>(Rectangle&lt; T &gt; left, U right)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a80c7e1e2defb6862929e2561aa401382</anchor>
      <arglist>(T left, Rectangle&lt; U &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a45b94b28c803eb685b931d96350ee6ae</anchor>
      <arglist>(cairo_rectangle_int_t const &amp;r, Point&lt; double &gt; const &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a0938219b764b451ae4c49a95e35ff61d</anchor>
      <arglist>(Point&lt; double &gt; const &amp;p, cairo_rectangle_int_t const &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; typename std::common_type&lt; T, U &gt;::type &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a75073e42c960a7f5adbd862de366dca5</anchor>
      <arglist>(Rectangle&lt; T &gt; left, Point&lt; U &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; double &gt;</type>
      <name>roundOutward</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a109657362fdd03211f8e43916a419f03</anchor>
      <arglist>(Rectangle&lt; double &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>Rectangle&lt; double &gt;</type>
      <name>roundCorners</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>abe635d041cef6e7fb266c5eb7470b6f0</anchor>
      <arglist>(Rectangle&lt; double &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>Point&lt; T &gt;</type>
      <name>center</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a2be3b66bf784d694bf0017a57299a39e</anchor>
      <arglist>(Rectangle&lt; T &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>Stuff</type>
      <name>Empty</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a053ab918264fd8b7dca49cacf95060d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; void &gt;</type>
      <name>on_destruction</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>ace9b5ab9d76c3c1aff125ea97d2c72e5</anchor>
      <arglist>(F f)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; unsigned char &gt;</type>
      <name>shared_malloc</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a96f33218a52ff36368d6556a40f14437</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpCounts</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a0688885798e7f3f3c0c4d510577119f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>epsilon</name>
      <anchorfile>namespaceScroom_1_1Utils.html</anchorfile>
      <anchor>a00a4f91d4115659e531a6542307e270b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Scroom::Utils::Detail</name>
    <filename>namespaceScroom_1_1Utils_1_1Detail.html</filename>
    <class kind="class">Scroom::Utils::Detail::ErrorSignalHandler</class>
    <class kind="class">Scroom::Utils::Detail::ProgressStore</class>
    <class kind="class">Scroom::Utils::Detail::Registration</class>
    <member kind="function">
      <type>void</type>
      <name>assertionFailed</name>
      <anchorfile>namespaceScroom_1_1Utils_1_1Detail.html</anchorfile>
      <anchor>af5d9c2e601f73135116e508920810bd8</anchor>
      <arglist>(std::string_view type, std::string_view expr, std::string_view function, std::string_view filename, unsigned int line) __attribute__((noreturn))</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>stackTrace</name>
      <anchorfile>namespaceScroom_1_1Utils_1_1Detail.html</anchorfile>
      <anchor>a368d40c614868bb7e2a6299ec7431d35</anchor>
      <arglist>([[maybe_unused]] size_t cutoff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abort</name>
      <anchorfile>namespaceScroom_1_1Utils_1_1Detail.html</anchorfile>
      <anchor>af6ca1b376461c7e9fa52954959a24652</anchor>
      <arglist>() __attribute__((noreturn))</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ErrorSignalHandler</type>
      <name>errorSignalHandler</name>
      <anchorfile>namespaceScroom_1_1Utils_1_1Detail.html</anchorfile>
      <anchor>a7c1c38cf6641e94e7312bc79bc543c23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SelectionType</name>
    <filename>namespaceSelectionType.html</filename>
    <member kind="function">
      <type>const std::string</type>
      <name>GRID</name>
      <anchorfile>namespaceSelectionType.html</anchorfile>
      <anchor>a9f0e8fd7cec2332d694d5a898cff9dc9</anchor>
      <arglist>(&quot;GridSelection&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>PIXEL</name>
      <anchorfile>namespaceSelectionType.html</anchorfile>
      <anchor>aa8763b7e1473f7e5d1e2c8d5b86fe49f</anchor>
      <arglist>(&quot;PixelSelection&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>DEFAULT</name>
      <anchorfile>namespaceSelectionType.html</anchorfile>
      <anchor>aebc501deb9a30b47b6b63f09abcb98bc</anchor>
      <arglist>(GRID)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>md_cmake-modules_README</name>
    <title>Ryan&apos;s CMake Modules</title>
    <filename>md_cmake-modules_README</filename>
  </compound>
</tagfile>
