name: Build

on: [ push, pull_request ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

  CCACHE_BASEDIR: ${{github.workspace}}
  CCACHE_DIR: ${{github.workspace}}/.ccache
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 6

jobs:
  build-linux:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04, ubuntu-20.04 ]
        type: [ RelWithDebInfo, Debug ]
      fail-fast: false
    env:
      BUILD_TYPE: ${{ matrix.type }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: ccache cache files
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: ${{ matrix.os }}-${{ env.BUILD_TYPE }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.os }}-${{ env.BUILD_TYPE }}-ccache-

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Update apt package repos
        run: >
          sudo apt-get update

      - name: Install apt packages
        run: >
          sudo apt-get -yq --no-install-suggests --no-install-recommends install
          ccache
          libboost-dev
          libboost-filesystem-dev
          libboost-program-options-dev
          libboost-system-dev
          libboost-test-dev
          libboost-thread-dev
          libcairo2-dev
          libglib2.0-dev
          libgtest-dev
          libgtk-3-dev
          libtiff5-dev
          ninja-build
          pkg-config

      - name: Configure CMake
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          cmake $GITHUB_WORKSPACE -GNinja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_C_COMPILER=gcc-10

      - name: Build
        working-directory: ${{runner.workspace}}/build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE -- -k0

      - name: Test
        working-directory: ${{runner.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: xvfb-run ctest -C $BUILD_TYPE -j2 --output-on-failure

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Log version numbers
        run: >
          echo Scroom: && git describe && echo Tags: && git tag -l

      - name: Install Pacman packages
        run: >
          build_scripts\github\msysdo pacman --sync --noconfirm --needed
          git
          make
          mingw-w64-x86_64-boost
          mingw-w64-x86_64-dlfcn
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-glade
          mingw-w64-x86_64-gtk3
          mingw-w64-x86_64-gtk-update-icon-cache
          mingw-w64-x86_64-toolchain
          zip
          mingw64/mingw-w64-x86_64-cmake

      - name: Build
        run: >
          build_scripts\github\mingwdo
          build_scripts/github/build-cmake-mingw

      - uses: actions/upload-artifact@v2
        with:
          path: Scroom-*Source.tar.gz

      - uses: actions/upload-artifact@v2
        with:
          path: scroom-win-*.zip

  build-many-ubuntus:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          path: 'scroom-src'

      - uses: actions/checkout@v2
        with:
          ref: 'docker-build-containers'
          path: 'scroom-build-containers'

      - name: Build
        working-directory: scroom-src
        run: make -k -j$(nproc) -f build_scripts/docker/docker.mk TARGETS="$(cat ../scroom-build-containers/supported-ubuntu-releases)"
